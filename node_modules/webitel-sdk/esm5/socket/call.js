import { __awaiter, __generator } from "tslib";
export var CallActions;
(function (CallActions) {
    CallActions["Ringing"] = "ringing";
    CallActions["Active"] = "active";
    CallActions["Bridge"] = "bridge";
    CallActions["Hold"] = "hold";
    CallActions["DTMF"] = "dtmf";
    CallActions["Voice"] = "voice";
    CallActions["Silence"] = "silence";
    CallActions["Execute"] = "execute";
    CallActions["Update"] = "update";
    CallActions["Hangup"] = "hangup";
    CallActions["PeerStream"] = "peerStream";
})(CallActions || (CallActions = {}));
export var CallDirection;
(function (CallDirection) {
    CallDirection["Inbound"] = "inbound";
    CallDirection["Outbound"] = "outbound";
    CallDirection["Internal"] = "internal";
})(CallDirection || (CallDirection = {}));
var Call = /** @class */ (function () {
    function Call(client, e, peerStreams) {
        this.client = client;
        this.voice = true;
        this.createdAt = Date.now();
        this.answeredAt = 0;
        this.hangupAt = 0;
        this.peerStreams = peerStreams;
        this.id = e.id;
        this.digits = [];
        this.applications = [];
        this.nodeName = e.node_name;
        this.setState(e);
        this.setInfo(e);
    }
    Call.prototype.setActive = function (e) {
        if (!this.answeredAt) {
            this.answeredAt = Date.now();
        }
        this.setState(e);
    };
    Object.defineProperty(Call.prototype, "display", {
        get: function () {
            return this.displayNumber + " (" + this.displayName + ")";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Call.prototype, "muted", {
        get: function () {
            return this._muted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Call.prototype, "allowInboundVideo", {
        get: function () {
            if (this.videoFlow) {
                return this.videoFlow.indexOf('send') > -1;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Call.prototype, "allowOutboundVideo", {
        get: function () {
            if (this.videoFlow) {
                return this.videoFlow.indexOf('recv') > -1;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Call.prototype.setInfo = function (s) {
        this.ownerCallId = s.owner_id;
        this.parentCallId = s.parent_id;
        this.destination = s.destination;
        this.direction = s.direction;
        this.fromNumber = s.from_number;
        this.fromName = s.from_name;
        this.toName = s.to_name;
        this.toNumber = s.to_number;
        this.payload = s.payload;
        if (s.gateway_id) {
            this._gatewayId = s.gateway_id;
        }
        else {
            this._gatewayId = null; // ?
        }
        if (s.video_flow) {
            this.videoFlow = s.video_flow;
        }
        else {
            this.videoFlow = null;
        }
        this.screenRequest = s.screen_request === 'true';
        this.videoRequest = s.video_request === 'true'; //
        this.setState(s);
    };
    Object.defineProperty(Call.prototype, "gatewayId", {
        get: function () {
            return this._gatewayId;
        },
        enumerable: true,
        configurable: true
    });
    Call.prototype.setState = function (s) {
        this.state = s.action;
    };
    Object.defineProperty(Call.prototype, "active", {
        get: function () {
            return this.hangupAt === 0;
        },
        enumerable: true,
        configurable: true
    });
    Call.prototype.setPeerStreams = function (streams) {
        this.peerStreams = streams;
    };
    Call.prototype.setHangup = function (s) {
        this.hangupAt = Date.now();
        this.hangupCause = s.cause;
        this.voice = false;
        this.peerStreams = null;
        this.setState(s);
    };
    Call.prototype.setVoice = function (s) {
        this.voice = true;
    };
    Call.prototype.setSilence = function (s) {
        this.voice = false;
    };
    Call.prototype.setExecute = function (s) {
        this.applications.push(s.application);
    };
    Call.prototype.addDigit = function (s) {
        this.digits.push(s.digit);
    };
    Object.defineProperty(Call.prototype, "displayNumber", {
        get: function () {
            if (this.direction === 'inbound') {
                return this.fromNumber;
            }
            else {
                return this.toNumber;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Call.prototype, "displayName", {
        get: function () {
            if (this.direction === 'inbound') {
                return this.fromName;
            }
            else {
                return this.toName;
            }
        },
        enumerable: true,
        configurable: true
    });
    /* Call control */
    Call.prototype.answer = function (req) {
        var sessionId = null;
        if (this.client.phone.hasSession(this.id)) {
            sessionId = this.id;
        }
        else if (this.client.phone.hasSession(this.parentCallId)) {
            sessionId = this.parentCallId;
        }
        if (sessionId) {
            return this.client.phone.answer(sessionId, req);
        }
        return false;
    };
    Call.prototype.hangup = function (cause) {
        return __awaiter(this, void 0, void 0, function () {
            var _cause;
            return __generator(this, function (_a) {
                _cause = cause;
                if (this.answeredAt === 0 && !cause) {
                    _cause =
                        this.direction === CallDirection.Inbound
                            ? 'USER_BUSY'
                            : 'ORIGINATOR_CANCEL';
                }
                return [2 /*return*/, this.client.request('call_hangup', {
                        id: this.id,
                        node_id: this.nodeName,
                        cause: _cause,
                    })];
            });
        });
    };
    Call.prototype.toggleHold = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.state === CallActions.Hold) {
                    return [2 /*return*/, this.unHold()];
                }
                else {
                    return [2 /*return*/, this.hold()];
                }
                return [2 /*return*/];
            });
        });
    };
    Call.prototype.hold = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.state === CallActions.Hold) {
                    throw new Error('Call is hold');
                }
                return [2 /*return*/, this.client.request('call_hold', {
                        id: this.id,
                        node_id: this.nodeName,
                    })];
            });
        });
    };
    Call.prototype.unHold = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.state !== CallActions.Hold) {
                    throw new Error('Call is active');
                }
                return [2 /*return*/, this.client.request('call_unhold', {
                        id: this.id,
                        node_id: this.nodeName,
                    })];
            });
        });
    };
    Call.prototype.sendDTMF = function (dtmf) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.request('call_dtmf', {
                        id: this.id,
                        node_id: this.nodeName,
                        dtmf: dtmf,
                    })];
            });
        });
    };
    Call.prototype.blindTransfer = function (destination) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.parentCallId) {
                    throw new Error('Not allow one leg');
                }
                return [2 /*return*/, this.client.request('call_blind_transfer', {
                        id: this.parentCallId,
                        node_id: this.nodeName,
                        destination: destination,
                    })];
            });
        });
    };
    Call.prototype.mute = function (mute) {
        if (mute === void 0) { mute = false; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.request('call_mute', {
                            id: this.id,
                            node_id: this.nodeName,
                            mute: mute,
                        })];
                    case 1:
                        res = _a.sent();
                        this._muted = mute;
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Call.prototype.bridgeTo = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.request('call_bridge', {
                        id: this.id,
                        node_id: this.nodeName,
                        parent_id: call.id,
                        parent_node_id: call.nodeName,
                    })];
            });
        });
    };
    Call.prototype.callToUser = function (req) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                req.nodeId = this.nodeName;
                req.parentCallId = this.id || null;
                req.sendToCallId = this.parentCallId || null;
                return [2 /*return*/, this.client.inviteToUser(req)];
            });
        });
    };
    return Call;
}());
export { Call };
//# sourceMappingURL=call.js.map