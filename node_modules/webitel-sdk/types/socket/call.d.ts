import { Client, UserCallRequest } from './client';
export declare enum CallActions {
    Ringing = "ringing",
    Active = "active",
    Bridge = "bridge",
    Hold = "hold",
    DTMF = "dtmf",
    Voice = "voice",
    Silence = "silence",
    Execute = "execute",
    Update = "update",
    Hangup = "hangup",
    PeerStream = "peerStream"
}
export declare enum CallDirection {
    Inbound = "inbound",
    Outbound = "outbound",
    Internal = "internal"
}
export interface AnswerRequest {
    useVideo?: boolean;
    useAudio?: boolean;
    useScreen?: boolean;
}
export interface CallEventData {
    id: string;
    node_name: string;
    action: string;
}
export interface CallEventExecute extends CallEventData {
    application: string;
}
export interface CallEventDTMF extends CallEventData {
    digit: string;
}
export interface CallInfo extends CallEventData {
    parent_id: string;
    owner_id: string;
    direction: string;
    destination: string;
    from_number: string;
    from_name: string;
    to_number: string;
    to_name: string;
    payload: Map<string, string>;
    gateway_id: string;
    video_request: string;
    video_flow: string;
    screen_request: string;
}
export interface CallHangup extends CallEventData {
    cause: string;
}
export declare class Call {
    protected client: Client;
    id: string;
    nodeName: string;
    state: string;
    direction: string;
    destination: string;
    fromNumber: string;
    fromName: string;
    toNumber: string;
    toName: string;
    payload: Map<string, string>;
    videoRequest: boolean;
    screenRequest: boolean;
    videoFlow: string | null;
    peerStreams: MediaStream[] | null;
    screen: string | null;
    createdAt: number;
    answeredAt: number;
    hangupAt: number;
    hangupCause: string;
    parentCallId: string;
    ownerCallId: string;
    _muted: boolean;
    _gatewayId: string | null;
    digits: string[];
    applications: string[];
    voice: boolean;
    constructor(client: Client, e: CallInfo, peerStreams: MediaStream[] | null);
    setActive(e: CallEventData): void;
    get display(): string;
    get muted(): boolean;
    get allowInboundVideo(): boolean;
    get allowOutboundVideo(): boolean;
    setInfo(s: CallInfo): void;
    get gatewayId(): string | null;
    setState(s: CallEventData): void;
    get active(): boolean;
    setPeerStreams(streams: MediaStream[] | null): void;
    setHangup(s: CallHangup): void;
    setVoice(s: CallEventData): void;
    setSilence(s: CallEventData): void;
    setExecute(s: CallEventExecute): void;
    addDigit(s: CallEventDTMF): void;
    get displayNumber(): string;
    get displayName(): string;
    answer(req: AnswerRequest): boolean;
    hangup(cause?: string): Promise<Error>;
    toggleHold(): Promise<Error>;
    hold(): Promise<Error>;
    unHold(): Promise<Error>;
    sendDTMF(dtmf: string): Promise<Error>;
    blindTransfer(destination: string): Promise<Error>;
    mute(mute?: boolean): Promise<Error>;
    bridgeTo(call: Call): Promise<Error>;
    callToUser(req: UserCallRequest): Promise<Error>;
}
//# sourceMappingURL=call.d.ts.map