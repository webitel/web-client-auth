import { EventEmitter } from 'ee-ts';
import { AnswerRequest } from './call';
export interface SipConfiguration {
    server: string;
    extension: string;
    realm: string;
    uri: string;
    authorization_user: string;
    ha1?: string;
}
interface SipSession {
    id: string;
    direction: string;
    stream: object;
    connection: RTCPeerConnection;
    answer(s: object): void;
    on(name: string, arg?: object): void;
}
export interface CallSession {
    sip: SipSession;
    incoming: boolean;
    instance_id: string;
}
interface SipHoneEvent {
    unregistered(): void;
    error(err: Error): void;
    peerStreams(id: string, e: MediaStream[] | null): void;
    newSession(id: string, session: CallSession): void;
}
export declare class SipPhone extends EventEmitter<SipHoneEvent> {
    private instanceId;
    static readonly userAgent = "Webitel-Phone/0.0.1";
    private ua;
    private sessionCache;
    private log;
    constructor(instanceId: string);
    getMediaConstraints(req: AnswerRequest): object;
    callOption(req: AnswerRequest): object;
    getSession(id: string): CallSession | null;
    hasSession(id: string | null): boolean;
    getPeerStream(id: string): MediaStream[] | null;
    answer(id: string, req: AnswerRequest): boolean;
    register(sipConf: SipConfiguration): Promise<void>;
    isOutboundCall(id: string): boolean;
    unregister(): Promise<void>;
    get allSession(): CallSession[];
    protected removeSession(id: string): boolean;
    protected storeSession(id: string, session: CallSession): void;
}
export {};
//# sourceMappingURL=sip.d.ts.map