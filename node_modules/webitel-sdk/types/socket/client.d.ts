import { AnswerRequest, Call, CallActions } from './call';
import { SipPhone } from './sip';
export interface Config {
    endpoint: string;
    token?: string;
    logLvl?: 'debug' | 'info' | 'warn' | 'error';
    registerWebDevice?: boolean;
    phone?: number;
}
export interface OutboundCallRequest {
    parentCallId?: string;
    toNumber: string;
    toName?: string;
    useVideo?: boolean;
    useScreen?: boolean;
    useAudio?: boolean;
    variables?: Map<string, string>;
}
export interface UserCallRequest {
    nodeId?: string | null;
    parentCallId?: string | null;
    sendToCallId?: string | null;
    toUserId: string;
    useVideo?: boolean;
    useScreen?: boolean;
    useAudio?: boolean;
    variables?: Map<string, string>;
}
export declare enum Response {
    STATUS_FAIL = "FAIL",
    STATUS_OK = "OK"
}
export interface Session {
    id: string;
    expire: number;
    user_id: number;
    role_ids: number[];
}
export interface ConnectionInfo {
    sock_id: string;
    server_build_commit: string;
    server_node_id: string;
    server_version: string;
    server_time: number;
    session: Session;
}
export declare type CallEventHandler = (action: CallActions, call: Call) => void;
export declare class Client {
    protected readonly _config: Config;
    phone: SipPhone;
    private socket;
    private connectionInfo;
    private reqSeq;
    private queueRequest;
    private log;
    private eventHandler;
    private callStore;
    constructor(_config: Config);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    subscribeCall(handler: CallEventHandler, data?: object): Promise<null | Error>;
    unSubscribe(action: string, handler: CallEventHandler, data?: object): Promise<null | Error>;
    allCall(): Call[];
    callById(id: string): Call | undefined;
    auth(): Promise<Error>;
    sessionInfo(): Session;
    get version(): string;
    get instanceId(): string;
    invite(req: OutboundCallRequest): Promise<Error>;
    inviteToUser(req: UserCallRequest): Promise<Error>;
    answer(id: string, req: AnswerRequest): boolean;
    request(action: string, data?: object): Promise<Error>;
    useWebPhone(): boolean;
    private deviceConfig;
    private onMessage;
    private connected;
    private onNewCallSession;
    private checkAutoAnswer;
    private connectToSocket;
    private handleCallEvents;
}
//# sourceMappingURL=client.d.ts.map