import { EventEmitter } from 'ee-ts';
import { formatWebSocketUri } from './utils';
const SOCKET_URL_SUFFIX = 'websocket';
export class Socket extends EventEmitter {
    constructor(host) {
        super();
        this.host = host;
    }
    connect(token) {
        this.socket = new WebSocket(`${formatWebSocketUri(this.host)}/${SOCKET_URL_SUFFIX}?access_token=${token}`);
        this.socket.onclose = (e) => this.onClose(e.code);
        this.socket.onmessage = (e) => this.onMessage(e.data);
        this.socket.onopen = () => this.onOpen();
    }
    send(request) {
        this.socket.send(JSON.stringify(request));
        return null;
    }
    close(code) {
        this.socket.close(code);
        delete this.socket;
    }
    onOpen() {
        this.emit('open');
    }
    onClose(code) {
        this.emit('close', code);
    }
    onMessage(data) {
        const message = JSON.parse(data);
        this.emit('message', message);
    }
}
//# sourceMappingURL=socket.js.map