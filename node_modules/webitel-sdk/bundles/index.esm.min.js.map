{"version":3,"file":"index.esm.min.js","sources":["../../src/api/base.ts","../../src/api/api.ts","../../src/api/configuration.ts","../../src/socket/call.ts","../../src/socket/log.ts","../../src/socket/sip.ts","../../src/socket/utils.ts","../../src/socket/socket.ts","../../src/socket/client.ts"],"sourcesContent":["// tslint:disable\n/// <reference path=\"./custom.d.ts\" />\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration'\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios'\n\nexport const BASE_PATH = 'http://dev.webitel.com'.replace(/\\/+$/, '')\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n}\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string\n  options: any\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n      this.basePath = configuration.basePath || this.basePath\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError'\n  constructor(public field: string, msg?: string) {\n    super(msg)\n  }\n}\n","// tslint:disable\n/// <reference path=\"./custom.d.ts\" />\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport * as globalImportUrl from 'url'\nimport { Configuration } from './configuration'\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios'\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  BASE_PATH,\n  COLLECTION_FORMATS,\n  RequestArgs,\n  BaseAPI,\n  RequiredError,\n} from './base'\n\n/**\n *\n * @export\n * @interface EngineAcceptOfDay\n */\nexport interface EngineAcceptOfDay {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  day?: number\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineAcceptOfDay\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  end_time_of_day?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  start_time_of_day?: number\n}\n/**\n *\n * @export\n * @interface EngineAgent\n */\nexport interface EngineAgent {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  last_state_change?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  state?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  state_timeout?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  status?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgent\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentInQueue\n */\nexport interface EngineAgentInQueue {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  active_member?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  count_member?: number\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineAgentInQueue\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentInQueue\n   */\n  queue?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentInQueue\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  type?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  waiting_member?: number\n}\n/**\n *\n * @export\n * @interface EngineAgentInTeam\n */\nexport interface EngineAgentInTeam {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentInTeam\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentInTeam\n   */\n  team?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentSkill\n */\nexport interface EngineAgentSkill {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentSkill\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentSkillItem\n */\nexport interface EngineAgentSkillItem {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentSkillItem\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkillItem\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkillItem\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentState\n */\nexport interface EngineAgentState {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  joined_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentState\n   */\n  queue?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  state?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  timeout_at?: string\n}\n/**\n *\n * @export\n * @interface EngineAgentStatusRequest\n */\nexport interface EngineAgentStatusRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  status?: string\n}\n/**\n *\n * @export\n * @interface EngineAgentTeam\n */\nexport interface EngineAgentTeam {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  strategy?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineBucket\n */\nexport interface EngineBucket {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCalendar\n */\nexport interface EngineCalendar {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineCalendar\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineCalendar\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCommunicationType\n */\nexport interface EngineCommunicationType {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineCommunicationTypeRequest\n */\nexport interface EngineCommunicationTypeRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentRequest\n */\nexport interface EngineCreateAgentRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateAgentRequest\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentSkillRequest\n */\nexport interface EngineCreateAgentSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  agent_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentTeamRequest\n */\nexport interface EngineCreateAgentTeamRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateBucketRequest\n */\nexport interface EngineCreateBucketRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateCalendarRequest\n */\nexport interface EngineCreateCalendarRequest {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineCreateCalendarRequest\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineCreateCalendarRequest\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateCalendarRequest\n   */\n  timezone?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateListCommunicationRequest\n */\nexport interface EngineCreateListCommunicationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateListRequest\n */\nexport interface EngineCreateListRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberBulkItem\n */\nexport interface EngineCreateMemberBulkItem {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  priority?: number\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberBulkRequest\n */\nexport interface EngineCreateMemberBulkRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<EngineCreateMemberBulkItem>}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  items?: Array<EngineCreateMemberBulkItem>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberRequest\n */\nexport interface EngineCreateMemberRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineCreateMemberRequest\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateMemberRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateMemberRequest\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberRequest\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateMemberRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceDisplayRequest\n */\nexport interface EngineCreateOutboundResourceDisplayRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  resource_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceGroupRequest\n */\nexport interface EngineCreateOutboundResourceGroupRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceInGroupRequest\n */\nexport interface EngineCreateOutboundResourceInGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  group_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceRequest\n */\nexport interface EngineCreateOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueBucketRequest\n */\nexport interface EngineCreateQueueBucketRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueRequest\n */\nexport interface EngineCreateQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueResourceGroupRequest\n */\nexport interface EngineCreateQueueResourceGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueRoutingRequest\n */\nexport interface EngineCreateQueueRoutingRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateResourceTeamAgentRequest\n */\nexport interface EngineCreateResourceTeamAgentRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateResourceTeamSkillRequest\n */\nexport interface EngineCreateResourceTeamSkillRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingOutboundCallRequest\n */\nexport interface EngineCreateRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingSchemaRequest\n */\nexport interface EngineCreateRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingVariableRequest\n */\nexport interface EngineCreateRoutingVariableRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateSkillRequest\n */\nexport interface EngineCreateSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateSupervisorInTeamRequest\n */\nexport interface EngineCreateSupervisorInTeamRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineDeleteMembersRequest\n */\nexport interface EngineDeleteMembersRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineDeleteMembersRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineDeleteMembersRequest\n   */\n  ids?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineDeleteMembersRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineExceptDate\n */\nexport interface EngineExceptDate {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineExceptDate\n   */\n  date?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineExceptDate\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineExceptDate\n   */\n  name?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineExceptDate\n   */\n  repeat?: boolean\n}\n/**\n *\n * @export\n * @interface EngineList\n */\nexport interface EngineList {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineList\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineList\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineListAgent\n */\nexport interface EngineListAgent {\n  /**\n   *\n   * @type {Array<EngineAgent>}\n   * @memberof EngineListAgent\n   */\n  items?: Array<EngineAgent>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListAgent\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListAgentInQueue\n */\nexport interface EngineListAgentInQueue {\n  /**\n   *\n   * @type {Array<EngineAgentInQueue>}\n   * @memberof EngineListAgentInQueue\n   */\n  items?: Array<EngineAgentInQueue>\n}\n/**\n *\n * @export\n * @interface EngineListAgentInTeam\n */\nexport interface EngineListAgentInTeam {\n  /**\n   *\n   * @type {Array<EngineAgentInTeam>}\n   * @memberof EngineListAgentInTeam\n   */\n  items?: Array<EngineAgentInTeam>\n}\n/**\n *\n * @export\n * @interface EngineListAgentSkill\n */\nexport interface EngineListAgentSkill {\n  /**\n   *\n   * @type {Array<EngineAgentSkillItem>}\n   * @memberof EngineListAgentSkill\n   */\n  items?: Array<EngineAgentSkillItem>\n}\n/**\n *\n * @export\n * @interface EngineListAgentStateHistory\n */\nexport interface EngineListAgentStateHistory {\n  /**\n   *\n   * @type {Array<EngineAgentState>}\n   * @memberof EngineListAgentStateHistory\n   */\n  items?: Array<EngineAgentState>\n}\n/**\n *\n * @export\n * @interface EngineListAgentTeam\n */\nexport interface EngineListAgentTeam {\n  /**\n   *\n   * @type {Array<EngineAgentTeam>}\n   * @memberof EngineListAgentTeam\n   */\n  items?: Array<EngineAgentTeam>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListAgentTeam\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListBucket\n */\nexport interface EngineListBucket {\n  /**\n   *\n   * @type {Array<EngineBucket>}\n   * @memberof EngineListBucket\n   */\n  items?: Array<EngineBucket>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListBucket\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListCalendar\n */\nexport interface EngineListCalendar {\n  /**\n   *\n   * @type {Array<EngineCalendar>}\n   * @memberof EngineListCalendar\n   */\n  items?: Array<EngineCalendar>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListCalendar\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListCommunication\n */\nexport interface EngineListCommunication {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineListCommunicationType\n */\nexport interface EngineListCommunicationType {\n  /**\n   *\n   * @type {Array<EngineCommunicationType>}\n   * @memberof EngineListCommunicationType\n   */\n  items?: Array<EngineCommunicationType>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListCommunicationType\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListMember\n */\nexport interface EngineListMember {\n  /**\n   *\n   * @type {Array<EngineMember>}\n   * @memberof EngineListMember\n   */\n  items?: Array<EngineMember>\n}\n/**\n *\n * @export\n * @interface EngineListMemberAttempt\n */\nexport interface EngineListMemberAttempt {\n  /**\n   *\n   * @type {Array<EngineMemberAttempt>}\n   * @memberof EngineListMemberAttempt\n   */\n  items?: Array<EngineMemberAttempt>\n}\n/**\n *\n * @export\n * @interface EngineListOfList\n */\nexport interface EngineListOfList {\n  /**\n   *\n   * @type {Array<EngineList>}\n   * @memberof EngineListOfList\n   */\n  items?: Array<EngineList>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOfList\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOfListCommunication\n */\nexport interface EngineListOfListCommunication {\n  /**\n   *\n   * @type {Array<EngineListCommunication>}\n   * @memberof EngineListOfListCommunication\n   */\n  items?: Array<EngineListCommunication>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOfListCommunication\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResource\n */\nexport interface EngineListOutboundResource {\n  /**\n   *\n   * @type {Array<EngineOutboundResource>}\n   * @memberof EngineListOutboundResource\n   */\n  items?: Array<EngineOutboundResource>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOutboundResource\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceDisplay\n */\nexport interface EngineListOutboundResourceDisplay {\n  /**\n   *\n   * @type {Array<EngineResourceDisplay>}\n   * @memberof EngineListOutboundResourceDisplay\n   */\n  items?: Array<EngineResourceDisplay>\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceGroup\n */\nexport interface EngineListOutboundResourceGroup {\n  /**\n   *\n   * @type {Array<EngineOutboundResourceViewGroup>}\n   * @memberof EngineListOutboundResourceGroup\n   */\n  items?: Array<EngineOutboundResourceViewGroup>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOutboundResourceGroup\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceInGroup\n */\nexport interface EngineListOutboundResourceInGroup {\n  /**\n   *\n   * @type {Array<EngineOutboundResourceInGroup>}\n   * @memberof EngineListOutboundResourceInGroup\n   */\n  items?: Array<EngineOutboundResourceInGroup>\n}\n/**\n *\n * @export\n * @interface EngineListQueue\n */\nexport interface EngineListQueue {\n  /**\n   *\n   * @type {Array<EngineQueue>}\n   * @memberof EngineListQueue\n   */\n  items?: Array<EngineQueue>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListQueue\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListQueueBucket\n */\nexport interface EngineListQueueBucket {\n  /**\n   *\n   * @type {Array<EngineQueueBucket>}\n   * @memberof EngineListQueueBucket\n   */\n  items?: Array<EngineQueueBucket>\n}\n/**\n *\n * @export\n * @interface EngineListQueueResourceGroup\n */\nexport interface EngineListQueueResourceGroup {\n  /**\n   *\n   * @type {Array<EngineQueueResourceGroup>}\n   * @memberof EngineListQueueResourceGroup\n   */\n  items?: Array<EngineQueueResourceGroup>\n}\n/**\n *\n * @export\n * @interface EngineListQueueRouting\n */\nexport interface EngineListQueueRouting {\n  /**\n   *\n   * @type {Array<EngineQueueRouting>}\n   * @memberof EngineListQueueRouting\n   */\n  items?: Array<EngineQueueRouting>\n}\n/**\n *\n * @export\n * @interface EngineListResourceTeamAgent\n */\nexport interface EngineListResourceTeamAgent {\n  /**\n   *\n   * @type {Array<EngineResourceTeamAgent>}\n   * @memberof EngineListResourceTeamAgent\n   */\n  items?: Array<EngineResourceTeamAgent>\n}\n/**\n *\n * @export\n * @interface EngineListResourceTeamSkill\n */\nexport interface EngineListResourceTeamSkill {\n  /**\n   *\n   * @type {Array<EngineResourceTeamSkill>}\n   * @memberof EngineListResourceTeamSkill\n   */\n  items?: Array<EngineResourceTeamSkill>\n}\n/**\n *\n * @export\n * @interface EngineListRoutingOutboundCall\n */\nexport interface EngineListRoutingOutboundCall {\n  /**\n   *\n   * @type {Array<EngineRoutingOutboundCallCompact>}\n   * @memberof EngineListRoutingOutboundCall\n   */\n  items?: Array<EngineRoutingOutboundCallCompact>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListRoutingOutboundCall\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListRoutingSchema\n */\nexport interface EngineListRoutingSchema {\n  /**\n   *\n   * @type {Array<EngineRoutingSchema>}\n   * @memberof EngineListRoutingSchema\n   */\n  items?: Array<EngineRoutingSchema>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListRoutingSchema\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListRoutingVariable\n */\nexport interface EngineListRoutingVariable {\n  /**\n   *\n   * @type {Array<EngineRoutingVariable>}\n   * @memberof EngineListRoutingVariable\n   */\n  items?: Array<EngineRoutingVariable>\n}\n/**\n *\n * @export\n * @interface EngineListSkill\n */\nexport interface EngineListSkill {\n  /**\n   *\n   * @type {Array<EngineSkill>}\n   * @memberof EngineListSkill\n   */\n  items?: Array<EngineSkill>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListSkill\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListSupervisorInTeam\n */\nexport interface EngineListSupervisorInTeam {\n  /**\n   *\n   * @type {Array<EngineSupervisorInTeam>}\n   * @memberof EngineListSupervisorInTeam\n   */\n  items?: Array<EngineSupervisorInTeam>\n}\n/**\n *\n * @export\n * @interface EngineListTimezoneResponse\n */\nexport interface EngineListTimezoneResponse {\n  /**\n   *\n   * @type {Array<EngineTimezone>}\n   * @memberof EngineListTimezoneResponse\n   */\n  items?: Array<EngineTimezone>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListTimezoneResponse\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineLookup\n */\nexport interface EngineLookup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineLookup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineLookup\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineMember\n */\nexport interface EngineMember {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMember\n   */\n  attempts?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMember\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunication>}\n   * @memberof EngineMember\n   */\n  communications?: Array<EngineMemberCommunication>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  created_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  last_activity_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMember\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineMember\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  stop_cause?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMember\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineMember\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineMemberAttempt\n */\nexport interface EngineMemberAttempt {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMemberAttempt\n   */\n  active?: boolean\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  answered_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  bridged_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  created_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  hangup_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  leg_a_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  leg_b_id?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineMemberAttempt\n   */\n  logs?: object\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  node?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  originate_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  result?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMemberAttempt\n   */\n  success?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberAttempt\n   */\n  weight?: number\n}\n/**\n *\n * @export\n * @interface EngineMemberBulkResponse\n */\nexport interface EngineMemberBulkResponse {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineMemberBulkResponse\n   */\n  ids?: Array<string>\n}\n/**\n *\n * @export\n * @interface EngineMemberCommunication\n */\nexport interface EngineMemberCommunication {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  attempts?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  last_activity_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  last_cause?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunication\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  state?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunication\n   */\n  type?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineMemberCommunicationCreateRequest\n */\nexport interface EngineMemberCommunicationCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  type?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineMovePositionRoutingOutboundCallRequest\n */\nexport interface EngineMovePositionRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  from_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  to_id?: string\n}\n/**\n *\n * @export\n * @interface EngineMovePositionRoutingOutboundCallResponse\n */\nexport interface EngineMovePositionRoutingOutboundCallResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMovePositionRoutingOutboundCallResponse\n   */\n  success?: boolean\n}\n/**\n *\n * @export\n * @interface EngineOutboundResource\n */\nexport interface EngineOutboundResource {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineOutboundResource\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineOutboundResource\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  last_error_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  last_error_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineOutboundResource\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  rps?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  updated_by?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineOutboundResource\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceGroup\n */\nexport interface EngineOutboundResourceGroup {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineOutboundResourceGroup\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceInGroup\n */\nexport interface EngineOutboundResourceInGroup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  group_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceTimeRange\n */\nexport interface EngineOutboundResourceTimeRange {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResourceTimeRange\n   */\n  end_time_of_day?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResourceTimeRange\n   */\n  start_time_of_day?: number\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceViewGroup\n */\nexport interface EngineOutboundResourceViewGroup {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  strategy?: string\n}\n/**\n *\n * @export\n * @interface EnginePatchOutboundResourceRequest\n */\nexport interface EnginePatchOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EnginePatchQueueRequest\n */\nexport interface EnginePatchQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchQueueRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EnginePatchQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EnginePatchRoutingOutboundCallRequest\n */\nexport interface EnginePatchRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EnginePatchRoutingSchemaRequest\n */\nexport interface EnginePatchRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineQueue\n */\nexport interface EngineQueue {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineQueue\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineQueue\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  type?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  updated_by?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineQueue\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineQueueBucket\n */\nexport interface EngineQueueBucket {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueueBucket\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueBucket\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueueBucket\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineQueueResourceGroup\n */\nexport interface EngineQueueResourceGroup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueResourceGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueueResourceGroup\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineQueueRouting\n */\nexport interface EngineQueueRouting {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineQueueRouting\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueueRouting\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceDisplay\n */\nexport interface EngineResourceDisplay {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceDisplay\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceDisplay\n   */\n  id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceTeamAgent\n */\nexport interface EngineResourceTeamAgent {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamAgent\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamAgent\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamAgent\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamAgent\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamAgent\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceTeamSkill\n */\nexport interface EngineResourceTeamSkill {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamSkill\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamSkill\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamSkill\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResponse\n */\nexport interface EngineResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResponse\n   */\n  status?: string\n}\n/**\n *\n * @export\n * @interface EngineRoutingOutboundCall\n */\nexport interface EngineRoutingOutboundCall {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingOutboundCall\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingOutboundCallCompact\n */\nexport interface EngineRoutingOutboundCallCompact {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  position?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingSchema\n */\nexport interface EngineRoutingSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingSchema\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingSchema\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineRoutingSchema\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineRoutingSchema\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineRoutingSchema\n   */\n  type?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingSchema\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingVariable\n */\nexport interface EngineRoutingVariable {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineSkill\n */\nexport interface EngineSkill {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineSupervisorInTeam\n */\nexport interface EngineSupervisorInTeam {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineSupervisorInTeam\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineTimezone\n */\nexport interface EngineTimezone {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  offset?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentRequest\n */\nexport interface EngineUpdateAgentRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateAgentRequest\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentSkillRequest\n */\nexport interface EngineUpdateAgentSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  agent_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentTeamRequest\n */\nexport interface EngineUpdateAgentTeamRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateBucketRequest\n */\nexport interface EngineUpdateBucketRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateCalendarRequest\n */\nexport interface EngineUpdateCalendarRequest {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  timezone?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateCommunicationTypeRequest\n */\nexport interface EngineUpdateCommunicationTypeRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateListCommunicationRequest\n */\nexport interface EngineUpdateListCommunicationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateListRequest\n */\nexport interface EngineUpdateListRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateMemberRequest\n */\nexport interface EngineUpdateMemberRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateMemberRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineUpdateMemberRequest\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateMemberRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineUpdateMemberRequest\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateMemberRequest\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateMemberRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceDisplayRequest\n */\nexport interface EngineUpdateOutboundResourceDisplayRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  resource_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceGroupRequest\n */\nexport interface EngineUpdateOutboundResourceGroupRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceInGroupRequest\n */\nexport interface EngineUpdateOutboundResourceInGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  group_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceRequest\n */\nexport interface EngineUpdateOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueBucketRequest\n */\nexport interface EngineUpdateQueueBucketRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueRequest\n */\nexport interface EngineUpdateQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueResourceGroupRequest\n */\nexport interface EngineUpdateQueueResourceGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueRoutingRequest\n */\nexport interface EngineUpdateQueueRoutingRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateResourceTeamAgentRequest\n */\nexport interface EngineUpdateResourceTeamAgentRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateResourceTeamSkillRequest\n */\nexport interface EngineUpdateResourceTeamSkillRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingOutboundCallRequest\n */\nexport interface EngineUpdateRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingSchemaRequest\n */\nexport interface EngineUpdateRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingVariableRequest\n */\nexport interface EngineUpdateRoutingVariableRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateSkillRequest\n */\nexport interface EngineUpdateSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateSupervisorInTeamRequest\n */\nexport interface EngineUpdateSupervisorInTeamRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  team_id?: string\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.\n * @export\n * @enum {string}\n */\nexport enum ProtobufNullValue {\n  NULLVALUE = 'NULL_VALUE',\n}\n\n/**\n *\n * @export\n * @interface StorageBackendProfile\n */\nexport interface StorageBackendProfile {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageBackendProfile\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  data_count?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  data_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageBackendProfile\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof StorageBackendProfile\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageBackendProfile\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageBackendProfile\n   */\n  properties?: { [key: string]: string }\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  type?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageBackendProfile\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface StorageCreateBackendProfileRequest\n */\nexport interface StorageCreateBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface StorageListBackendProfile\n */\nexport interface StorageListBackendProfile {\n  /**\n   *\n   * @type {Array<StorageBackendProfile>}\n   * @memberof StorageListBackendProfile\n   */\n  items?: Array<StorageBackendProfile>\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageListBackendProfile\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface StorageListMedia\n */\nexport interface StorageListMedia {\n  /**\n   *\n   * @type {Array<StorageMediaFile>}\n   * @memberof StorageListMedia\n   */\n  items?: Array<StorageMediaFile>\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageListMedia\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface StorageMediaFile\n */\nexport interface StorageMediaFile {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageMediaFile\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  mime_type?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageMediaFile\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface StoragePatchBackendProfileRequest\n */\nexport interface StoragePatchBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface StorageUpdateBackendProfileRequest\n */\nexport interface StorageUpdateBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n}\n\n/**\n * AgentServiceApi - axios parameter creator\n * @export\n */\nexport const AgentServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(\n      body: EngineCreateAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/agents`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling searchAgentInQueue.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/queues`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling searchAgentInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/teams`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling searchAgentStateHistory.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/states/history`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (time_from !== undefined) {\n        localVarQueryParameter['time_from'] = time_from\n      }\n\n      if (time_to !== undefined) {\n        localVarQueryParameter['time_to'] = time_to\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(\n      id: string,\n      body: EngineUpdateAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentStatus.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentStatus.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/status`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineAgentStatusRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentServiceApi - functional programming interface\n * @export\n */\nexport const AgentServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(\n      body: EngineCreateAgentRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).createAgent(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgent(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).readAgent(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgent(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentInQueue> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentInQueue(id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentInTeam> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentInTeam(id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentStateHistory> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentStateHistory(\n        agent_id,\n        page,\n        size,\n        time_from,\n        time_to,\n        domain_id,\n        options\n      )\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(\n      id: string,\n      body: EngineUpdateAgentRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgent(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResponse> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentStatus(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentServiceApi - factory interface\n * @export\n */\nexport const AgentServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(body: EngineCreateAgentRequest, options?: any) {\n      return AgentServiceApiFp(configuration).createAgent(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(id: string, domain_id?: string, options?: any) {\n      return AgentServiceApiFp(configuration).deleteAgent(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(id: string, domain_id?: string, options?: any) {\n      return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgent(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentInQueue(\n        id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentInTeam(\n        id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentStateHistory(\n        agent_id,\n        page,\n        size,\n        time_from,\n        time_to,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(id: string, body: EngineUpdateAgentRequest, options?: any) {\n      return AgentServiceApiFp(configuration).updateAgent(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).updateAgentStatus(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentServiceApi - object-oriented interface\n * @export\n * @class AgentServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Agent\n   * @param {EngineCreateAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public createAgent(body: EngineCreateAgentRequest, options?: any) {\n    return AgentServiceApiFp(this.configuration).createAgent(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Agent\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public deleteAgent(id: string, domain_id?: string, options?: any) {\n    return AgentServiceApiFp(this.configuration).deleteAgent(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Agent item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public readAgent(id: string, domain_id?: string, options?: any) {\n    return AgentServiceApiFp(this.configuration).readAgent(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Agent\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgent(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgent(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentInQueue(\n    id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentInQueue(\n      id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentInTeam(\n    id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentInTeam(\n      id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Agent\n   * @param {string} agent_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [time_from]\n   * @param {string} [time_to]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentStateHistory(\n    agent_id: string,\n    page?: number,\n    size?: number,\n    time_from?: string,\n    time_to?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentStateHistory(\n      agent_id,\n      page,\n      size,\n      time_from,\n      time_to,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Agent\n   * @param {string} id\n   * @param {EngineUpdateAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public updateAgent(\n    id: string,\n    body: EngineUpdateAgentRequest,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Change agent status\n   * @param {string} id\n   * @param {EngineAgentStatusRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public updateAgentStatus(\n    id: string,\n    body: EngineAgentStatusRequest,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).updateAgentStatus(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * AgentSkillServiceApi - axios parameter creator\n * @export\n */\nexport const AgentSkillServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling createAgentSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling deleteAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling readAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling searchAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - functional programming interface\n * @export\n */\nexport const AgentSkillServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).createAgentSkill(agent_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgentSkill(agent_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).readAgentSkill(agent_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentSkill(agent_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentSkill(agent_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - factory interface\n * @export\n */\nexport const AgentSkillServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).createAgentSkill(\n        agent_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(\n        agent_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).readAgentSkill(\n        agent_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).searchAgentSkill(\n        agent_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).updateAgentSkill(\n        agent_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - object-oriented interface\n * @export\n * @class AgentSkillServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentSkillServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create AgentSkill\n   * @param {string} agent_id\n   * @param {EngineCreateAgentSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public createAgentSkill(\n    agent_id: string,\n    body: EngineCreateAgentSkillRequest,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).createAgentSkill(\n      agent_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove AgentSkill\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public deleteAgentSkill(\n    agent_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(\n      agent_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary AgentSkill item\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public readAgentSkill(\n    agent_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).readAgentSkill(\n      agent_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of AgentSkill\n   * @param {string} agent_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public searchAgentSkill(\n    agent_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(\n      agent_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update AgentSkill\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {EngineUpdateAgentSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public updateAgentSkill(\n    agent_id: string,\n    id: string,\n    body: EngineUpdateAgentSkillRequest,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(\n      agent_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * AgentTeamServiceApi - axios parameter creator\n * @export\n */\nexport const AgentTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(\n      body: EngineCreateAgentTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/teams`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - functional programming interface\n * @export\n */\nexport const AgentTeamServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(\n      body: EngineCreateAgentTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createAgentTeam(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgentTeam(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readAgentTeam(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentTeam(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentTeam(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - factory interface\n * @export\n */\nexport const AgentTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {\n      return AgentTeamServiceApiFp(configuration).createAgentTeam(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(id: string, domain_id?: string, options?: any) {\n      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(id: string, domain_id?: string, options?: any) {\n      return AgentTeamServiceApiFp(configuration).readAgentTeam(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentTeamServiceApiFp(configuration).searchAgentTeam(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options?: any\n    ) {\n      return AgentTeamServiceApiFp(configuration).updateAgentTeam(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - object-oriented interface\n * @export\n * @class AgentTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create AgentTeam\n   * @param {EngineCreateAgentTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).createAgentTeam(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove AgentTeam\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public deleteAgentTeam(id: string, domain_id?: string, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary AgentTeam item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public readAgentTeam(id: string, domain_id?: string, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).readAgentTeam(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of AgentTeam\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public searchAgentTeam(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update AgentTeam\n   * @param {string} id\n   * @param {EngineUpdateAgentTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public updateAgentTeam(\n    id: string,\n    body: EngineUpdateAgentTeamRequest,\n    options?: any\n  ) {\n    return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * BackendProfileServiceApi - axios parameter creator\n * @export\n */\nexport const BackendProfileServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StorageCreateBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchBackendProfile.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StoragePatchBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/storage/backend_profiles`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateBackendProfile.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StorageUpdateBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - functional programming interface\n * @export\n */\nexport const BackendProfileServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).createBackendProfile(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).deleteBackendProfile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).patchBackendProfile(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).readBackendProfile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageListBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).searchBackendProfile(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).updateBackendProfile(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - factory interface\n * @export\n */\nexport const BackendProfileServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).createBackendProfile(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(id: string, domain_id?: string, options?: any) {\n      return BackendProfileServiceApiFp(configuration).deleteBackendProfile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).patchBackendProfile(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(id: string, domain_id?: string, options?: any) {\n      return BackendProfileServiceApiFp(configuration).readBackendProfile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).searchBackendProfile(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).updateBackendProfile(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - object-oriented interface\n * @export\n * @class BackendProfileServiceApi\n * @extends {BaseAPI}\n */\nexport class BackendProfileServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create BackendProfile\n   * @param {StorageCreateBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public createBackendProfile(\n    body: StorageCreateBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).createBackendProfile(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove BackendProfile\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public deleteBackendProfile(id: string, domain_id?: string, options?: any) {\n    return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch BackendProfile\n   * @param {string} id\n   * @param {StoragePatchBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public patchBackendProfile(\n    id: string,\n    body: StoragePatchBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary BackendProfile item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public readBackendProfile(id: string, domain_id?: string, options?: any) {\n    return BackendProfileServiceApiFp(this.configuration).readBackendProfile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of BackendProfile\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public searchBackendProfile(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update BackendProfile\n   * @param {string} id\n   * @param {StorageUpdateBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public updateBackendProfile(\n    id: string,\n    body: StorageUpdateBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * BucketServiceApi - axios parameter creator\n * @export\n */\nexport const BucketServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(\n      body: EngineCreateBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/buckets`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(\n      id: string,\n      body: EngineUpdateBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * BucketServiceApi - functional programming interface\n * @export\n */\nexport const BucketServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(\n      body: EngineCreateBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).createBucket(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).deleteBucket(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).readBucket(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).searchBucket(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(\n      id: string,\n      body: EngineUpdateBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).updateBucket(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * BucketServiceApi - factory interface\n * @export\n */\nexport const BucketServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(body: EngineCreateBucketRequest, options?: any) {\n      return BucketServiceApiFp(configuration).createBucket(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(id: string, domain_id?: string, options?: any) {\n      return BucketServiceApiFp(configuration).deleteBucket(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(id: string, domain_id?: string, options?: any) {\n      return BucketServiceApiFp(configuration).readBucket(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return BucketServiceApiFp(configuration).searchBucket(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(id: string, body: EngineUpdateBucketRequest, options?: any) {\n      return BucketServiceApiFp(configuration).updateBucket(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * BucketServiceApi - object-oriented interface\n * @export\n * @class BucketServiceApi\n * @extends {BaseAPI}\n */\nexport class BucketServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Bucket\n   * @param {EngineCreateBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public createBucket(body: EngineCreateBucketRequest, options?: any) {\n    return BucketServiceApiFp(this.configuration).createBucket(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Bucket\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public deleteBucket(id: string, domain_id?: string, options?: any) {\n    return BucketServiceApiFp(this.configuration).deleteBucket(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Bucket item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public readBucket(id: string, domain_id?: string, options?: any) {\n    return BucketServiceApiFp(this.configuration).readBucket(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Bucket\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public searchBucket(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return BucketServiceApiFp(this.configuration).searchBucket(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Bucket\n   * @param {string} id\n   * @param {EngineUpdateBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public updateBucket(\n    id: string,\n    body: EngineUpdateBucketRequest,\n    options?: any\n  ) {\n    return BucketServiceApiFp(this.configuration).updateBucket(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * CalendarServiceApi - axios parameter creator\n * @export\n */\nexport const CalendarServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(\n      body: EngineCreateCalendarRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createCalendar.'\n        )\n      }\n      const localVarPath = `/calendars`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateCalendarRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/calendars`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(\n      page?: number,\n      size?: number,\n      q?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/calendars/timezones`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateCalendar.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateCalendarRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - functional programming interface\n * @export\n */\nexport const CalendarServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(\n      body: EngineCreateCalendarRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).createCalendar(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).deleteCalendar(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).readCalendar(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).searchCalendar(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(\n      page?: number,\n      size?: number,\n      q?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListTimezoneResponse> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).searchTimezones(page, size, q, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).updateCalendar(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - factory interface\n * @export\n */\nexport const CalendarServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(body: EngineCreateCalendarRequest, options?: any) {\n      return CalendarServiceApiFp(configuration).createCalendar(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(id: string, domain_id?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).deleteCalendar(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(id: string, domain_id?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).readCalendar(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return CalendarServiceApiFp(configuration).searchCalendar(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(page?: number, size?: number, q?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).searchTimezones(\n        page,\n        size,\n        q,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options?: any\n    ) {\n      return CalendarServiceApiFp(configuration).updateCalendar(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - object-oriented interface\n * @export\n * @class CalendarServiceApi\n * @extends {BaseAPI}\n */\nexport class CalendarServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create calendar\n   * @param {EngineCreateCalendarRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public createCalendar(body: EngineCreateCalendarRequest, options?: any) {\n    return CalendarServiceApiFp(this.configuration).createCalendar(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove calendar\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public deleteCalendar(id: string, domain_id?: string, options?: any) {\n    return CalendarServiceApiFp(this.configuration).deleteCalendar(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Calendar item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public readCalendar(id: string, domain_id?: string, options?: any) {\n    return CalendarServiceApiFp(this.configuration).readCalendar(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of calendar\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public searchCalendar(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).searchCalendar(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List timezones\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public searchTimezones(\n    page?: number,\n    size?: number,\n    q?: string,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).searchTimezones(\n      page,\n      size,\n      q,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update calendar\n   * @param {string} id\n   * @param {EngineUpdateCalendarRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public updateCalendar(\n    id: string,\n    body: EngineUpdateCalendarRequest,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).updateCalendar(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - axios parameter creator\n * @export\n */\nexport const CommunicationTypeServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCommunicationTypeRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/communication_type`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateCommunicationType.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateCommunicationTypeRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - functional programming interface\n * @export\n */\nexport const CommunicationTypeServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).createCommunicationType(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).deleteCommunicationType(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).readCommunicationType(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).searchCommunicationType(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).updateCommunicationType(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - factory interface\n * @export\n */\nexport const CommunicationTypeServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).createCommunicationType(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(id: string, domain_id?: string, options?: any) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).deleteCommunicationType(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(id: string, domain_id?: string, options?: any) {\n      return CommunicationTypeServiceApiFp(configuration).readCommunicationType(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).searchCommunicationType(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).updateCommunicationType(id, body, options)(axios, basePath)\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - object-oriented interface\n * @export\n * @class CommunicationTypeServiceApi\n * @extends {BaseAPI}\n */\nexport class CommunicationTypeServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create CommunicationType\n   * @param {EngineCommunicationTypeRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public createCommunicationType(\n    body: EngineCommunicationTypeRequest,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).createCommunicationType(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove CommunicationType\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public deleteCommunicationType(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).deleteCommunicationType(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary CommunicationType item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public readCommunicationType(id: string, domain_id?: string, options?: any) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).readCommunicationType(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of CommunicationType\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public searchCommunicationType(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).searchCommunicationType(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update CommunicationType\n   * @param {string} id\n   * @param {EngineUpdateCommunicationTypeRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public updateCommunicationType(\n    id: string,\n    body: EngineUpdateCommunicationTypeRequest,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).updateCommunicationType(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * ListServiceApi - axios parameter creator\n * @export\n */\nexport const ListServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(body: EngineCreateListRequest, options: any = {}): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createList.'\n        )\n      }\n      const localVarPath = `/call_center/list`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateListRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling createListCommunication.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication`.replace(\n        `{${'list_id'}}`,\n        encodeURIComponent(String(list_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateListCommunicationRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling deleteListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling readListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/list`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling searchListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication`.replace(\n        `{${'list_id'}}`,\n        encodeURIComponent(String(list_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(\n      id: string,\n      body: EngineUpdateListRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateList.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateListRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling updateListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateListCommunication.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateListCommunicationRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * ListServiceApi - functional programming interface\n * @export\n */\nexport const ListServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(\n      body: EngineCreateListRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).createList(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).createListCommunication(list_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).deleteList(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).deleteListCommunication(list_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).readList(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).readListCommunication(list_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOfList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).searchList(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOfListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).searchListCommunication(list_id, page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(\n      id: string,\n      body: EngineUpdateListRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).updateList(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).updateListCommunication(list_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * ListServiceApi - factory interface\n * @export\n */\nexport const ListServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(body: EngineCreateListRequest, options?: any) {\n      return ListServiceApiFp(configuration).createList(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).createListCommunication(\n        list_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(id: string, domain_id?: string, options?: any) {\n      return ListServiceApiFp(configuration).deleteList(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).deleteListCommunication(\n        list_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(id: string, domain_id?: string, options?: any) {\n      return ListServiceApiFp(configuration).readList(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).readListCommunication(\n        list_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).searchList(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).searchListCommunication(\n        list_id,\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(id: string, body: EngineUpdateListRequest, options?: any) {\n      return ListServiceApiFp(configuration).updateList(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).updateListCommunication(\n        list_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * ListServiceApi - object-oriented interface\n * @export\n * @class ListServiceApi\n * @extends {BaseAPI}\n */\nexport class ListServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create List\n   * @param {EngineCreateListRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public createList(body: EngineCreateListRequest, options?: any) {\n    return ListServiceApiFp(this.configuration).createList(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Create ListCommunication\n   * @param {string} list_id\n   * @param {EngineCreateListCommunicationRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public createListCommunication(\n    list_id: string,\n    body: EngineCreateListCommunicationRequest,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).createListCommunication(\n      list_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove list\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public deleteList(id: string, domain_id?: string, options?: any) {\n    return ListServiceApiFp(this.configuration).deleteList(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ListCommunication\n   * @param {string} list_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public deleteListCommunication(\n    list_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).deleteListCommunication(\n      list_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public readList(id: string, domain_id?: string, options?: any) {\n    return ListServiceApiFp(this.configuration).readList(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List item\n   * @param {string} list_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public readListCommunication(\n    list_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).readListCommunication(\n      list_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of List\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public searchList(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).searchList(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of List\n   * @param {string} list_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public searchListCommunication(\n    list_id: string,\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).searchListCommunication(\n      list_id,\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update list\n   * @param {string} id\n   * @param {EngineUpdateListRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public updateList(id: string, body: EngineUpdateListRequest, options?: any) {\n    return ListServiceApiFp(this.configuration).updateList(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update ListCommunication\n   * @param {string} list_id\n   * @param {string} id\n   * @param {EngineUpdateListCommunicationRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public updateListCommunication(\n    list_id: string,\n    id: string,\n    body: EngineUpdateListCommunicationRequest,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).updateListCommunication(\n      list_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * MediaFileServiceApi - axios parameter creator\n * @export\n */\nexport const MediaFileServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteMediaFile.'\n        )\n      }\n      const localVarPath = `/storage/media/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readMediaFile.'\n        )\n      }\n      const localVarPath = `/storage/media/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/storage/media`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - functional programming interface\n * @export\n */\nexport const MediaFileServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageMediaFile> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMediaFile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageMediaFile> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).readMediaFile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageListMedia> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).searchMediaFile(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - factory interface\n * @export\n */\nexport const MediaFileServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(id: string, domain_id?: string, options?: any) {\n      return MediaFileServiceApiFp(configuration).deleteMediaFile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(id: string, domain_id?: string, options?: any) {\n      return MediaFileServiceApiFp(configuration).readMediaFile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MediaFileServiceApiFp(configuration).searchMediaFile(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - object-oriented interface\n * @export\n * @class MediaFileServiceApi\n * @extends {BaseAPI}\n */\nexport class MediaFileServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Remove MediaFile\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public deleteMediaFile(id: string, domain_id?: string, options?: any) {\n    return MediaFileServiceApiFp(this.configuration).deleteMediaFile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary MediaFile item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public readMediaFile(id: string, domain_id?: string, options?: any) {\n    return MediaFileServiceApiFp(this.configuration).readMediaFile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Search MediaFile\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public searchMediaFile(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MediaFileServiceApiFp(this.configuration).searchMediaFile(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * MemberServiceApi - axios parameter creator\n * @export\n */\nexport const MemberServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createMember.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateMemberRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createMemberBulk.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createMemberBulk.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/bulk`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateMemberBulkRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteMembers.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling deleteMembers.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineDeleteMembersRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchMemberAttempts.'\n        )\n      }\n      // verify required parameter 'member_id' is not null or undefined\n      if (member_id === null || member_id === undefined) {\n        throw new RequiredError(\n          'member_id',\n          'Required parameter member_id was null or undefined when calling searchMemberAttempts.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateMember.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateMemberRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * MemberServiceApi - functional programming interface\n * @export\n */\nexport const MemberServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).createMember(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMemberBulkResponse> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).createMemberBulk(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMember(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMembers(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).readMember(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).searchMember(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMemberAttempt> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).searchMemberAttempts(queue_id, member_id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).updateMember(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * MemberServiceApi - factory interface\n * @export\n */\nexport const MemberServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).createMember(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).createMemberBulk(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).deleteMember(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).deleteMembers(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).readMember(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).searchMember(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).searchMemberAttempts(\n        queue_id,\n        member_id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).updateMember(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * MemberServiceApi - object-oriented interface\n * @export\n * @class MemberServiceApi\n * @extends {BaseAPI}\n */\nexport class MemberServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Member\n   * @param {string} queue_id\n   * @param {EngineCreateMemberRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public createMember(\n    queue_id: string,\n    body: EngineCreateMemberRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).createMember(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create Member\n   * @param {string} queue_id\n   * @param {EngineCreateMemberBulkRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public createMemberBulk(\n    queue_id: string,\n    body: EngineCreateMemberBulkRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).createMemberBulk(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteMember\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public deleteMember(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).deleteMember(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteMembers\n   * @param {string} queue_id\n   * @param {EngineDeleteMembersRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public deleteMembers(\n    queue_id: string,\n    body: EngineDeleteMembersRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).deleteMembers(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public readMember(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).readMember(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Member\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public searchMember(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).searchMember(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchMemberAttempts\n   * @param {string} queue_id\n   * @param {string} member_id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public searchMemberAttempts(\n    queue_id: string,\n    member_id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).searchMemberAttempts(\n      queue_id,\n      member_id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateMember\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateMemberRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public updateMember(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateMemberRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).updateMember(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - axios parameter creator\n * @export\n */\nexport const OutboundResourceGroupServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling createOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(\n        `{${'group_id'}}`,\n        encodeURIComponent(String(group_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceInGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling deleteOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling readOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/resource_group`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling searchOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(\n        `{${'group_id'}}`,\n        encodeURIComponent(String(group_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceInGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - functional programming interface\n * @export\n */\nexport const OutboundResourceGroupServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceGroup(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceInGroup(group_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceGroup(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceGroup(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceInGroup(group_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceGroup(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceGroup(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceInGroup(group_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - factory interface\n * @export\n */\nexport const OutboundResourceGroupServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).createOutboundResourceGroup(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).createOutboundResourceInGroup(group_id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).deleteOutboundResourceGroup(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).readOutboundResourceGroup(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).readOutboundResourceInGroup(group_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).searchOutboundResourceGroup(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).updateOutboundResourceGroup(id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).updateOutboundResourceInGroup(group_id, id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - object-oriented interface\n * @export\n * @class OutboundResourceGroupServiceApi\n * @extends {BaseAPI}\n */\nexport class OutboundResourceGroupServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create OutboundResourceGroup\n   * @param {EngineCreateOutboundResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public createOutboundResourceGroup(\n    body: EngineCreateOutboundResourceGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).createOutboundResourceGroup(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create OutboundResourceGroup\n   * @param {string} group_id\n   * @param {EngineCreateOutboundResourceInGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public createOutboundResourceInGroup(\n    group_id: string,\n    body: EngineCreateOutboundResourceInGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).createOutboundResourceInGroup(group_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResourceGroup\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public deleteOutboundResourceGroup(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceGroup(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public deleteOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary OutboundResourceGroup item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public readOutboundResourceGroup(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).readOutboundResourceGroup(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary OutboundResourceInGroup item\n   * @param {string} group_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public readOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).readOutboundResourceInGroup(group_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResourceGroup\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public searchOutboundResourceGroup(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceGroup(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public searchOutboundResourceInGroup(\n    group_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update OutboundResourceGroup\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public updateOutboundResourceGroup(\n    id: string,\n    body: EngineUpdateOutboundResourceGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceGroup(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceInGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public updateOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    body: EngineUpdateOutboundResourceInGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceInGroup(group_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * OutboundResourceServiceApi - axios parameter creator\n * @export\n */\nexport const OutboundResourceServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling createOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(\n        `{${'resource_id'}}`,\n        encodeURIComponent(String(resource_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceDisplayRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling deleteOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchOutboundResource.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling readOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/resources`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling searchOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(\n        `{${'resource_id'}}`,\n        encodeURIComponent(String(resource_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResource.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceDisplayRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - functional programming interface\n * @export\n */\nexport const OutboundResourceServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResource(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceDisplay(resource_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResource(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).patchOutboundResource(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResource(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResource(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceDisplay(\n        resource_id,\n        page,\n        size,\n        domain_id,\n        options\n      )\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResource(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceDisplay(resource_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - factory interface\n * @export\n */\nexport const OutboundResourceServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).createOutboundResource(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).createOutboundResourceDisplay(resource_id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).patchOutboundResource(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceServiceApiFp(configuration).readOutboundResource(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).searchOutboundResourceDisplay(\n        resource_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).updateOutboundResourceDisplay(resource_id, id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - object-oriented interface\n * @export\n * @class OutboundResourceServiceApi\n * @extends {BaseAPI}\n */\nexport class OutboundResourceServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create OutboundResource\n   * @param {EngineCreateOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public createOutboundResource(\n    body: EngineCreateOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).createOutboundResource(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create CreateOutboundResourceDisplay\n   * @param {string} resource_id\n   * @param {EngineCreateOutboundResourceDisplayRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public createOutboundResourceDisplay(\n    resource_id: string,\n    body: EngineCreateOutboundResourceDisplayRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).createOutboundResourceDisplay(resource_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResource\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public deleteOutboundResource(id: string, domain_id?: string, options?: any) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceDisplay\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public deleteOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Patch OutboundResource\n   * @param {string} id\n   * @param {EnginePatchOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public patchOutboundResource(\n    id: string,\n    body: EnginePatchOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).patchOutboundResource(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary OutboundResource item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public readOutboundResource(id: string, domain_id?: string, options?: any) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).readOutboundResource(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceDisplay item\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public readOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResource\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public searchOutboundResource(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).searchOutboundResource(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of ResourceDisplay\n   * @param {string} resource_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public searchOutboundResourceDisplay(\n    resource_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceDisplay(\n      resource_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update OutboundResource\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public updateOutboundResource(\n    id: string,\n    body: EngineUpdateOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).updateOutboundResource(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceDisplay\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceDisplayRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public updateOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    body: EngineUpdateOutboundResourceDisplayRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceDisplay(resource_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * QueueBucketServiceApi - axios parameter creator\n * @export\n */\nexport const QueueBucketServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - functional programming interface\n * @export\n */\nexport const QueueBucketServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueBucket(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueBucket(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueBucket(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueBucket(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueBucket(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - factory interface\n * @export\n */\nexport const QueueBucketServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).createQueueBucket(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).deleteQueueBucket(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).readQueueBucket(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).searchQueueBucket(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).updateQueueBucket(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - object-oriented interface\n * @export\n * @class QueueBucketServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueBucketServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create QueueBucket\n   * @param {string} queue_id\n   * @param {EngineCreateQueueBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public createQueueBucket(\n    queue_id: string,\n    body: EngineCreateQueueBucketRequest,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).createQueueBucket(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public deleteQueueBucket(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public readQueueBucket(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).readQueueBucket(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchQueueRouting\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public searchQueueBucket(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateQueueBucket\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public updateQueueBucket(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueBucketRequest,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * QueueResourcesServiceApi - axios parameter creator\n * @export\n */\nexport const QueueResourcesServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - functional programming interface\n * @export\n */\nexport const QueueResourcesServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueResourceGroup(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueResourceGroup(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueResourceGroup(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueResourceGroup(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueResourceGroup(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - factory interface\n * @export\n */\nexport const QueueResourcesServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - object-oriented interface\n * @export\n * @class QueueResourcesServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueResourcesServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary CreateQueueResourceGroup\n   * @param {string} queue_id\n   * @param {EngineCreateQueueResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public createQueueResourceGroup(\n    queue_id: string,\n    body: EngineCreateQueueResourceGroupRequest,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).createQueueResourceGroup(queue_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary DeleteQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public deleteQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).deleteQueueResourceGroup(queue_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary ReadQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public readQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).readQueueResourceGroup(queue_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary SearchQueueResourceGroup\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public searchQueueResourceGroup(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary UpdateQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public updateQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueResourceGroupRequest,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).updateQueueResourceGroup(queue_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * QueueRoutingServiceApi - axios parameter creator\n * @export\n */\nexport const QueueRoutingServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueRouting.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueRoutingRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueRoutingRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - functional programming interface\n * @export\n */\nexport const QueueRoutingServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueRouting(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueRouting(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueRouting(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueRouting(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueRouting(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - factory interface\n * @export\n */\nexport const QueueRoutingServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).createQueueRouting(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).readQueueRouting(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).searchQueueRouting(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).updateQueueRouting(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - object-oriented interface\n * @export\n * @class QueueRoutingServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueRoutingServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary CreateQueueRouting\n   * @param {string} queue_id\n   * @param {EngineCreateQueueRoutingRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public createQueueRouting(\n    queue_id: string,\n    body: EngineCreateQueueRoutingRequest,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public deleteQueueRouting(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public readQueueRouting(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchQueueRouting\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public searchQueueRouting(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueRoutingRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public updateQueueRouting(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueRoutingRequest,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * QueueServiceApi - axios parameter creator\n * @export\n */\nexport const QueueServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(\n      body: EngineCreateQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(\n      id: string,\n      body: EnginePatchQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchQueue.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/queues`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(\n      id: string,\n      body: EngineUpdateQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueue.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueServiceApi - functional programming interface\n * @export\n */\nexport const QueueServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(\n      body: EngineCreateQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).createQueue(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueue(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(\n      id: string,\n      body: EnginePatchQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).patchQueue(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).readQueue(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueue(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(\n      id: string,\n      body: EngineUpdateQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueue(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueServiceApi - factory interface\n * @export\n */\nexport const QueueServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(body: EngineCreateQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).createQueue(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(id: string, domain_id?: string, options?: any) {\n      return QueueServiceApiFp(configuration).deleteQueue(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).patchQueue(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(id: string, domain_id?: string, options?: any) {\n      return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueServiceApiFp(configuration).searchQueue(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(id: string, body: EngineUpdateQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).updateQueue(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * QueueServiceApi - object-oriented interface\n * @export\n * @class QueueServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Queue\n   * @param {EngineCreateQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public createQueue(body: EngineCreateQueueRequest, options?: any) {\n    return QueueServiceApiFp(this.configuration).createQueue(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Queue\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public deleteQueue(id: string, domain_id?: string, options?: any) {\n    return QueueServiceApiFp(this.configuration).deleteQueue(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch Queue\n   * @param {string} id\n   * @param {EnginePatchQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {\n    return QueueServiceApiFp(this.configuration).patchQueue(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Queue item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public readQueue(id: string, domain_id?: string, options?: any) {\n    return QueueServiceApiFp(this.configuration).readQueue(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Queue\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public searchQueue(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueServiceApiFp(this.configuration).searchQueue(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Queue\n   * @param {string} id\n   * @param {EngineUpdateQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public updateQueue(\n    id: string,\n    body: EngineUpdateQueueRequest,\n    options?: any\n  ) {\n    return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * ResourceTeamServiceApi - axios parameter creator\n * @export\n */\nexport const ResourceTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateResourceTeamAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateResourceTeamSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateResourceTeamAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateResourceTeamSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - functional programming interface\n * @export\n */\nexport const ResourceTeamServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createResourceTeamAgent(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createResourceTeamSkill(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteResourceTeamAgent(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteResourceTeamSkill(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readResourceTeamAgent(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readResourceTeamSkill(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchResourceTeamAgent(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchResourceTeamSkill(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateResourceTeamAgent(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateResourceTeamSkill(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - factory interface\n * @export\n */\nexport const ResourceTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).createResourceTeamAgent(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).createResourceTeamSkill(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamAgent(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamSkill(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).readResourceTeamAgent(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).readResourceTeamSkill(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).searchResourceTeamAgent(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).searchResourceTeamSkill(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).updateResourceTeamAgent(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).updateResourceTeamSkill(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - object-oriented interface\n * @export\n * @class ResourceTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class ResourceTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create ResourceTeamAgent\n   * @param {string} team_id\n   * @param {EngineCreateResourceTeamAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public createResourceTeamAgent(\n    team_id: string,\n    body: EngineCreateResourceTeamAgentRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamAgent(\n      team_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SKill Create ResourceTeamSkill\n   * @param {string} team_id\n   * @param {EngineCreateResourceTeamSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public createResourceTeamSkill(\n    team_id: string,\n    body: EngineCreateResourceTeamSkillRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamSkill(\n      team_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceTeamAgent\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public deleteResourceTeamAgent(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamAgent(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceTeamSkill\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public deleteResourceTeamSkill(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamSkill(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceTeamAgent item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public readResourceTeamAgent(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamAgent(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceTeamSkill item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public readResourceTeamSkill(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamSkill(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of ResourceTeamAgent\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public searchResourceTeamAgent(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamAgent(\n      team_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of ResourceTeamSkill\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public searchResourceTeamSkill(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamSkill(\n      team_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceTeamAgent\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateResourceTeamAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public updateResourceTeamAgent(\n    team_id: string,\n    id: string,\n    body: EngineUpdateResourceTeamAgentRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamAgent(\n      team_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceTeamSkill\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateResourceTeamSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public updateResourceTeamSkill(\n    team_id: string,\n    id: string,\n    body: EngineUpdateResourceTeamSkillRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamSkill(\n      team_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingOutboundCallServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'from_id' is not null or undefined\n      if (from_id === null || from_id === undefined) {\n        throw new RequiredError(\n          'from_id',\n          'Required parameter from_id was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'to_id' is not null or undefined\n      if (to_id === null || to_id === undefined) {\n        throw new RequiredError(\n          'to_id',\n          'Required parameter to_id was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{from_id}/to/{to_id}`\n        .replace(`{${'from_id'}}`, encodeURIComponent(String(from_id)))\n        .replace(`{${'to_id'}}`, encodeURIComponent(String(to_id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineMovePositionRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/outbound/calls`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - functional programming interface\n * @export\n */\nexport const RoutingOutboundCallServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingOutboundCall(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingOutboundCall(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMovePositionRoutingOutboundCallResponse> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).patchRoutingOutboundCall(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingOutboundCall(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingOutboundCall(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingOutboundCall(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - factory interface\n * @export\n */\nexport const RoutingOutboundCallServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).createRoutingOutboundCall(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(id: string, domain_id?: string, options?: any) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).patchRoutingOutboundCall(id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(id: string, domain_id?: string, options?: any) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).readRoutingOutboundCall(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).searchRoutingOutboundCall(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).updateRoutingOutboundCall(id, body, options)(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - object-oriented interface\n * @export\n * @class RoutingOutboundCallServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingOutboundCallServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingOutboundCall\n   * @param {EngineCreateRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public createRoutingOutboundCall(\n    body: EngineCreateRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).createRoutingOutboundCall(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingOutboundCall\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public deleteRoutingOutboundCall(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).deleteRoutingOutboundCall(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Move RoutingOutboundCall\n   * @param {string} from_id\n   * @param {string} to_id\n   * @param {EngineMovePositionRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public movePositionRoutingOutboundCall(\n    from_id: string,\n    to_id: string,\n    body: EngineMovePositionRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Patch RoutingOutboundCall\n   * @param {string} id\n   * @param {EnginePatchRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public patchRoutingOutboundCall(\n    id: string,\n    body: EnginePatchRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).patchRoutingOutboundCall(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingOutboundCall item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public readRoutingOutboundCall(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of RoutingOutboundCall\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public searchRoutingOutboundCall(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).searchRoutingOutboundCall(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update RoutingOutboundCall\n   * @param {string} id\n   * @param {EngineUpdateRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public updateRoutingOutboundCall(\n    id: string,\n    body: EngineUpdateRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingSchemaServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(\n      body: EngineCreateRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchRoutingSchema.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/schema`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingSchema.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - functional programming interface\n * @export\n */\nexport const RoutingSchemaServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(\n      body: EngineCreateRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingSchema(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingSchema(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).patchRoutingSchema(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingSchema(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingSchema(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingSchema(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - factory interface\n * @export\n */\nexport const RoutingSchemaServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(body: EngineCreateRoutingSchemaRequest, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(id: string, domain_id?: string, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(id: string, domain_id?: string, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - object-oriented interface\n * @export\n * @class RoutingSchemaServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingSchemaServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingSchema\n   * @param {EngineCreateRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public createRoutingSchema(\n    body: EngineCreateRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingSchema\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public deleteRoutingSchema(id: string, domain_id?: string, options?: any) {\n    return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch RoutingSchema\n   * @param {string} id\n   * @param {EnginePatchRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public patchRoutingSchema(\n    id: string,\n    body: EnginePatchRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingSchema item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public readRoutingSchema(id: string, domain_id?: string, options?: any) {\n    return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List RoutingSchema\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public searchRoutingSchema(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update RoutingSchema\n   * @param {string} id\n   * @param {EngineUpdateRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public updateRoutingSchema(\n    id: string,\n    body: EngineUpdateRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingVariableServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingVariableServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingVariableRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/variables`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingVariable.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingVariableRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - functional programming interface\n * @export\n */\nexport const RoutingVariableServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingVariable(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingVariable(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingVariable(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingVariable(page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingVariable(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - factory interface\n * @export\n */\nexport const RoutingVariableServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(id: string, domain_id?: string, options?: any) {\n      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(id: string, domain_id?: string, options?: any) {\n      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - object-oriented interface\n * @export\n * @class RoutingVariableServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingVariableServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingVariable\n   * @param {EngineCreateRoutingVariableRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public createRoutingVariable(\n    body: EngineCreateRoutingVariableRequest,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).createRoutingVariable(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingVariable\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public deleteRoutingVariable(id: string, domain_id?: string, options?: any) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingVariable item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public readRoutingVariable(id: string, domain_id?: string, options?: any) {\n    return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of RoutingVariable\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public searchRoutingVariable(\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).searchRoutingVariable(page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update RoutingVariable\n   * @param {string} id\n   * @param {EngineUpdateRoutingVariableRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public updateRoutingVariable(\n    id: string,\n    body: EngineUpdateRoutingVariableRequest,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).updateRoutingVariable(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * SkillServiceApi - axios parameter creator\n * @export\n */\nexport const SkillServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(\n      body: EngineCreateSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/skills`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(\n      id: string,\n      body: EngineUpdateSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * SkillServiceApi - functional programming interface\n * @export\n */\nexport const SkillServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(\n      body: EngineCreateSkillRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).createSkill(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).deleteSkill(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).readSkill(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).searchSkill(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(\n      id: string,\n      body: EngineUpdateSkillRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).updateSkill(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * SkillServiceApi - factory interface\n * @export\n */\nexport const SkillServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(body: EngineCreateSkillRequest, options?: any) {\n      return SkillServiceApiFp(configuration).createSkill(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(id: string, domain_id?: string, options?: any) {\n      return SkillServiceApiFp(configuration).deleteSkill(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(id: string, domain_id?: string, options?: any) {\n      return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SkillServiceApiFp(configuration).searchSkill(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(id: string, body: EngineUpdateSkillRequest, options?: any) {\n      return SkillServiceApiFp(configuration).updateSkill(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * SkillServiceApi - object-oriented interface\n * @export\n * @class SkillServiceApi\n * @extends {BaseAPI}\n */\nexport class SkillServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Skill\n   * @param {EngineCreateSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public createSkill(body: EngineCreateSkillRequest, options?: any) {\n    return SkillServiceApiFp(this.configuration).createSkill(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Skill\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public deleteSkill(id: string, domain_id?: string, options?: any) {\n    return SkillServiceApiFp(this.configuration).deleteSkill(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Skill item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public readSkill(id: string, domain_id?: string, options?: any) {\n    return SkillServiceApiFp(this.configuration).readSkill(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Skill\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public searchSkill(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SkillServiceApiFp(this.configuration).searchSkill(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Skill\n   * @param {string} id\n   * @param {EngineUpdateSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public updateSkill(\n    id: string,\n    body: EngineUpdateSkillRequest,\n    options?: any\n  ) {\n    return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - axios parameter creator\n * @export\n */\nexport const SupervisorInTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateSupervisorInTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateSupervisorInTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - functional programming interface\n * @export\n */\nexport const SupervisorInTeamServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createSupervisorInTeam(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteSupervisorInTeam(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readSupervisorInTeam(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchSupervisorInTeam(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateSupervisorInTeam(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - factory interface\n * @export\n */\nexport const SupervisorInTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - object-oriented interface\n * @export\n * @class SupervisorInTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class SupervisorInTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create SupervisorInTeam\n   * @param {string} team_id\n   * @param {EngineCreateSupervisorInTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public createSupervisorInTeam(\n    team_id: string,\n    body: EngineCreateSupervisorInTeamRequest,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove SupervisorInTeam\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public deleteSupervisorInTeam(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).deleteSupervisorInTeam(team_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary SupervisorInTeam item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public readSupervisorInTeam(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).readSupervisorInTeam(team_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of SupervisorInTeam\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public searchSupervisorInTeam(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).searchSupervisorInTeam(team_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update SupervisorInTeam\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateSupervisorInTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public updateSupervisorInTeam(\n    team_id: string,\n    id: string,\n    body: EngineUpdateSupervisorInTeamRequest,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).updateSupervisorInTeam(team_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n","// tslint:disable\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | ((name: string) => string)\n  username?: string\n  password?: string\n  accessToken?: string | ((name?: string, scopes?: string[]) => string)\n  basePath?: string\n  baseOptions?: any\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | ((name: string) => string)\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?: string | ((name?: string, scopes?: string[]) => string)\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey\n    this.username = param.username\n    this.password = param.password\n    this.accessToken = param.accessToken\n    this.basePath = param.basePath\n    this.baseOptions = param.baseOptions\n  }\n}\n","import { Client, UserCallRequest } from './client'\n\nexport enum CallActions {\n  Ringing = 'ringing',\n  Active = 'active',\n  Bridge = 'bridge',\n  Hold = 'hold',\n  DTMF = 'dtmf',\n  Voice = 'voice',\n  Silence = 'silence',\n  Execute = 'execute',\n  Update = 'update',\n  Hangup = 'hangup',\n  PeerStream = 'peerStream',\n}\n\nexport enum CallDirection {\n  Inbound = 'inbound',\n  Outbound = 'outbound',\n  Internal = 'internal',\n}\n\nexport interface AnswerRequest {\n  useVideo?: boolean\n  useAudio?: boolean\n  useScreen?: boolean\n}\n\nexport interface CallEventData {\n  id: string\n  node_name: string\n  action: string\n}\n\nexport interface CallEventExecute extends CallEventData {\n  application: string\n}\n\nexport interface CallEventDTMF extends CallEventData {\n  digit: string\n}\n\nexport interface CallInfo extends CallEventData {\n  parent_id: string\n  owner_id: string\n  direction: string\n  destination: string\n\n  from_number: string\n  from_name: string\n\n  to_number: string\n  to_name: string\n\n  payload: Map<string, string>\n  gateway_id: string\n  video_request: string\n  video_flow: string\n  screen_request: string\n}\n\nexport interface CallHangup extends CallEventData {\n  cause: string\n}\n\nexport class Call {\n  id: string\n  nodeName: string\n  state!: string\n\n  direction!: string\n  destination!: string\n\n  fromNumber!: string\n  fromName!: string\n\n  toNumber!: string\n  toName!: string\n  payload!: Map<string, string>\n\n  videoRequest!: boolean\n  screenRequest!: boolean\n  videoFlow!: string | null\n  peerStreams!: MediaStream[] | null\n  screen!: string | null\n\n  createdAt: number\n  answeredAt: number\n  hangupAt: number\n\n  hangupCause!: string\n\n  parentCallId!: string\n  ownerCallId!: string\n\n  _muted!: boolean\n  _gatewayId!: string | null\n\n  digits!: string[]\n  applications!: string[]\n  voice: boolean\n\n  constructor(\n    protected client: Client,\n    e: CallInfo,\n    peerStreams: MediaStream[] | null\n  ) {\n    this.voice = true\n    this.createdAt = Date.now()\n\n    this.answeredAt = 0\n    this.hangupAt = 0\n    this.peerStreams = peerStreams\n\n    this.id = e.id\n    this.digits = []\n    this.applications = []\n    this.nodeName = e.node_name\n    this.setState(e)\n    this.setInfo(e)\n  }\n\n  setActive(e: CallEventData) {\n    if (!this.answeredAt) {\n      this.answeredAt = Date.now()\n    }\n    this.setState(e)\n  }\n\n  get display() {\n    return `${this.displayNumber} (${this.displayName})`\n  }\n\n  get muted() {\n    return this._muted\n  }\n\n  get allowInboundVideo(): boolean {\n    if (this.videoFlow) {\n      return this.videoFlow.indexOf('send') > -1\n    }\n\n    return false\n  }\n\n  get allowOutboundVideo(): boolean {\n    if (this.videoFlow) {\n      return this.videoFlow.indexOf('recv') > -1\n    }\n\n    return false\n  }\n\n  setInfo(s: CallInfo) {\n    this.ownerCallId = s.owner_id\n    this.parentCallId = s.parent_id\n    this.destination = s.destination\n    this.direction = s.direction\n    this.fromNumber = s.from_number\n    this.fromName = s.from_name\n    this.toName = s.to_name\n    this.toNumber = s.to_number\n    this.payload = s.payload\n\n    if (s.gateway_id) {\n      this._gatewayId = s.gateway_id\n    } else {\n      this._gatewayId = null // ?\n    }\n\n    if (s.video_flow) {\n      this.videoFlow = s.video_flow\n    } else {\n      this.videoFlow = null\n    }\n\n    this.screenRequest = s.screen_request === 'true'\n    this.videoRequest = s.video_request === 'true' //\n\n    this.setState(s)\n  }\n\n  get gatewayId() {\n    return this._gatewayId\n  }\n\n  setState(s: CallEventData) {\n    this.state = s.action\n  }\n\n  get active(): boolean {\n    return this.hangupAt === 0\n  }\n\n  setPeerStreams(streams: MediaStream[] | null) {\n    this.peerStreams = streams\n  }\n\n  setHangup(s: CallHangup) {\n    this.hangupAt = Date.now()\n    this.hangupCause = s.cause\n    this.voice = false\n    this.peerStreams = null\n    this.setState(s)\n  }\n\n  setVoice(s: CallEventData) {\n    this.voice = true\n  }\n\n  setSilence(s: CallEventData) {\n    this.voice = false\n  }\n\n  setExecute(s: CallEventExecute) {\n    this.applications.push(s.application)\n  }\n\n  addDigit(s: CallEventDTMF) {\n    this.digits.push(s.digit)\n  }\n\n  get displayNumber() {\n    if (this.direction === 'inbound') {\n      return this.fromNumber\n    } else {\n      return this.toNumber\n    }\n  }\n\n  get displayName() {\n    if (this.direction === 'inbound') {\n      return this.fromName\n    } else {\n      return this.toName\n    }\n  }\n\n  /* Call control */\n  answer(req: AnswerRequest): boolean {\n    let sessionId = null\n    if (this.client.phone.hasSession(this.id)) {\n      sessionId = this.id\n    } else if (this.client.phone.hasSession(this.parentCallId)) {\n      sessionId = this.parentCallId\n    }\n\n    if (sessionId) {\n      return this.client.phone.answer(sessionId, req)\n    }\n\n    return false\n  }\n\n  async hangup(cause?: string) {\n    let _cause = cause\n    if (this.answeredAt === 0 && !cause) {\n      _cause =\n        this.direction === CallDirection.Inbound\n          ? 'USER_BUSY'\n          : 'ORIGINATOR_CANCEL'\n    }\n\n    return this.client.request('call_hangup', {\n      id: this.id,\n      node_id: this.nodeName,\n      cause: _cause,\n    })\n  }\n\n  async toggleHold() {\n    if (this.state === CallActions.Hold) {\n      return this.unHold()\n    } else {\n      return this.hold()\n    }\n  }\n\n  async hold() {\n    if (this.state === CallActions.Hold) {\n      throw new Error('Call is hold')\n    }\n\n    return this.client.request('call_hold', {\n      id: this.id,\n      node_id: this.nodeName,\n    })\n  }\n\n  async unHold() {\n    if (this.state !== CallActions.Hold) {\n      throw new Error('Call is active')\n    }\n\n    return this.client.request('call_unhold', {\n      id: this.id,\n      node_id: this.nodeName,\n    })\n  }\n\n  async sendDTMF(dtmf: string) {\n    return this.client.request('call_dtmf', {\n      id: this.id,\n      node_id: this.nodeName,\n      dtmf,\n    })\n  }\n\n  async blindTransfer(destination: string) {\n    if (!this.parentCallId) {\n      throw new Error('Not allow one leg')\n    }\n\n    return this.client.request('call_blind_transfer', {\n      id: this.parentCallId,\n      node_id: this.nodeName,\n      destination,\n    })\n  }\n\n  async mute(mute = false) {\n    const res = await this.client.request('call_mute', {\n      id: this.id,\n      node_id: this.nodeName,\n      mute,\n    })\n    this._muted = mute\n\n    return res\n  }\n\n  async bridgeTo(call: Call) {\n    return this.client.request('call_bridge', {\n      id: this.id,\n      node_id: this.nodeName,\n      parent_id: call.id,\n      parent_node_id: call.nodeName,\n    })\n  }\n\n  async callToUser(req: UserCallRequest) {\n    req.nodeId = this.nodeName\n    req.parentCallId = this.id || null\n    req.sendToCallId = this.parentCallId || null\n\n    return this.client.inviteToUser(req)\n  }\n}\n","export interface Log {\n  debug(primaryMessage: string, ...supportingData: any[]): void\n  warn(primaryMessage: string, ...supportingData: any[]): void\n  error(primaryMessage: string, ...supportingData: any[]): void\n  info(primaryMessage: string, ...supportingData: any[]): void\n}\n\nexport class Log implements Log {\n  debug(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('debug', msg, supportingDetails)\n  }\n  info(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('info', msg, supportingDetails)\n  }\n  warn(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('warn', msg, supportingDetails)\n  }\n  error(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('error', msg, supportingDetails)\n  }\n\n  private emitLogMessage(\n    msgType: 'debug' | 'info' | 'warn' | 'error',\n    msg: string,\n    supportingDetails: any[]\n  ) {\n    if (supportingDetails.length > 0) {\n      console[msgType](msg, ...supportingDetails)\n    } else {\n      console[msgType](msg)\n    }\n  }\n}\n","import { EventEmitter } from 'ee-ts'\nimport * as SipClient from 'jssip'\nimport { AnswerRequest } from './call'\nimport { Log } from './log'\n\nexport interface SipConfiguration {\n  server: string\n  extension: string\n  realm: string\n  uri: string\n  authorization_user: string\n  ha1?: string\n}\n\ninterface RTCSession {\n  session: SipSession\n  peerconnection: SipSession\n  request: RTCRequest\n}\n\ninterface RTCRequest {\n  getHeader(name: string): string\n}\n\ninterface SipSession {\n  id: string\n  direction: string\n  stream: object\n  connection: RTCPeerConnection\n  answer(s: object): void\n  on(name: string, arg?: object): void\n}\n\nexport interface CallSession {\n  sip: SipSession\n  incoming: boolean\n  instance_id: string\n}\n\ninterface PeerConnectionEvent {\n  peerconnection: RTCPeerConnection\n}\n\ninterface SipHoneEvent {\n  unregistered(): void\n  error(err: Error): void\n  peerStreams(id: string, e: MediaStream[] | null): void\n  newSession(id: string, session: CallSession): void\n}\n\nexport class SipPhone extends EventEmitter<SipHoneEvent> {\n  static readonly userAgent = 'Webitel-Phone/0.0.1'\n  private ua!: SipClient.UA\n  private sessionCache = new Map<string, CallSession>()\n  private log: Log\n\n  constructor(private instanceId: string) {\n    super()\n    SipClient.debug.enable('*')\n    this.log = new Log()\n\n    this.on('unregistered', () => {\n      this.ua.removeAllListeners()\n      delete this.ua\n      this.sessionCache.clear()\n    })\n  }\n\n  getMediaConstraints(req: AnswerRequest): object {\n    if (req.useScreen) {\n      return {\n        video: false,\n        audio: false,\n        screen: true,\n      }\n    }\n\n    return {\n      video: req.useVideo || false,\n      audio: req.useAudio || true,\n    }\n  }\n\n  callOption(req: AnswerRequest): object {\n    return {\n      sessionTimersExpires: 120,\n      pcConfig: {\n        iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }],\n      },\n      rtcOfferConstraints: {\n        offerToReceiveAudio: req.useAudio || true,\n        offerToReceiveVideo: req.useVideo,\n      },\n      mediaConstraints: this.getMediaConstraints(req),\n    }\n  }\n\n  getSession(id: string): CallSession | null {\n    if (this.sessionCache.has(id)) {\n      return this.sessionCache.get(id) as CallSession\n    }\n\n    return null\n  }\n\n  hasSession(id: string | null): boolean {\n    return this.sessionCache.has(id!)\n  }\n\n  getPeerStream(id: string): MediaStream[] | null {\n    const session = this.getSession(id)\n    if (session && session.sip.connection) {\n      // @ts-ignore\n      const streams = session.sip.connection.getRemoteStreams() as MediaStream[]\n      if (streams && streams.length) {\n        return streams\n      }\n    }\n\n    return null\n  }\n\n  answer(id: string, req: AnswerRequest): boolean {\n    if (this.sessionCache.has(id)) {\n      const session = this.sessionCache.get(id)\n      session!.sip.answer(this.callOption(req))\n\n      return true\n    }\n\n    return false\n  }\n\n  async register(sipConf: SipConfiguration) {\n    const socket = new SipClient.WebSocketInterface(sipConf.server)\n\n    const configuration = {\n      realm: sipConf.realm,\n      uri: sipConf.uri,\n      authorization_user: sipConf.authorization_user,\n      ha1: sipConf.ha1,\n      user_agent: SipPhone.userAgent,\n      sockets: [socket],\n      session_timers: true,\n      // use_preloaded_route: true,\n      register_expires: 300,\n      connection_recovery_min_interval: 5,\n      connection_recovery_max_interval: 60,\n      // instance_id: '8f1fa16a-1165-4a96-8341-785b1ef24f13',\n    }\n\n    const ua = (this.ua = new SipClient.UA(configuration))\n\n    ua.on('connected', (e: object) => {\n      this.log.error('connected', e)\n    })\n\n    ua.on('newRTCSession', (e: RTCSession) => {\n      const session = e.session\n      const id = e.request.getHeader('X-Webitel-Uuid') || session.id\n\n      const callSession = {\n        sip: session,\n        incoming: session.direction === 'incoming',\n        instance_id: e.request.getHeader('X-Webitel-Sock-Id'),\n      }\n\n      this.storeSession(id, callSession)\n\n      session.on('peerconnection', (peer: PeerConnectionEvent) => {\n        peer.peerconnection.addEventListener(\n          'addstream',\n          async (evt: Event) => {\n            // set remote audio stream\n            this.emit(\n              'peerStreams',\n              id,\n              new Array((evt as MediaStreamEvent).stream as MediaStream)\n            )\n          }\n        )\n      })\n\n      session.on('ended', () => {\n        // this handler will be called for incoming calls too\n        this.removeSession(id)\n      })\n\n      session.on('failed', () => {\n        // this handler will be called for incoming calls too\n        this.removeSession(id)\n      })\n\n      session.on('accepted', () => {\n        // the call has answered\n        if (!this.isOutboundCall(id)) {\n          this.emit('peerStreams', id, this.getPeerStream(id))\n        }\n      })\n\n      session.on('confirmed', () => {\n        // this handler will be called for incoming calls too\n      })\n\n      this.emit('newSession', id, callSession)\n    })\n\n    ua.on('disconnected', (e: object) => {\n      this.log.error('disconnected', e)\n      this.emit('unregistered')\n    })\n\n    ua.on('registered', (e: object) => {\n      this.log.error('registered', e)\n    })\n\n    ua.on('unregistered', (e: object) => {\n      this.log.error('unregistered', e)\n      this.emit('unregistered')\n    })\n\n    ua.on('registrationFailed', (e: object) => {\n      this.log.error('registrationFailed', e)\n    })\n\n    ua.on('error', (e: Error) => {\n      this.emit('error', e)\n      this.log.error('error', e)\n    })\n\n    ua.start()\n  }\n\n  isOutboundCall(id: string): boolean {\n    const session = this.getSession(id)\n    if (session) {\n      return session.incoming && session.instance_id === this.instanceId\n    }\n\n    return false\n  }\n\n  async unregister() {\n    if (this.ua) {\n      this.ua.unregister()\n    }\n  }\n\n  get allSession(): CallSession[] {\n    return Array.from(this.sessionCache.values())\n  }\n\n  protected removeSession(id: string): boolean {\n    if (this.sessionCache.has(id)) {\n      this.sessionCache.delete(id)\n\n      return true\n    }\n\n    return false\n  }\n\n  protected storeSession(id: string, session: CallSession) {\n    if (this.sessionCache.has(id)) {\n      throw new Error('Session already store')\n    }\n\n    this.sessionCache.set(id, session)\n  }\n}\n","export function formatWebSocketUri(host: string): string {\n  return host.replace(/^http/, 'ws')\n}\n","import { EventEmitter } from 'ee-ts'\nimport { formatWebSocketUri } from './utils'\n\nconst SOCKET_URL_SUFFIX = 'websocket'\n\nexport interface Message {\n  event?: string\n  status?: string\n  seq?: number\n  seq_reply?: number\n  data: any\n  error?: Map<string, Error>\n}\n\nexport interface Request {\n  seq: number\n  action: string\n  data?: object\n}\n\nexport interface SocketEvents {\n  message(msg: Message): void\n  close(code: number): void\n  open(): void\n}\n\nexport class Socket extends EventEmitter<SocketEvents> {\n  private socket!: WebSocket\n\n  constructor(private host: string) {\n    super()\n  }\n\n  connect(token: string) {\n    this.socket = new WebSocket(\n      `${formatWebSocketUri(\n        this.host\n      )}/${SOCKET_URL_SUFFIX}?access_token=${token}`\n    )\n\n    this.socket.onclose = (e) => this.onClose(e.code)\n\n    this.socket.onmessage = (e) => this.onMessage(e.data)\n    this.socket.onopen = () => this.onOpen()\n  }\n\n  send(request: Request): never | null {\n    this.socket.send(JSON.stringify(request))\n\n    return null\n  }\n\n  close(code?: number) {\n    this.socket.close(code)\n    delete this.socket\n  }\n\n  private onOpen() {\n    this.emit('open')\n  }\n\n  private onClose(code: number) {\n    this.emit('close', code)\n  }\n\n  private onMessage(data: string) {\n    const message = JSON.parse(data) as Message\n    this.emit('message', message)\n  }\n}\n","import { EventEmitter } from 'ee-ts'\nimport {\n  AnswerRequest,\n  Call,\n  CallActions,\n  CallEventData,\n  CallEventDTMF,\n  CallEventExecute,\n  CallHangup,\n  CallInfo,\n} from './call'\nimport { Log } from './log'\nimport { CallSession, SipConfiguration, SipPhone } from './sip'\nimport { Message, Socket } from './socket'\n\nexport interface Config {\n  endpoint: string\n  token?: string\n  logLvl?: 'debug' | 'info' | 'warn' | 'error'\n  registerWebDevice?: boolean\n  phone?: number\n}\n\ninterface PromiseCallback {\n  resolve: (res: object) => void\n  reject: (err: object) => void\n}\n\nexport interface OutboundCallRequest {\n  parentCallId?: string\n  toNumber: string\n  toName?: string\n  useVideo?: boolean\n  useScreen?: boolean\n  useAudio?: boolean\n  variables?: Map<string, string>\n}\n\nexport interface UserCallRequest {\n  nodeId?: string | null\n  parentCallId?: string | null\n  sendToCallId?: string | null\n  toUserId: string\n  useVideo?: boolean\n  useScreen?: boolean\n  useAudio?: boolean\n  variables?: Map<string, string>\n}\n\nconst WEBSOCKET_AUTHENTICATION_CHALLENGE = 'authentication_challenge'\nconst WEBSOCKET_DEFAULT_DEVICE_CONFIG = 'user_default_device'\n\nconst WEBSOCKET_MAKE_OUTBOUND_CALL = 'call_invite'\nconst WEBSOCKET_MAKE_USER_CALL = 'call_user'\nconst WEBSOCKET_EVENT_HELLO = 'hello'\nconst WEBSOCKET_EVENT_CALL = 'call'\nconst WEBSOCKET_EVENT_SIP = 'sip'\n\nexport enum Response {\n  STATUS_FAIL = 'FAIL',\n  STATUS_OK = 'OK',\n}\n\nexport interface Session {\n  id: string\n  expire: number\n  user_id: number\n  role_ids: number[]\n}\n\nexport interface ConnectionInfo {\n  sock_id: string\n  server_build_commit: string\n  server_node_id: string\n  server_version: string\n  server_time: number\n  session: Session\n}\n\nexport type CallEventHandler = (action: CallActions, call: Call) => void\n\ninterface EventHandler {\n  [WEBSOCKET_EVENT_CALL](action: CallActions, call: Call): void\n  [WEBSOCKET_EVENT_SIP](data: object): void\n}\n\nexport class Client {\n  phone!: SipPhone\n  private socket!: Socket\n  private connectionInfo!: ConnectionInfo\n\n  private reqSeq = 0\n  private queueRequest: Map<number, PromiseCallback> = new Map<\n    number,\n    PromiseCallback\n  >()\n  private log: Log\n  private eventHandler: EventEmitter<EventHandler>\n  private callStore: Map<string, Call>\n\n  constructor(protected readonly _config: Config) {\n    this.log = new Log()\n    this.eventHandler = new EventEmitter()\n    this.callStore = new Map<string, Call>()\n  }\n\n  async connect() {\n    await this.connectToSocket()\n  }\n\n  async disconnect() {\n    this.socket.close()\n  }\n\n  async subscribeCall(\n    handler: CallEventHandler,\n    data?: object\n  ): Promise<null | Error> {\n    const res = await this.request(`subscribe_call`, data)\n    this.eventHandler.on(WEBSOCKET_EVENT_CALL, handler)\n\n    return res\n  }\n\n  async unSubscribe(\n    action: string,\n    handler: CallEventHandler,\n    data?: object\n  ): Promise<null | Error> {\n    const res = await this.request(`un_subscribe_${action}`, data)\n\n    // this.eventHandler.listeners(action)\n    // this.eventHandler.removeListener(action, handler)\n    // this.eventHandler.off(action, handler)\n\n    return res\n  }\n\n  allCall(): Call[] {\n    return Array.from(this.callStore.values())\n  }\n\n  callById(id: string): Call | undefined {\n    if (this.callStore.has(id)) {\n      return this.callStore.get(id)\n    }\n\n    return undefined\n  }\n\n  async auth() {\n    return this.request(WEBSOCKET_AUTHENTICATION_CHALLENGE, {\n      token: this._config.token,\n    })\n  }\n\n  sessionInfo(): Session {\n    return this.connectionInfo.session\n  }\n\n  get version(): string {\n    return this.connectionInfo.server_version\n  }\n\n  get instanceId(): string {\n    return this.connectionInfo.sock_id\n  }\n\n  invite(req: OutboundCallRequest) {\n    return this.request(WEBSOCKET_MAKE_OUTBOUND_CALL, req)\n  }\n\n  inviteToUser(req: UserCallRequest) {\n    return this.request(WEBSOCKET_MAKE_USER_CALL, req)\n  }\n\n  answer(id: string, req: AnswerRequest): boolean {\n    return this.phone.answer(id, req)\n  }\n\n  request(action: string, data?: object): Promise<Error> {\n    return new Promise<Error>((resolve: () => void, reject: () => void) => {\n      this.queueRequest.set(++this.reqSeq, { resolve, reject })\n      this.socket.send({\n        seq: this.reqSeq,\n        action,\n        data,\n      })\n    })\n  }\n\n  useWebPhone(): boolean {\n    return this._config.registerWebDevice || false\n  }\n\n  private async deviceConfig(): Promise<SipConfiguration | Error> {\n    return this.request(WEBSOCKET_DEFAULT_DEVICE_CONFIG, {})\n  }\n\n  private async onMessage(message: Message) {\n    this.log.debug('receive message: ', message)\n    if (message.seq_reply! > 0) {\n      if (this.queueRequest.has(message.seq_reply!)) {\n        const promise = this.queueRequest.get(message.seq_reply!)\n        this.queueRequest.delete(message.seq_reply!)\n        if (message.status === Response.STATUS_OK) {\n          promise!.resolve(message.data)\n        } else {\n          promise!.reject(message.error!)\n        }\n      }\n    } else {\n      switch (message.event) {\n        case WEBSOCKET_EVENT_HELLO:\n          await this.connected(message.data as ConnectionInfo)\n          this.log.debug(\n            `opened session ${this.connectionInfo.sock_id} for userId=${\n              this.connectionInfo.session.user_id\n            }`\n          )\n          break\n        case WEBSOCKET_EVENT_CALL:\n          this.handleCallEvents(message.data.call as CallEventData)\n          break\n\n        case WEBSOCKET_EVENT_SIP:\n          this.eventHandler.emit(WEBSOCKET_EVENT_SIP, message.data)\n          break\n        default:\n          this.log.error(`event ${message.event} not handler`)\n      }\n    }\n  }\n\n  private async connected(info: ConnectionInfo) {\n    this.connectionInfo = info\n\n    this.phone = new SipPhone(this.instanceId)\n\n    this.phone.on(\n      'peerStreams',\n      (id: string, streams: MediaStream[] | null) => {\n        const call = this.callById(id)\n        if (call && call.peerStreams === null) {\n          call.setPeerStreams(streams)\n          this.eventHandler.emit(\n            WEBSOCKET_EVENT_CALL,\n            CallActions.PeerStream,\n            call\n          )\n        }\n      }\n    )\n\n    this.phone.on('newSession', this.onNewCallSession.bind(this))\n\n    if (this.useWebPhone()) {\n      try {\n        const conf = await this.deviceConfig()\n        await this.phone.register(conf as SipConfiguration)\n      } catch (e) {\n        // FIXME add handle error\n        this.log.error(e)\n      }\n    }\n  }\n\n  private onNewCallSession(id: string, session: CallSession) {\n    this.checkAutoAnswer(id)\n  }\n\n  private checkAutoAnswer(id: string) {\n    const call = this.callById(id)\n    if (call && this.phone.isOutboundCall(id)) {\n      call.answer({\n        useVideo: call.videoRequest,\n        useScreen: call.screenRequest,\n      })\n    }\n  }\n\n  private connectToSocket(): Promise<Error | null> {\n    return new Promise<Error | null>((resolve, reject) => {\n      try {\n        this.socket = new Socket(this._config.endpoint)\n        this.socket.connect(this._config.token!)\n      } catch (e) {\n        reject(e)\n\n        return\n      }\n\n      this.socket.on('message', this.onMessage.bind(this))\n      this.socket.on('close', (code: number) => {\n        this.log.error('socket close code: ', code)\n        reject(new Error(`close socket code: ${code}`))\n      })\n      this.socket.on('open', () => {\n        resolve(null)\n      })\n    })\n  }\n\n  private handleCallEvents(event: CallEventData) {\n    let call: Call | undefined\n\n    switch (event.action) {\n      case CallActions.Ringing:\n        call = new Call(\n          this,\n          event as CallInfo,\n          this.phone.getPeerStream(event.id)\n        )\n\n        this.callStore.set(call.id, call)\n\n        this.checkAutoAnswer(event.id)\n        break\n\n      case CallActions.Active:\n        call = this.callById(event.id)\n        if (call) {\n          call.setActive(event)\n        }\n        break\n\n      case CallActions.Bridge:\n        call = this.callById(event.id)\n        if (call) {\n          // const session = this.phone.getSession(event.id);\n          // if (session) {\n          //   debugger\n          // }\n          call.setInfo(event as CallInfo)\n        }\n        break\n\n      case CallActions.Execute:\n        call = this.callById(event.id)\n        if (call) {\n          call.setExecute(event as CallEventExecute)\n        }\n        break\n\n      case CallActions.DTMF:\n        call = this.callById(event.id)\n        if (call) {\n          call.addDigit(event as CallEventDTMF)\n        }\n        break\n\n      case CallActions.Voice:\n        call = this.callById(event.id)\n        if (call) {\n          call.setVoice(event)\n        }\n        break\n\n      case CallActions.Silence:\n        call = this.callById(event.id)\n        if (call) {\n          call.setSilence(event)\n        }\n        break\n\n      case CallActions.Hold:\n        call = this.callById(event.id)\n        if (call) {\n          call.setState(event)\n        }\n        break\n\n      case CallActions.Hangup:\n        call = this.callById(event.id)\n        if (call) {\n          call.setHangup(event as CallHangup)\n          this.callStore.delete(call.id)\n        }\n        break\n\n      default:\n        throw new Error('Unhandled action')\n    }\n\n    if (call) {\n      this.eventHandler.emit(WEBSOCKET_EVENT_CALL, event.action, call)\n    }\n  }\n}\n"],"names":["BASE_PATH","replace","BaseAPI","[object Object]","configuration","basePath","axios","globalAxios","this","RequiredError","Error","field","msg","super","ProtobufNullValue","AgentServiceApiAxiosParamCreator","body","options","localVarUrlObj","globalImportUrl.parse","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","apiKey","localVarApiKeyValue","query","search","headers","data","JSON","stringify","undefined","url","globalImportUrl.format","id","domain_id","localVarPath","encodeURIComponent","String","localVarQueryParameter","page","size","q","agent_id","time_from","time_to","AgentServiceApiFp","localVarAxiosArgs","createAgent","axiosRequestArgs","request","deleteAgent","readAgent","searchAgent","searchAgentInQueue","searchAgentInTeam","searchAgentStateHistory","updateAgent","updateAgentStatus","AgentServiceApiFactory","AgentServiceApi","AgentSkillServiceApiAxiosParamCreator","AgentSkillServiceApiFp","createAgentSkill","deleteAgentSkill","readAgentSkill","searchAgentSkill","updateAgentSkill","AgentSkillServiceApiFactory","AgentSkillServiceApi","AgentTeamServiceApiAxiosParamCreator","AgentTeamServiceApiFp","createAgentTeam","deleteAgentTeam","readAgentTeam","searchAgentTeam","updateAgentTeam","AgentTeamServiceApiFactory","AgentTeamServiceApi","BackendProfileServiceApiAxiosParamCreator","BackendProfileServiceApiFp","createBackendProfile","deleteBackendProfile","patchBackendProfile","readBackendProfile","searchBackendProfile","updateBackendProfile","BackendProfileServiceApiFactory","BackendProfileServiceApi","BucketServiceApiAxiosParamCreator","BucketServiceApiFp","createBucket","deleteBucket","readBucket","searchBucket","updateBucket","BucketServiceApiFactory","BucketServiceApi","CalendarServiceApiAxiosParamCreator","CalendarServiceApiFp","createCalendar","deleteCalendar","readCalendar","searchCalendar","searchTimezones","updateCalendar","CalendarServiceApiFactory","CalendarServiceApi","CommunicationTypeServiceApiAxiosParamCreator","CommunicationTypeServiceApiFp","createCommunicationType","deleteCommunicationType","readCommunicationType","searchCommunicationType","updateCommunicationType","CommunicationTypeServiceApiFactory","CommunicationTypeServiceApi","ListServiceApiAxiosParamCreator","list_id","ListServiceApiFp","createList","createListCommunication","deleteList","deleteListCommunication","readList","readListCommunication","searchList","searchListCommunication","updateList","updateListCommunication","ListServiceApiFactory","ListServiceApi","MediaFileServiceApiAxiosParamCreator","MediaFileServiceApiFp","deleteMediaFile","readMediaFile","searchMediaFile","MediaFileServiceApiFactory","MediaFileServiceApi","MemberServiceApiAxiosParamCreator","queue_id","member_id","MemberServiceApiFp","createMember","createMemberBulk","deleteMember","deleteMembers","readMember","searchMember","searchMemberAttempts","updateMember","MemberServiceApiFactory","MemberServiceApi","OutboundResourceGroupServiceApiAxiosParamCreator","group_id","OutboundResourceGroupServiceApiFp","createOutboundResourceGroup","createOutboundResourceInGroup","deleteOutboundResourceGroup","deleteOutboundResourceInGroup","readOutboundResourceGroup","readOutboundResourceInGroup","searchOutboundResourceGroup","searchOutboundResourceInGroup","updateOutboundResourceGroup","updateOutboundResourceInGroup","OutboundResourceGroupServiceApiFactory","OutboundResourceGroupServiceApi","OutboundResourceServiceApiAxiosParamCreator","resource_id","OutboundResourceServiceApiFp","createOutboundResource","createOutboundResourceDisplay","deleteOutboundResource","deleteOutboundResourceDisplay","patchOutboundResource","readOutboundResource","readOutboundResourceDisplay","searchOutboundResource","searchOutboundResourceDisplay","updateOutboundResource","updateOutboundResourceDisplay","OutboundResourceServiceApiFactory","OutboundResourceServiceApi","QueueBucketServiceApiAxiosParamCreator","QueueBucketServiceApiFp","createQueueBucket","deleteQueueBucket","readQueueBucket","searchQueueBucket","updateQueueBucket","QueueBucketServiceApiFactory","QueueBucketServiceApi","QueueResourcesServiceApiAxiosParamCreator","QueueResourcesServiceApiFp","createQueueResourceGroup","deleteQueueResourceGroup","readQueueResourceGroup","searchQueueResourceGroup","updateQueueResourceGroup","QueueResourcesServiceApiFactory","QueueResourcesServiceApi","QueueRoutingServiceApiAxiosParamCreator","QueueRoutingServiceApiFp","createQueueRouting","deleteQueueRouting","readQueueRouting","searchQueueRouting","updateQueueRouting","QueueRoutingServiceApiFactory","QueueRoutingServiceApi","QueueServiceApiAxiosParamCreator","QueueServiceApiFp","createQueue","deleteQueue","patchQueue","readQueue","searchQueue","updateQueue","QueueServiceApiFactory","QueueServiceApi","ResourceTeamServiceApiAxiosParamCreator","team_id","ResourceTeamServiceApiFp","createResourceTeamAgent","createResourceTeamSkill","deleteResourceTeamAgent","deleteResourceTeamSkill","readResourceTeamAgent","readResourceTeamSkill","searchResourceTeamAgent","searchResourceTeamSkill","updateResourceTeamAgent","updateResourceTeamSkill","ResourceTeamServiceApiFactory","ResourceTeamServiceApi","RoutingOutboundCallServiceApiAxiosParamCreator","from_id","to_id","RoutingOutboundCallServiceApiFp","createRoutingOutboundCall","deleteRoutingOutboundCall","movePositionRoutingOutboundCall","patchRoutingOutboundCall","readRoutingOutboundCall","searchRoutingOutboundCall","updateRoutingOutboundCall","RoutingOutboundCallServiceApiFactory","RoutingOutboundCallServiceApi","RoutingSchemaServiceApiAxiosParamCreator","RoutingSchemaServiceApiFp","createRoutingSchema","deleteRoutingSchema","patchRoutingSchema","readRoutingSchema","searchRoutingSchema","updateRoutingSchema","RoutingSchemaServiceApiFactory","RoutingSchemaServiceApi","RoutingVariableServiceApiAxiosParamCreator","RoutingVariableServiceApiFp","createRoutingVariable","deleteRoutingVariable","readRoutingVariable","searchRoutingVariable","updateRoutingVariable","RoutingVariableServiceApiFactory","RoutingVariableServiceApi","SkillServiceApiAxiosParamCreator","SkillServiceApiFp","createSkill","deleteSkill","readSkill","searchSkill","updateSkill","SkillServiceApiFactory","SkillServiceApi","SupervisorInTeamServiceApiAxiosParamCreator","SupervisorInTeamServiceApiFp","createSupervisorInTeam","deleteSupervisorInTeam","readSupervisorInTeam","searchSupervisorInTeam","updateSupervisorInTeam","SupervisorInTeamServiceApiFactory","SupervisorInTeamServiceApi","Configuration","param","username","password","accessToken","CallActions","CallDirection","Call","client","e","peerStreams","voice","createdAt","Date","now","answeredAt","hangupAt","digits","applications","nodeName","node_name","setState","setInfo","display","displayNumber","displayName","muted","_muted","allowInboundVideo","videoFlow","indexOf","allowOutboundVideo","s","ownerCallId","owner_id","parentCallId","parent_id","destination","direction","fromNumber","from_number","fromName","from_name","toName","to_name","toNumber","to_number","payload","gateway_id","_gatewayId","video_flow","screenRequest","screen_request","videoRequest","video_request","gatewayId","state","action","active","streams","hangupCause","cause","push","application","digit","req","sessionId","phone","hasSession","answer","_cause","Inbound","node_id","Hold","unHold","hold","dtmf","mute","res","call","parent_node_id","nodeId","sendToCallId","inviteToUser","Log","supportingDetails","emitLogMessage","msgType","length","console","SipPhone","EventEmitter","instanceId","Map","SipClient.debug","enable","log","on","ua","removeAllListeners","sessionCache","clear","useScreen","video","audio","screen","useVideo","useAudio","sessionTimersExpires","pcConfig","iceServers","urls","rtcOfferConstraints","offerToReceiveAudio","offerToReceiveVideo","mediaConstraints","getMediaConstraints","has","get","session","getSession","sip","connection","getRemoteStreams","callOption","sipConf","socket","SipClient.WebSocketInterface","server","realm","uri","authorization_user","ha1","user_agent","userAgent","sockets","session_timers","register_expires","connection_recovery_min_interval","connection_recovery_max_interval","SipClient.UA","error","getHeader","callSession","incoming","instance_id","storeSession","peer","peerconnection","addEventListener","async","evt","emit","Array","stream","removeSession","isOutboundCall","getPeerStream","start","unregister","allSession","from","values","delete","set","formatWebSocketUri","host","SOCKET_URL_SUFFIX","Socket","token","WebSocket","onclose","onClose","code","onmessage","onMessage","onopen","onOpen","send","close","message","parse","WEBSOCKET_AUTHENTICATION_CHALLENGE","WEBSOCKET_DEFAULT_DEVICE_CONFIG","WEBSOCKET_MAKE_OUTBOUND_CALL","WEBSOCKET_MAKE_USER_CALL","WEBSOCKET_EVENT_HELLO","WEBSOCKET_EVENT_CALL","WEBSOCKET_EVENT_SIP","Response","Client","_config","eventHandler","callStore","connectToSocket","handler","connectionInfo","version","server_version","sock_id","Promise","resolve","reject","queueRequest","reqSeq","seq","registerWebDevice","debug","seq_reply","promise","status","STATUS_OK","event","connected","user_id","handleCallEvents","info","callById","setPeerStreams","PeerStream","onNewCallSession","bind","useWebPhone","conf","deviceConfig","register","checkAutoAnswer","endpoint","connect","Ringing","Active","setActive","Bridge","Execute","setExecute","DTMF","addDigit","Voice","setVoice","Silence","setSilence","Hangup","setHangup"],"mappings":"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"}