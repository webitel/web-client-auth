(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('url'), require('axios'), require('ee-ts'), require('jssip')) :
    typeof define === 'function' && define.amd ? define(['exports', 'tslib', 'url', 'axios', 'ee-ts', 'jssip'], factory) :
    (global = global || self, factory(global.WebitelSdk = {}, global.tslib, global.globalImportUrl, global.globalAxios, global.eeTs, global.SipClient));
}(this, function (exports, tslib, globalImportUrl, globalAxios, eeTs, SipClient) { 'use strict';

    globalAxios = globalAxios && globalAxios.hasOwnProperty('default') ? globalAxios['default'] : globalAxios;

    // tslint:disable
    var BASE_PATH = 'http://dev.webitel.com'.replace(/\/+$/, '');
    /**
     *
     * @export
     * @class BaseAPI
     */
    var BaseAPI = /** @class */ (function () {
        function BaseAPI(configuration, basePath, axios) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            if (axios === void 0) { axios = globalAxios; }
            this.basePath = basePath;
            this.axios = axios;
            if (configuration) {
                this.configuration = configuration;
                this.basePath = configuration.basePath || this.basePath;
            }
        }
        return BaseAPI;
    }());
    /**
     *
     * @export
     * @class RequiredError
     * @extends {Error}
     */
    var RequiredError = /** @class */ (function (_super) {
        tslib.__extends(RequiredError, _super);
        function RequiredError(field, msg) {
            var _this = _super.call(this, msg) || this;
            _this.field = field;
            _this.name = 'RequiredError';
            return _this;
        }
        return RequiredError;
    }(Error));

    // tslint:disable
    (function (ProtobufNullValue) {
        ProtobufNullValue["NULLVALUE"] = "NULL_VALUE";
    })(exports.ProtobufNullValue || (exports.ProtobufNullValue = {}));
    /**
     * AgentServiceApi - axios parameter creator
     * @export
     */
    var AgentServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create Agent
             * @param {EngineCreateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgent: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgent.');
                }
                var localVarPath = "/call_center/agents";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove Agent
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgent: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgent.');
                }
                var localVarPath = "/call_center/agents/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Agent item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgent: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgent.');
                }
                var localVarPath = "/call_center/agents/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Agent
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgent: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/agents";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInQueue: function (id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling searchAgentInQueue.');
                }
                var localVarPath = "/call_center/agents/{id}/queues".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInTeam: function (id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling searchAgentInTeam.');
                }
                var localVarPath = "/call_center/agents/{id}/teams".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Agent
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [time_from]
             * @param {string} [time_to]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentStateHistory: function (agent_id, page, size, time_from, time_to, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling searchAgentStateHistory.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/states/history".replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (time_from !== undefined) {
                    localVarQueryParameter['time_from'] = time_from;
                }
                if (time_to !== undefined) {
                    localVarQueryParameter['time_to'] = time_to;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update Agent
             * @param {string} id
             * @param {EngineUpdateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgent: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgent.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgent.');
                }
                var localVarPath = "/call_center/agents/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Change agent status
             * @param {string} id
             * @param {EngineAgentStatusRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentStatus: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentStatus.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentStatus.');
                }
                var localVarPath = "/call_center/agents/{id}/status".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * AgentServiceApi - functional programming interface
     * @export
     */
    var AgentServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create Agent
             * @param {EngineCreateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgent: function (body, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).createAgent(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove Agent
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgent: function (id, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).deleteAgent(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Agent item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgent: function (id, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).readAgent(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Agent
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgent: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgent(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInQueue: function (id, page, size, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentInQueue(id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInTeam: function (id, page, size, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentInTeam(id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Agent
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [time_from]
             * @param {string} [time_to]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentStateHistory: function (agent_id, page, size, time_from, time_to, domain_id, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update Agent
             * @param {string} id
             * @param {EngineUpdateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgent: function (id, body, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgent(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Change agent status
             * @param {string} id
             * @param {EngineAgentStatusRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentStatus: function (id, body, options) {
                var localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgentStatus(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * AgentServiceApi - factory interface
     * @export
     */
    var AgentServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create Agent
             * @param {EngineCreateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgent: function (body, options) {
                return AgentServiceApiFp(configuration).createAgent(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove Agent
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgent: function (id, domain_id, options) {
                return AgentServiceApiFp(configuration).deleteAgent(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Agent item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgent: function (id, domain_id, options) {
                return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Agent
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgent: function (page, size, q, domain_id, options) {
                return AgentServiceApiFp(configuration).searchAgent(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInQueue: function (id, page, size, domain_id, options) {
                return AgentServiceApiFp(configuration).searchAgentInQueue(id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @param {string} id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentInTeam: function (id, page, size, domain_id, options) {
                return AgentServiceApiFp(configuration).searchAgentInTeam(id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Agent
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [time_from]
             * @param {string} [time_to]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentStateHistory: function (agent_id, page, size, time_from, time_to, domain_id, options) {
                return AgentServiceApiFp(configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update Agent
             * @param {string} id
             * @param {EngineUpdateAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgent: function (id, body, options) {
                return AgentServiceApiFp(configuration).updateAgent(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Change agent status
             * @param {string} id
             * @param {EngineAgentStatusRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentStatus: function (id, body, options) {
                return AgentServiceApiFp(configuration).updateAgentStatus(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * AgentServiceApi - object-oriented interface
     * @export
     * @class AgentServiceApi
     * @extends {BaseAPI}
     */
    var AgentServiceApi = /** @class */ (function (_super) {
        tslib.__extends(AgentServiceApi, _super);
        function AgentServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.createAgent = function (body, options) {
            return AgentServiceApiFp(this.configuration).createAgent(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove Agent
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.deleteAgent = function (id, domain_id, options) {
            return AgentServiceApiFp(this.configuration).deleteAgent(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Agent item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.readAgent = function (id, domain_id, options) {
            return AgentServiceApiFp(this.configuration).readAgent(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Agent
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.searchAgent = function (page, size, q, domain_id, options) {
            return AgentServiceApiFp(this.configuration).searchAgent(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.searchAgentInQueue = function (id, page, size, domain_id, options) {
            return AgentServiceApiFp(this.configuration).searchAgentInQueue(id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.searchAgentInTeam = function (id, page, size, domain_id, options) {
            return AgentServiceApiFp(this.configuration).searchAgentInTeam(id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Agent
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [time_from]
         * @param {string} [time_to]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.searchAgentStateHistory = function (agent_id, page, size, time_from, time_to, domain_id, options) {
            return AgentServiceApiFp(this.configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update Agent
         * @param {string} id
         * @param {EngineUpdateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.updateAgent = function (id, body, options) {
            return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Change agent status
         * @param {string} id
         * @param {EngineAgentStatusRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentServiceApi
         */
        AgentServiceApi.prototype.updateAgentStatus = function (id, body, options) {
            return AgentServiceApiFp(this.configuration).updateAgentStatus(id, body, options)(this.axios, this.basePath);
        };
        return AgentServiceApi;
    }(BaseAPI));
    /**
     * AgentSkillServiceApi - axios parameter creator
     * @export
     */
    var AgentSkillServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create AgentSkill
             * @param {string} agent_id
             * @param {EngineCreateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentSkill: function (agent_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling createAgentSkill.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgentSkill.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/skills".replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentSkill: function (agent_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling deleteAgentSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgentSkill.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/skills/{id}"
                    .replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary AgentSkill item
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentSkill: function (agent_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling readAgentSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgentSkill.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/skills/{id}"
                    .replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of AgentSkill
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentSkill: function (agent_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling searchAgentSkill.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/skills".replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {EngineUpdateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentSkill: function (agent_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'agent_id' is not null or undefined
                if (agent_id === null || agent_id === undefined) {
                    throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling updateAgentSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentSkill.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentSkill.');
                }
                var localVarPath = "/call_center/agents/{agent_id}/skills/{id}"
                    .replace("{" + 'agent_id' + "}", encodeURIComponent(String(agent_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * AgentSkillServiceApi - functional programming interface
     * @export
     */
    var AgentSkillServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create AgentSkill
             * @param {string} agent_id
             * @param {EngineCreateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentSkill: function (agent_id, body, options) {
                var localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).createAgentSkill(agent_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentSkill: function (agent_id, id, domain_id, options) {
                var localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).deleteAgentSkill(agent_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary AgentSkill item
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentSkill: function (agent_id, id, domain_id, options) {
                var localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).readAgentSkill(agent_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of AgentSkill
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentSkill: function (agent_id, page, size, domain_id, options) {
                var localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).searchAgentSkill(agent_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {EngineUpdateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentSkill: function (agent_id, id, body, options) {
                var localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).updateAgentSkill(agent_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * AgentSkillServiceApi - factory interface
     * @export
     */
    var AgentSkillServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create AgentSkill
             * @param {string} agent_id
             * @param {EngineCreateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentSkill: function (agent_id, body, options) {
                return AgentSkillServiceApiFp(configuration).createAgentSkill(agent_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentSkill: function (agent_id, id, domain_id, options) {
                return AgentSkillServiceApiFp(configuration).deleteAgentSkill(agent_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary AgentSkill item
             * @param {string} agent_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentSkill: function (agent_id, id, domain_id, options) {
                return AgentSkillServiceApiFp(configuration).readAgentSkill(agent_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of AgentSkill
             * @param {string} agent_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentSkill: function (agent_id, page, size, domain_id, options) {
                return AgentSkillServiceApiFp(configuration).searchAgentSkill(agent_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update AgentSkill
             * @param {string} agent_id
             * @param {string} id
             * @param {EngineUpdateAgentSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentSkill: function (agent_id, id, body, options) {
                return AgentSkillServiceApiFp(configuration).updateAgentSkill(agent_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * AgentSkillServiceApi - object-oriented interface
     * @export
     * @class AgentSkillServiceApi
     * @extends {BaseAPI}
     */
    var AgentSkillServiceApi = /** @class */ (function (_super) {
        tslib.__extends(AgentSkillServiceApi, _super);
        function AgentSkillServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create AgentSkill
         * @param {string} agent_id
         * @param {EngineCreateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentSkillServiceApi
         */
        AgentSkillServiceApi.prototype.createAgentSkill = function (agent_id, body, options) {
            return AgentSkillServiceApiFp(this.configuration).createAgentSkill(agent_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentSkillServiceApi
         */
        AgentSkillServiceApi.prototype.deleteAgentSkill = function (agent_id, id, domain_id, options) {
            return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(agent_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary AgentSkill item
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentSkillServiceApi
         */
        AgentSkillServiceApi.prototype.readAgentSkill = function (agent_id, id, domain_id, options) {
            return AgentSkillServiceApiFp(this.configuration).readAgentSkill(agent_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of AgentSkill
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentSkillServiceApi
         */
        AgentSkillServiceApi.prototype.searchAgentSkill = function (agent_id, page, size, domain_id, options) {
            return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(agent_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {EngineUpdateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentSkillServiceApi
         */
        AgentSkillServiceApi.prototype.updateAgentSkill = function (agent_id, id, body, options) {
            return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(agent_id, id, body, options)(this.axios, this.basePath);
        };
        return AgentSkillServiceApi;
    }(BaseAPI));
    /**
     * AgentTeamServiceApi - axios parameter creator
     * @export
     */
    var AgentTeamServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create AgentTeam
             * @param {EngineCreateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentTeam: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgentTeam.');
                }
                var localVarPath = "/call_center/teams";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove AgentTeam
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentTeam: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgentTeam.');
                }
                var localVarPath = "/call_center/teams/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary AgentTeam item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentTeam: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgentTeam.');
                }
                var localVarPath = "/call_center/teams/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of AgentTeam
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentTeam: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/teams";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update AgentTeam
             * @param {string} id
             * @param {EngineUpdateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentTeam: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentTeam.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentTeam.');
                }
                var localVarPath = "/call_center/teams/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * AgentTeamServiceApi - functional programming interface
     * @export
     */
    var AgentTeamServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create AgentTeam
             * @param {EngineCreateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentTeam: function (body, options) {
                var localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).createAgentTeam(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove AgentTeam
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentTeam: function (id, domain_id, options) {
                var localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).deleteAgentTeam(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary AgentTeam item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentTeam: function (id, domain_id, options) {
                var localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).readAgentTeam(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of AgentTeam
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentTeam: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).searchAgentTeam(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update AgentTeam
             * @param {string} id
             * @param {EngineUpdateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentTeam: function (id, body, options) {
                var localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).updateAgentTeam(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * AgentTeamServiceApi - factory interface
     * @export
     */
    var AgentTeamServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create AgentTeam
             * @param {EngineCreateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createAgentTeam: function (body, options) {
                return AgentTeamServiceApiFp(configuration).createAgentTeam(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove AgentTeam
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteAgentTeam: function (id, domain_id, options) {
                return AgentTeamServiceApiFp(configuration).deleteAgentTeam(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary AgentTeam item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readAgentTeam: function (id, domain_id, options) {
                return AgentTeamServiceApiFp(configuration).readAgentTeam(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of AgentTeam
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchAgentTeam: function (page, size, q, domain_id, options) {
                return AgentTeamServiceApiFp(configuration).searchAgentTeam(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update AgentTeam
             * @param {string} id
             * @param {EngineUpdateAgentTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateAgentTeam: function (id, body, options) {
                return AgentTeamServiceApiFp(configuration).updateAgentTeam(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * AgentTeamServiceApi - object-oriented interface
     * @export
     * @class AgentTeamServiceApi
     * @extends {BaseAPI}
     */
    var AgentTeamServiceApi = /** @class */ (function (_super) {
        tslib.__extends(AgentTeamServiceApi, _super);
        function AgentTeamServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentTeamServiceApi
         */
        AgentTeamServiceApi.prototype.createAgentTeam = function (body, options) {
            return AgentTeamServiceApiFp(this.configuration).createAgentTeam(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove AgentTeam
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentTeamServiceApi
         */
        AgentTeamServiceApi.prototype.deleteAgentTeam = function (id, domain_id, options) {
            return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary AgentTeam item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentTeamServiceApi
         */
        AgentTeamServiceApi.prototype.readAgentTeam = function (id, domain_id, options) {
            return AgentTeamServiceApiFp(this.configuration).readAgentTeam(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of AgentTeam
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentTeamServiceApi
         */
        AgentTeamServiceApi.prototype.searchAgentTeam = function (page, size, q, domain_id, options) {
            return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update AgentTeam
         * @param {string} id
         * @param {EngineUpdateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AgentTeamServiceApi
         */
        AgentTeamServiceApi.prototype.updateAgentTeam = function (id, body, options) {
            return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(id, body, options)(this.axios, this.basePath);
        };
        return AgentTeamServiceApi;
    }(BaseAPI));
    /**
     * BackendProfileServiceApi - axios parameter creator
     * @export
     */
    var BackendProfileServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create BackendProfile
             * @param {StorageCreateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBackendProfile: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createBackendProfile.');
                }
                var localVarPath = "/storage/backend_profiles";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove BackendProfile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBackendProfile: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteBackendProfile.');
                }
                var localVarPath = "/storage/backend_profiles/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Patch BackendProfile
             * @param {string} id
             * @param {StoragePatchBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchBackendProfile: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchBackendProfile.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchBackendProfile.');
                }
                var localVarPath = "/storage/backend_profiles/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary BackendProfile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBackendProfile: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readBackendProfile.');
                }
                var localVarPath = "/storage/backend_profiles/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of BackendProfile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBackendProfile: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/storage/backend_profiles";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update BackendProfile
             * @param {string} id
             * @param {StorageUpdateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBackendProfile: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateBackendProfile.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateBackendProfile.');
                }
                var localVarPath = "/storage/backend_profiles/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * BackendProfileServiceApi - functional programming interface
     * @export
     */
    var BackendProfileServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create BackendProfile
             * @param {StorageCreateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBackendProfile: function (body, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).createBackendProfile(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove BackendProfile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBackendProfile: function (id, domain_id, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).deleteBackendProfile(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Patch BackendProfile
             * @param {string} id
             * @param {StoragePatchBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchBackendProfile: function (id, body, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).patchBackendProfile(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary BackendProfile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBackendProfile: function (id, domain_id, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).readBackendProfile(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of BackendProfile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBackendProfile: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).searchBackendProfile(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update BackendProfile
             * @param {string} id
             * @param {StorageUpdateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBackendProfile: function (id, body, options) {
                var localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).updateBackendProfile(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * BackendProfileServiceApi - factory interface
     * @export
     */
    var BackendProfileServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create BackendProfile
             * @param {StorageCreateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBackendProfile: function (body, options) {
                return BackendProfileServiceApiFp(configuration).createBackendProfile(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove BackendProfile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBackendProfile: function (id, domain_id, options) {
                return BackendProfileServiceApiFp(configuration).deleteBackendProfile(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Patch BackendProfile
             * @param {string} id
             * @param {StoragePatchBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchBackendProfile: function (id, body, options) {
                return BackendProfileServiceApiFp(configuration).patchBackendProfile(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary BackendProfile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBackendProfile: function (id, domain_id, options) {
                return BackendProfileServiceApiFp(configuration).readBackendProfile(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of BackendProfile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBackendProfile: function (page, size, q, domain_id, options) {
                return BackendProfileServiceApiFp(configuration).searchBackendProfile(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update BackendProfile
             * @param {string} id
             * @param {StorageUpdateBackendProfileRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBackendProfile: function (id, body, options) {
                return BackendProfileServiceApiFp(configuration).updateBackendProfile(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * BackendProfileServiceApi - object-oriented interface
     * @export
     * @class BackendProfileServiceApi
     * @extends {BaseAPI}
     */
    var BackendProfileServiceApi = /** @class */ (function (_super) {
        tslib.__extends(BackendProfileServiceApi, _super);
        function BackendProfileServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create BackendProfile
         * @param {StorageCreateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.createBackendProfile = function (body, options) {
            return BackendProfileServiceApiFp(this.configuration).createBackendProfile(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove BackendProfile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.deleteBackendProfile = function (id, domain_id, options) {
            return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Patch BackendProfile
         * @param {string} id
         * @param {StoragePatchBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.patchBackendProfile = function (id, body, options) {
            return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary BackendProfile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.readBackendProfile = function (id, domain_id, options) {
            return BackendProfileServiceApiFp(this.configuration).readBackendProfile(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of BackendProfile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.searchBackendProfile = function (page, size, q, domain_id, options) {
            return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update BackendProfile
         * @param {string} id
         * @param {StorageUpdateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BackendProfileServiceApi
         */
        BackendProfileServiceApi.prototype.updateBackendProfile = function (id, body, options) {
            return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(id, body, options)(this.axios, this.basePath);
        };
        return BackendProfileServiceApi;
    }(BaseAPI));
    /**
     * BucketServiceApi - axios parameter creator
     * @export
     */
    var BucketServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create Bucket
             * @param {EngineCreateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBucket: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createBucket.');
                }
                var localVarPath = "/call_center/buckets";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove Bucket
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBucket: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteBucket.');
                }
                var localVarPath = "/call_center/buckets/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Bucket item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBucket: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readBucket.');
                }
                var localVarPath = "/call_center/buckets/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Bucket
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBucket: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/buckets";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update Bucket
             * @param {string} id
             * @param {EngineUpdateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBucket: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateBucket.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateBucket.');
                }
                var localVarPath = "/call_center/buckets/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * BucketServiceApi - functional programming interface
     * @export
     */
    var BucketServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create Bucket
             * @param {EngineCreateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBucket: function (body, options) {
                var localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).createBucket(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove Bucket
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBucket: function (id, domain_id, options) {
                var localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).deleteBucket(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Bucket item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBucket: function (id, domain_id, options) {
                var localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).readBucket(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Bucket
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBucket: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).searchBucket(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update Bucket
             * @param {string} id
             * @param {EngineUpdateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBucket: function (id, body, options) {
                var localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).updateBucket(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * BucketServiceApi - factory interface
     * @export
     */
    var BucketServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create Bucket
             * @param {EngineCreateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createBucket: function (body, options) {
                return BucketServiceApiFp(configuration).createBucket(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove Bucket
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteBucket: function (id, domain_id, options) {
                return BucketServiceApiFp(configuration).deleteBucket(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Bucket item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readBucket: function (id, domain_id, options) {
                return BucketServiceApiFp(configuration).readBucket(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Bucket
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchBucket: function (page, size, q, domain_id, options) {
                return BucketServiceApiFp(configuration).searchBucket(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update Bucket
             * @param {string} id
             * @param {EngineUpdateBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateBucket: function (id, body, options) {
                return BucketServiceApiFp(configuration).updateBucket(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * BucketServiceApi - object-oriented interface
     * @export
     * @class BucketServiceApi
     * @extends {BaseAPI}
     */
    var BucketServiceApi = /** @class */ (function (_super) {
        tslib.__extends(BucketServiceApi, _super);
        function BucketServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create Bucket
         * @param {EngineCreateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BucketServiceApi
         */
        BucketServiceApi.prototype.createBucket = function (body, options) {
            return BucketServiceApiFp(this.configuration).createBucket(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove Bucket
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BucketServiceApi
         */
        BucketServiceApi.prototype.deleteBucket = function (id, domain_id, options) {
            return BucketServiceApiFp(this.configuration).deleteBucket(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Bucket item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BucketServiceApi
         */
        BucketServiceApi.prototype.readBucket = function (id, domain_id, options) {
            return BucketServiceApiFp(this.configuration).readBucket(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Bucket
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BucketServiceApi
         */
        BucketServiceApi.prototype.searchBucket = function (page, size, q, domain_id, options) {
            return BucketServiceApiFp(this.configuration).searchBucket(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update Bucket
         * @param {string} id
         * @param {EngineUpdateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof BucketServiceApi
         */
        BucketServiceApi.prototype.updateBucket = function (id, body, options) {
            return BucketServiceApiFp(this.configuration).updateBucket(id, body, options)(this.axios, this.basePath);
        };
        return BucketServiceApi;
    }(BaseAPI));
    /**
     * CalendarServiceApi - axios parameter creator
     * @export
     */
    var CalendarServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create calendar
             * @param {EngineCreateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCalendar: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCalendar.');
                }
                var localVarPath = "/calendars";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove calendar
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCalendar: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteCalendar.');
                }
                var localVarPath = "/calendars/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Calendar item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCalendar: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readCalendar.');
                }
                var localVarPath = "/calendars/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of calendar
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCalendar: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/calendars";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List timezones
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchTimezones: function (page, size, q, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/calendars/timezones";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update calendar
             * @param {string} id
             * @param {EngineUpdateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCalendar: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCalendar.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCalendar.');
                }
                var localVarPath = "/calendars/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * CalendarServiceApi - functional programming interface
     * @export
     */
    var CalendarServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create calendar
             * @param {EngineCreateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCalendar: function (body, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).createCalendar(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove calendar
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCalendar: function (id, domain_id, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).deleteCalendar(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Calendar item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCalendar: function (id, domain_id, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).readCalendar(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of calendar
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCalendar: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchCalendar(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List timezones
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchTimezones: function (page, size, q, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchTimezones(page, size, q, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update calendar
             * @param {string} id
             * @param {EngineUpdateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCalendar: function (id, body, options) {
                var localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).updateCalendar(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * CalendarServiceApi - factory interface
     * @export
     */
    var CalendarServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create calendar
             * @param {EngineCreateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCalendar: function (body, options) {
                return CalendarServiceApiFp(configuration).createCalendar(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove calendar
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCalendar: function (id, domain_id, options) {
                return CalendarServiceApiFp(configuration).deleteCalendar(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Calendar item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCalendar: function (id, domain_id, options) {
                return CalendarServiceApiFp(configuration).readCalendar(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of calendar
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCalendar: function (page, size, q, domain_id, options) {
                return CalendarServiceApiFp(configuration).searchCalendar(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List timezones
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchTimezones: function (page, size, q, options) {
                return CalendarServiceApiFp(configuration).searchTimezones(page, size, q, options)(axios, basePath);
            },
            /**
             *
             * @summary Update calendar
             * @param {string} id
             * @param {EngineUpdateCalendarRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCalendar: function (id, body, options) {
                return CalendarServiceApiFp(configuration).updateCalendar(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * CalendarServiceApi - object-oriented interface
     * @export
     * @class CalendarServiceApi
     * @extends {BaseAPI}
     */
    var CalendarServiceApi = /** @class */ (function (_super) {
        tslib.__extends(CalendarServiceApi, _super);
        function CalendarServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.createCalendar = function (body, options) {
            return CalendarServiceApiFp(this.configuration).createCalendar(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove calendar
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.deleteCalendar = function (id, domain_id, options) {
            return CalendarServiceApiFp(this.configuration).deleteCalendar(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Calendar item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.readCalendar = function (id, domain_id, options) {
            return CalendarServiceApiFp(this.configuration).readCalendar(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of calendar
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.searchCalendar = function (page, size, q, domain_id, options) {
            return CalendarServiceApiFp(this.configuration).searchCalendar(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List timezones
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.searchTimezones = function (page, size, q, options) {
            return CalendarServiceApiFp(this.configuration).searchTimezones(page, size, q, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update calendar
         * @param {string} id
         * @param {EngineUpdateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CalendarServiceApi
         */
        CalendarServiceApi.prototype.updateCalendar = function (id, body, options) {
            return CalendarServiceApiFp(this.configuration).updateCalendar(id, body, options)(this.axios, this.basePath);
        };
        return CalendarServiceApi;
    }(BaseAPI));
    /**
     * CommunicationTypeServiceApi - axios parameter creator
     * @export
     */
    var CommunicationTypeServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create CommunicationType
             * @param {EngineCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCommunicationType: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCommunicationType.');
                }
                var localVarPath = "/call_center/communication_type";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove CommunicationType
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCommunicationType: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteCommunicationType.');
                }
                var localVarPath = "/call_center/communication_type/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary CommunicationType item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCommunicationType: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readCommunicationType.');
                }
                var localVarPath = "/call_center/communication_type/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of CommunicationType
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCommunicationType: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/communication_type";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update CommunicationType
             * @param {string} id
             * @param {EngineUpdateCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCommunicationType: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCommunicationType.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCommunicationType.');
                }
                var localVarPath = "/call_center/communication_type/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * CommunicationTypeServiceApi - functional programming interface
     * @export
     */
    var CommunicationTypeServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create CommunicationType
             * @param {EngineCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCommunicationType: function (body, options) {
                var localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).createCommunicationType(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove CommunicationType
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCommunicationType: function (id, domain_id, options) {
                var localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).deleteCommunicationType(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary CommunicationType item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCommunicationType: function (id, domain_id, options) {
                var localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).readCommunicationType(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of CommunicationType
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCommunicationType: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).searchCommunicationType(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update CommunicationType
             * @param {string} id
             * @param {EngineUpdateCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCommunicationType: function (id, body, options) {
                var localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).updateCommunicationType(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * CommunicationTypeServiceApi - factory interface
     * @export
     */
    var CommunicationTypeServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create CommunicationType
             * @param {EngineCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createCommunicationType: function (body, options) {
                return CommunicationTypeServiceApiFp(configuration).createCommunicationType(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove CommunicationType
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteCommunicationType: function (id, domain_id, options) {
                return CommunicationTypeServiceApiFp(configuration).deleteCommunicationType(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary CommunicationType item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readCommunicationType: function (id, domain_id, options) {
                return CommunicationTypeServiceApiFp(configuration).readCommunicationType(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of CommunicationType
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchCommunicationType: function (page, size, q, domain_id, options) {
                return CommunicationTypeServiceApiFp(configuration).searchCommunicationType(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update CommunicationType
             * @param {string} id
             * @param {EngineUpdateCommunicationTypeRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateCommunicationType: function (id, body, options) {
                return CommunicationTypeServiceApiFp(configuration).updateCommunicationType(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * CommunicationTypeServiceApi - object-oriented interface
     * @export
     * @class CommunicationTypeServiceApi
     * @extends {BaseAPI}
     */
    var CommunicationTypeServiceApi = /** @class */ (function (_super) {
        tslib.__extends(CommunicationTypeServiceApi, _super);
        function CommunicationTypeServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create CommunicationType
         * @param {EngineCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CommunicationTypeServiceApi
         */
        CommunicationTypeServiceApi.prototype.createCommunicationType = function (body, options) {
            return CommunicationTypeServiceApiFp(this.configuration).createCommunicationType(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove CommunicationType
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CommunicationTypeServiceApi
         */
        CommunicationTypeServiceApi.prototype.deleteCommunicationType = function (id, domain_id, options) {
            return CommunicationTypeServiceApiFp(this.configuration).deleteCommunicationType(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary CommunicationType item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CommunicationTypeServiceApi
         */
        CommunicationTypeServiceApi.prototype.readCommunicationType = function (id, domain_id, options) {
            return CommunicationTypeServiceApiFp(this.configuration).readCommunicationType(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of CommunicationType
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CommunicationTypeServiceApi
         */
        CommunicationTypeServiceApi.prototype.searchCommunicationType = function (page, size, q, domain_id, options) {
            return CommunicationTypeServiceApiFp(this.configuration).searchCommunicationType(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update CommunicationType
         * @param {string} id
         * @param {EngineUpdateCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof CommunicationTypeServiceApi
         */
        CommunicationTypeServiceApi.prototype.updateCommunicationType = function (id, body, options) {
            return CommunicationTypeServiceApiFp(this.configuration).updateCommunicationType(id, body, options)(this.axios, this.basePath);
        };
        return CommunicationTypeServiceApi;
    }(BaseAPI));
    /**
     * ListServiceApi - axios parameter creator
     * @export
     */
    var ListServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create List
             * @param {EngineCreateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createList: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createList.');
                }
                var localVarPath = "/call_center/list";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Create ListCommunication
             * @param {string} list_id
             * @param {EngineCreateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createListCommunication: function (list_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'list_id' is not null or undefined
                if (list_id === null || list_id === undefined) {
                    throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling createListCommunication.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createListCommunication.');
                }
                var localVarPath = "/call_center/list/{list_id}/communication".replace("{" + 'list_id' + "}", encodeURIComponent(String(list_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove list
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteList: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteList.');
                }
                var localVarPath = "/call_center/list/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteListCommunication: function (list_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'list_id' is not null or undefined
                if (list_id === null || list_id === undefined) {
                    throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling deleteListCommunication.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteListCommunication.');
                }
                var localVarPath = "/call_center/list/{list_id}/communication/{id}"
                    .replace("{" + 'list_id' + "}", encodeURIComponent(String(list_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readList: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readList.');
                }
                var localVarPath = "/call_center/list/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List item
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readListCommunication: function (list_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'list_id' is not null or undefined
                if (list_id === null || list_id === undefined) {
                    throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling readListCommunication.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readListCommunication.');
                }
                var localVarPath = "/call_center/list/{list_id}/communication/{id}"
                    .replace("{" + 'list_id' + "}", encodeURIComponent(String(list_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of List
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchList: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/list";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of List
             * @param {string} list_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchListCommunication: function (list_id, page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'list_id' is not null or undefined
                if (list_id === null || list_id === undefined) {
                    throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling searchListCommunication.');
                }
                var localVarPath = "/call_center/list/{list_id}/communication".replace("{" + 'list_id' + "}", encodeURIComponent(String(list_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update list
             * @param {string} id
             * @param {EngineUpdateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateList: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateList.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateList.');
                }
                var localVarPath = "/call_center/list/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {EngineUpdateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateListCommunication: function (list_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'list_id' is not null or undefined
                if (list_id === null || list_id === undefined) {
                    throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling updateListCommunication.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateListCommunication.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateListCommunication.');
                }
                var localVarPath = "/call_center/list/{list_id}/communication/{id}"
                    .replace("{" + 'list_id' + "}", encodeURIComponent(String(list_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * ListServiceApi - functional programming interface
     * @export
     */
    var ListServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create List
             * @param {EngineCreateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createList: function (body, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).createList(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Create ListCommunication
             * @param {string} list_id
             * @param {EngineCreateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createListCommunication: function (list_id, body, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).createListCommunication(list_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove list
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteList: function (id, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).deleteList(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteListCommunication: function (list_id, id, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).deleteListCommunication(list_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readList: function (id, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).readList(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List item
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readListCommunication: function (list_id, id, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).readListCommunication(list_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of List
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchList: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).searchList(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of List
             * @param {string} list_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchListCommunication: function (list_id, page, size, q, domain_id, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).searchListCommunication(list_id, page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update list
             * @param {string} id
             * @param {EngineUpdateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateList: function (id, body, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).updateList(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {EngineUpdateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateListCommunication: function (list_id, id, body, options) {
                var localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).updateListCommunication(list_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * ListServiceApi - factory interface
     * @export
     */
    var ListServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create List
             * @param {EngineCreateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createList: function (body, options) {
                return ListServiceApiFp(configuration).createList(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Create ListCommunication
             * @param {string} list_id
             * @param {EngineCreateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createListCommunication: function (list_id, body, options) {
                return ListServiceApiFp(configuration).createListCommunication(list_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove list
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteList: function (id, domain_id, options) {
                return ListServiceApiFp(configuration).deleteList(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteListCommunication: function (list_id, id, domain_id, options) {
                return ListServiceApiFp(configuration).deleteListCommunication(list_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readList: function (id, domain_id, options) {
                return ListServiceApiFp(configuration).readList(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List item
             * @param {string} list_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readListCommunication: function (list_id, id, domain_id, options) {
                return ListServiceApiFp(configuration).readListCommunication(list_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of List
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchList: function (page, size, q, domain_id, options) {
                return ListServiceApiFp(configuration).searchList(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of List
             * @param {string} list_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchListCommunication: function (list_id, page, size, q, domain_id, options) {
                return ListServiceApiFp(configuration).searchListCommunication(list_id, page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update list
             * @param {string} id
             * @param {EngineUpdateListRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateList: function (id, body, options) {
                return ListServiceApiFp(configuration).updateList(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Update ListCommunication
             * @param {string} list_id
             * @param {string} id
             * @param {EngineUpdateListCommunicationRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateListCommunication: function (list_id, id, body, options) {
                return ListServiceApiFp(configuration).updateListCommunication(list_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * ListServiceApi - object-oriented interface
     * @export
     * @class ListServiceApi
     * @extends {BaseAPI}
     */
    var ListServiceApi = /** @class */ (function (_super) {
        tslib.__extends(ListServiceApi, _super);
        function ListServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create List
         * @param {EngineCreateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.createList = function (body, options) {
            return ListServiceApiFp(this.configuration).createList(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Create ListCommunication
         * @param {string} list_id
         * @param {EngineCreateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.createListCommunication = function (list_id, body, options) {
            return ListServiceApiFp(this.configuration).createListCommunication(list_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove list
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.deleteList = function (id, domain_id, options) {
            return ListServiceApiFp(this.configuration).deleteList(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.deleteListCommunication = function (list_id, id, domain_id, options) {
            return ListServiceApiFp(this.configuration).deleteListCommunication(list_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.readList = function (id, domain_id, options) {
            return ListServiceApiFp(this.configuration).readList(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List item
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.readListCommunication = function (list_id, id, domain_id, options) {
            return ListServiceApiFp(this.configuration).readListCommunication(list_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of List
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.searchList = function (page, size, q, domain_id, options) {
            return ListServiceApiFp(this.configuration).searchList(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of List
         * @param {string} list_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.searchListCommunication = function (list_id, page, size, q, domain_id, options) {
            return ListServiceApiFp(this.configuration).searchListCommunication(list_id, page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update list
         * @param {string} id
         * @param {EngineUpdateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.updateList = function (id, body, options) {
            return ListServiceApiFp(this.configuration).updateList(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {EngineUpdateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ListServiceApi
         */
        ListServiceApi.prototype.updateListCommunication = function (list_id, id, body, options) {
            return ListServiceApiFp(this.configuration).updateListCommunication(list_id, id, body, options)(this.axios, this.basePath);
        };
        return ListServiceApi;
    }(BaseAPI));
    /**
     * MediaFileServiceApi - axios parameter creator
     * @export
     */
    var MediaFileServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Remove MediaFile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMediaFile: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteMediaFile.');
                }
                var localVarPath = "/storage/media/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary MediaFile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMediaFile: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readMediaFile.');
                }
                var localVarPath = "/storage/media/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Search MediaFile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMediaFile: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/storage/media";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * MediaFileServiceApi - functional programming interface
     * @export
     */
    var MediaFileServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Remove MediaFile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMediaFile: function (id, domain_id, options) {
                var localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).deleteMediaFile(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary MediaFile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMediaFile: function (id, domain_id, options) {
                var localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).readMediaFile(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Search MediaFile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMediaFile: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).searchMediaFile(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * MediaFileServiceApi - factory interface
     * @export
     */
    var MediaFileServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Remove MediaFile
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMediaFile: function (id, domain_id, options) {
                return MediaFileServiceApiFp(configuration).deleteMediaFile(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary MediaFile item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMediaFile: function (id, domain_id, options) {
                return MediaFileServiceApiFp(configuration).readMediaFile(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Search MediaFile
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMediaFile: function (page, size, q, domain_id, options) {
                return MediaFileServiceApiFp(configuration).searchMediaFile(page, size, q, domain_id, options)(axios, basePath);
            },
        };
    };
    /**
     * MediaFileServiceApi - object-oriented interface
     * @export
     * @class MediaFileServiceApi
     * @extends {BaseAPI}
     */
    var MediaFileServiceApi = /** @class */ (function (_super) {
        tslib.__extends(MediaFileServiceApi, _super);
        function MediaFileServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Remove MediaFile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MediaFileServiceApi
         */
        MediaFileServiceApi.prototype.deleteMediaFile = function (id, domain_id, options) {
            return MediaFileServiceApiFp(this.configuration).deleteMediaFile(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary MediaFile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MediaFileServiceApi
         */
        MediaFileServiceApi.prototype.readMediaFile = function (id, domain_id, options) {
            return MediaFileServiceApiFp(this.configuration).readMediaFile(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Search MediaFile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MediaFileServiceApi
         */
        MediaFileServiceApi.prototype.searchMediaFile = function (page, size, q, domain_id, options) {
            return MediaFileServiceApiFp(this.configuration).searchMediaFile(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        return MediaFileServiceApi;
    }(BaseAPI));
    /**
     * MemberServiceApi - axios parameter creator
     * @export
     */
    var MemberServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMember: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createMember.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createMember.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberBulkRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMemberBulk: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createMemberBulk.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createMemberBulk.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members/bulk".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary DeleteMember
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMember: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteMember.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteMember.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary DeleteMembers
             * @param {string} queue_id
             * @param {EngineDeleteMembersRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMembers: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteMembers.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling deleteMembers.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMember: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readMember.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readMember.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Member
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMember: function (queue_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchMember.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SearchMemberAttempts
             * @param {string} queue_id
             * @param {string} member_id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMemberAttempts: function (queue_id, member_id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchMemberAttempts.');
                }
                // verify required parameter 'member_id' is not null or undefined
                if (member_id === null || member_id === undefined) {
                    throw new RequiredError('member_id', 'Required parameter member_id was null or undefined when calling searchMemberAttempts.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members/{member_id}/attempts"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'member_id' + "}", encodeURIComponent(String(member_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary UpdateMember
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateMember: function (queue_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateMember.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateMember.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateMember.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/members/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * MemberServiceApi - functional programming interface
     * @export
     */
    var MemberServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMember: function (queue_id, body, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).createMember(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberBulkRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMemberBulk: function (queue_id, body, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).createMemberBulk(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary DeleteMember
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMember: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).deleteMember(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary DeleteMembers
             * @param {string} queue_id
             * @param {EngineDeleteMembersRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMembers: function (queue_id, body, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).deleteMembers(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMember: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).readMember(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Member
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMember: function (queue_id, page, size, domain_id, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).searchMember(queue_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SearchMemberAttempts
             * @param {string} queue_id
             * @param {string} member_id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMemberAttempts: function (queue_id, member_id, domain_id, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).searchMemberAttempts(queue_id, member_id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary UpdateMember
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateMember: function (queue_id, id, body, options) {
                var localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).updateMember(queue_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * MemberServiceApi - factory interface
     * @export
     */
    var MemberServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMember: function (queue_id, body, options) {
                return MemberServiceApiFp(configuration).createMember(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Create Member
             * @param {string} queue_id
             * @param {EngineCreateMemberBulkRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createMemberBulk: function (queue_id, body, options) {
                return MemberServiceApiFp(configuration).createMemberBulk(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary DeleteMember
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMember: function (queue_id, id, domain_id, options) {
                return MemberServiceApiFp(configuration).deleteMember(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary DeleteMembers
             * @param {string} queue_id
             * @param {EngineDeleteMembersRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteMembers: function (queue_id, body, options) {
                return MemberServiceApiFp(configuration).deleteMembers(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readMember: function (queue_id, id, domain_id, options) {
                return MemberServiceApiFp(configuration).readMember(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Member
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMember: function (queue_id, page, size, domain_id, options) {
                return MemberServiceApiFp(configuration).searchMember(queue_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary SearchMemberAttempts
             * @param {string} queue_id
             * @param {string} member_id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchMemberAttempts: function (queue_id, member_id, domain_id, options) {
                return MemberServiceApiFp(configuration).searchMemberAttempts(queue_id, member_id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary UpdateMember
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateMemberRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateMember: function (queue_id, id, body, options) {
                return MemberServiceApiFp(configuration).updateMember(queue_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * MemberServiceApi - object-oriented interface
     * @export
     * @class MemberServiceApi
     * @extends {BaseAPI}
     */
    var MemberServiceApi = /** @class */ (function (_super) {
        tslib.__extends(MemberServiceApi, _super);
        function MemberServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.createMember = function (queue_id, body, options) {
            return MemberServiceApiFp(this.configuration).createMember(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberBulkRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.createMemberBulk = function (queue_id, body, options) {
            return MemberServiceApiFp(this.configuration).createMemberBulk(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary DeleteMember
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.deleteMember = function (queue_id, id, domain_id, options) {
            return MemberServiceApiFp(this.configuration).deleteMember(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary DeleteMembers
         * @param {string} queue_id
         * @param {EngineDeleteMembersRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.deleteMembers = function (queue_id, body, options) {
            return MemberServiceApiFp(this.configuration).deleteMembers(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.readMember = function (queue_id, id, domain_id, options) {
            return MemberServiceApiFp(this.configuration).readMember(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Member
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.searchMember = function (queue_id, page, size, domain_id, options) {
            return MemberServiceApiFp(this.configuration).searchMember(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SearchMemberAttempts
         * @param {string} queue_id
         * @param {string} member_id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.searchMemberAttempts = function (queue_id, member_id, domain_id, options) {
            return MemberServiceApiFp(this.configuration).searchMemberAttempts(queue_id, member_id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary UpdateMember
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof MemberServiceApi
         */
        MemberServiceApi.prototype.updateMember = function (queue_id, id, body, options) {
            return MemberServiceApiFp(this.configuration).updateMember(queue_id, id, body, options)(this.axios, this.basePath);
        };
        return MemberServiceApi;
    }(BaseAPI));
    /**
     * OutboundResourceGroupServiceApi - axios parameter creator
     * @export
     */
    var OutboundResourceGroupServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {EngineCreateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceGroup: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceGroup.');
                }
                var localVarPath = "/call_center/resource_group";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {string} group_id
             * @param {EngineCreateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceInGroup: function (group_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'group_id' is not null or undefined
                if (group_id === null || group_id === undefined) {
                    throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling createOutboundResourceInGroup.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceInGroup.');
                }
                var localVarPath = "/call_center/resource_group/{group_id}/resource".replace("{" + 'group_id' + "}", encodeURIComponent(String(group_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove OutboundResourceGroup
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceGroup: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceGroup.');
                }
                var localVarPath = "/call_center/resource_group/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'group_id' is not null or undefined
                if (group_id === null || group_id === undefined) {
                    throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling deleteOutboundResourceInGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.');
                }
                var localVarPath = "/call_center/resource_group/{group_id}/resource/{id}"
                    .replace("{" + 'group_id' + "}", encodeURIComponent(String(group_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary OutboundResourceGroup item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceGroup: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceGroup.');
                }
                var localVarPath = "/call_center/resource_group/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary OutboundResourceInGroup item
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'group_id' is not null or undefined
                if (group_id === null || group_id === undefined) {
                    throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling readOutboundResourceInGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceInGroup.');
                }
                var localVarPath = "/call_center/resource_group/{group_id}/resource/{id}"
                    .replace("{" + 'group_id' + "}", encodeURIComponent(String(group_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of OutboundResourceGroup
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceGroup: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/resource_group";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of OutboundResourceInGroup
             * @param {string} group_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceInGroup: function (group_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'group_id' is not null or undefined
                if (group_id === null || group_id === undefined) {
                    throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling searchOutboundResourceInGroup.');
                }
                var localVarPath = "/call_center/resource_group/{group_id}/resource".replace("{" + 'group_id' + "}", encodeURIComponent(String(group_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update OutboundResourceGroup
             * @param {string} id
             * @param {EngineUpdateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceGroup: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceGroup.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceGroup.');
                }
                var localVarPath = "/call_center/resource_group/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceInGroup: function (group_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'group_id' is not null or undefined
                if (group_id === null || group_id === undefined) {
                    throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling updateOutboundResourceInGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceInGroup.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceInGroup.');
                }
                var localVarPath = "/call_center/resource_group/{group_id}/resource/{id}"
                    .replace("{" + 'group_id' + "}", encodeURIComponent(String(group_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * OutboundResourceGroupServiceApi - functional programming interface
     * @export
     */
    var OutboundResourceGroupServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {EngineCreateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceGroup: function (body, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceGroup(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {string} group_id
             * @param {EngineCreateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceInGroup: function (group_id, body, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceInGroup(group_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove OutboundResourceGroup
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceGroup: function (id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceGroup(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary OutboundResourceGroup item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceGroup: function (id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceGroup(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary OutboundResourceInGroup item
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceInGroup(group_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of OutboundResourceGroup
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceGroup: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceGroup(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of OutboundResourceInGroup
             * @param {string} group_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceInGroup: function (group_id, page, size, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update OutboundResourceGroup
             * @param {string} id
             * @param {EngineUpdateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceGroup: function (id, body, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceGroup(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceInGroup: function (group_id, id, body, options) {
                var localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceInGroup(group_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * OutboundResourceGroupServiceApi - factory interface
     * @export
     */
    var OutboundResourceGroupServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {EngineCreateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceGroup: function (body, options) {
                return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceGroup(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Create OutboundResourceGroup
             * @param {string} group_id
             * @param {EngineCreateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceInGroup: function (group_id, body, options) {
                return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceInGroup(group_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove OutboundResourceGroup
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceGroup: function (id, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceGroup(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary OutboundResourceGroup item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceGroup: function (id, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceGroup(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary OutboundResourceInGroup item
             * @param {string} group_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceInGroup: function (group_id, id, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceInGroup(group_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of OutboundResourceGroup
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceGroup: function (page, size, q, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceGroup(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of OutboundResourceInGroup
             * @param {string} group_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceInGroup: function (group_id, page, size, domain_id, options) {
                return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update OutboundResourceGroup
             * @param {string} id
             * @param {EngineUpdateOutboundResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceGroup: function (id, body, options) {
                return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceGroup(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Update OutboundResourceInGroup
             * @param {string} group_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceInGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceInGroup: function (group_id, id, body, options) {
                return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceInGroup(group_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * OutboundResourceGroupServiceApi - object-oriented interface
     * @export
     * @class OutboundResourceGroupServiceApi
     * @extends {BaseAPI}
     */
    var OutboundResourceGroupServiceApi = /** @class */ (function (_super) {
        tslib.__extends(OutboundResourceGroupServiceApi, _super);
        function OutboundResourceGroupServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {EngineCreateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.createOutboundResourceGroup = function (body, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceGroup(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {string} group_id
         * @param {EngineCreateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.createOutboundResourceInGroup = function (group_id, body, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceInGroup(group_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove OutboundResourceGroup
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.deleteOutboundResourceGroup = function (id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceGroup(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.deleteOutboundResourceInGroup = function (group_id, id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary OutboundResourceGroup item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.readOutboundResourceGroup = function (id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceGroup(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary OutboundResourceInGroup item
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.readOutboundResourceInGroup = function (group_id, id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceInGroup(group_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of OutboundResourceGroup
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.searchOutboundResourceGroup = function (page, size, q, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceGroup(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of OutboundResourceInGroup
         * @param {string} group_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.searchOutboundResourceInGroup = function (group_id, page, size, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update OutboundResourceGroup
         * @param {string} id
         * @param {EngineUpdateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.updateOutboundResourceGroup = function (id, body, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceGroup(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceGroupServiceApi
         */
        OutboundResourceGroupServiceApi.prototype.updateOutboundResourceInGroup = function (group_id, id, body, options) {
            return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceInGroup(group_id, id, body, options)(this.axios, this.basePath);
        };
        return OutboundResourceGroupServiceApi;
    }(BaseAPI));
    /**
     * OutboundResourceServiceApi - axios parameter creator
     * @export
     */
    var OutboundResourceServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create OutboundResource
             * @param {EngineCreateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResource: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResource.');
                }
                var localVarPath = "/call_center/resources";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Create CreateOutboundResourceDisplay
             * @param {string} resource_id
             * @param {EngineCreateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceDisplay: function (resource_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'resource_id' is not null or undefined
                if (resource_id === null || resource_id === undefined) {
                    throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling createOutboundResourceDisplay.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceDisplay.');
                }
                var localVarPath = "/call_center/resources/{resource_id}/display".replace("{" + 'resource_id' + "}", encodeURIComponent(String(resource_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove OutboundResource
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResource: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResource.');
                }
                var localVarPath = "/call_center/resources/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'resource_id' is not null or undefined
                if (resource_id === null || resource_id === undefined) {
                    throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling deleteOutboundResourceDisplay.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.');
                }
                var localVarPath = "/call_center/resources/{resource_id}/display/{id}"
                    .replace("{" + 'resource_id' + "}", encodeURIComponent(String(resource_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Patch OutboundResource
             * @param {string} id
             * @param {EnginePatchOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchOutboundResource: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchOutboundResource.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchOutboundResource.');
                }
                var localVarPath = "/call_center/resources/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary OutboundResource item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResource: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResource.');
                }
                var localVarPath = "/call_center/resources/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ResourceDisplay item
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'resource_id' is not null or undefined
                if (resource_id === null || resource_id === undefined) {
                    throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling readOutboundResourceDisplay.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceDisplay.');
                }
                var localVarPath = "/call_center/resources/{resource_id}/display/{id}"
                    .replace("{" + 'resource_id' + "}", encodeURIComponent(String(resource_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of OutboundResource
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResource: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/resources";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of ResourceDisplay
             * @param {string} resource_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceDisplay: function (resource_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'resource_id' is not null or undefined
                if (resource_id === null || resource_id === undefined) {
                    throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling searchOutboundResourceDisplay.');
                }
                var localVarPath = "/call_center/resources/{resource_id}/display".replace("{" + 'resource_id' + "}", encodeURIComponent(String(resource_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update OutboundResource
             * @param {string} id
             * @param {EngineUpdateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResource: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResource.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResource.');
                }
                var localVarPath = "/call_center/resources/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceDisplay: function (resource_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'resource_id' is not null or undefined
                if (resource_id === null || resource_id === undefined) {
                    throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling updateOutboundResourceDisplay.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceDisplay.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceDisplay.');
                }
                var localVarPath = "/call_center/resources/{resource_id}/display/{id}"
                    .replace("{" + 'resource_id' + "}", encodeURIComponent(String(resource_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * OutboundResourceServiceApi - functional programming interface
     * @export
     */
    var OutboundResourceServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create OutboundResource
             * @param {EngineCreateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResource: function (body, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResource(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Create CreateOutboundResourceDisplay
             * @param {string} resource_id
             * @param {EngineCreateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceDisplay: function (resource_id, body, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResourceDisplay(resource_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove OutboundResource
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResource: function (id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResource(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Patch OutboundResource
             * @param {string} id
             * @param {EnginePatchOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchOutboundResource: function (id, body, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).patchOutboundResource(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary OutboundResource item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResource: function (id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResource(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ResourceDisplay item
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of OutboundResource
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResource: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResource(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of ResourceDisplay
             * @param {string} resource_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceDisplay: function (resource_id, page, size, domain_id, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update OutboundResource
             * @param {string} id
             * @param {EngineUpdateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResource: function (id, body, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResource(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceDisplay: function (resource_id, id, body, options) {
                var localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResourceDisplay(resource_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * OutboundResourceServiceApi - factory interface
     * @export
     */
    var OutboundResourceServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create OutboundResource
             * @param {EngineCreateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResource: function (body, options) {
                return OutboundResourceServiceApiFp(configuration).createOutboundResource(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Create CreateOutboundResourceDisplay
             * @param {string} resource_id
             * @param {EngineCreateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createOutboundResourceDisplay: function (resource_id, body, options) {
                return OutboundResourceServiceApiFp(configuration).createOutboundResourceDisplay(resource_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove OutboundResource
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResource: function (id, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Patch OutboundResource
             * @param {string} id
             * @param {EnginePatchOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchOutboundResource: function (id, body, options) {
                return OutboundResourceServiceApiFp(configuration).patchOutboundResource(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary OutboundResource item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResource: function (id, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).readOutboundResource(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ResourceDisplay item
             * @param {string} resource_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readOutboundResourceDisplay: function (resource_id, id, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of OutboundResource
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResource: function (page, size, q, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).searchOutboundResource(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of ResourceDisplay
             * @param {string} resource_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchOutboundResourceDisplay: function (resource_id, page, size, domain_id, options) {
                return OutboundResourceServiceApiFp(configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update OutboundResource
             * @param {string} id
             * @param {EngineUpdateOutboundResourceRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResource: function (id, body, options) {
                return OutboundResourceServiceApiFp(configuration).updateOutboundResource(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Update ResourceDisplay
             * @param {string} resource_id
             * @param {string} id
             * @param {EngineUpdateOutboundResourceDisplayRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateOutboundResourceDisplay: function (resource_id, id, body, options) {
                return OutboundResourceServiceApiFp(configuration).updateOutboundResourceDisplay(resource_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * OutboundResourceServiceApi - object-oriented interface
     * @export
     * @class OutboundResourceServiceApi
     * @extends {BaseAPI}
     */
    var OutboundResourceServiceApi = /** @class */ (function (_super) {
        tslib.__extends(OutboundResourceServiceApi, _super);
        function OutboundResourceServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.createOutboundResource = function (body, options) {
            return OutboundResourceServiceApiFp(this.configuration).createOutboundResource(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Create CreateOutboundResourceDisplay
         * @param {string} resource_id
         * @param {EngineCreateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.createOutboundResourceDisplay = function (resource_id, body, options) {
            return OutboundResourceServiceApiFp(this.configuration).createOutboundResourceDisplay(resource_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove OutboundResource
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.deleteOutboundResource = function (id, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.deleteOutboundResourceDisplay = function (resource_id, id, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Patch OutboundResource
         * @param {string} id
         * @param {EnginePatchOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.patchOutboundResource = function (id, body, options) {
            return OutboundResourceServiceApiFp(this.configuration).patchOutboundResource(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary OutboundResource item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.readOutboundResource = function (id, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).readOutboundResource(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ResourceDisplay item
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.readOutboundResourceDisplay = function (resource_id, id, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of OutboundResource
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.searchOutboundResource = function (page, size, q, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).searchOutboundResource(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of ResourceDisplay
         * @param {string} resource_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.searchOutboundResourceDisplay = function (resource_id, page, size, domain_id, options) {
            return OutboundResourceServiceApiFp(this.configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update OutboundResource
         * @param {string} id
         * @param {EngineUpdateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.updateOutboundResource = function (id, body, options) {
            return OutboundResourceServiceApiFp(this.configuration).updateOutboundResource(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof OutboundResourceServiceApi
         */
        OutboundResourceServiceApi.prototype.updateOutboundResourceDisplay = function (resource_id, id, body, options) {
            return OutboundResourceServiceApiFp(this.configuration).updateOutboundResourceDisplay(resource_id, id, body, options)(this.axios, this.basePath);
        };
        return OutboundResourceServiceApi;
    }(BaseAPI));
    /**
     * QueueBucketServiceApi - axios parameter creator
     * @export
     */
    var QueueBucketServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create QueueBucket
             * @param {string} queue_id
             * @param {EngineCreateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueBucket: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueBucket.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueBucket.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/buckets".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueBucket: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueBucket.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueBucket.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/buckets/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueBucket: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueBucket.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueBucket.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/buckets/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueBucket: function (queue_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueBucket.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/buckets".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary UpdateQueueBucket
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueBucket: function (queue_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueBucket.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueBucket.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueBucket.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/buckets/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * QueueBucketServiceApi - functional programming interface
     * @export
     */
    var QueueBucketServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create QueueBucket
             * @param {string} queue_id
             * @param {EngineCreateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueBucket: function (queue_id, body, options) {
                var localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).createQueueBucket(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueBucket: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).deleteQueueBucket(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueBucket: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).readQueueBucket(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueBucket: function (queue_id, page, size, domain_id, options) {
                var localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).searchQueueBucket(queue_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary UpdateQueueBucket
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueBucket: function (queue_id, id, body, options) {
                var localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).updateQueueBucket(queue_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * QueueBucketServiceApi - factory interface
     * @export
     */
    var QueueBucketServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create QueueBucket
             * @param {string} queue_id
             * @param {EngineCreateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueBucket: function (queue_id, body, options) {
                return QueueBucketServiceApiFp(configuration).createQueueBucket(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueBucket: function (queue_id, id, domain_id, options) {
                return QueueBucketServiceApiFp(configuration).deleteQueueBucket(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueBucket: function (queue_id, id, domain_id, options) {
                return QueueBucketServiceApiFp(configuration).readQueueBucket(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueBucket: function (queue_id, page, size, domain_id, options) {
                return QueueBucketServiceApiFp(configuration).searchQueueBucket(queue_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary UpdateQueueBucket
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueBucketRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueBucket: function (queue_id, id, body, options) {
                return QueueBucketServiceApiFp(configuration).updateQueueBucket(queue_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * QueueBucketServiceApi - object-oriented interface
     * @export
     * @class QueueBucketServiceApi
     * @extends {BaseAPI}
     */
    var QueueBucketServiceApi = /** @class */ (function (_super) {
        tslib.__extends(QueueBucketServiceApi, _super);
        function QueueBucketServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create QueueBucket
         * @param {string} queue_id
         * @param {EngineCreateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueBucketServiceApi
         */
        QueueBucketServiceApi.prototype.createQueueBucket = function (queue_id, body, options) {
            return QueueBucketServiceApiFp(this.configuration).createQueueBucket(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueBucketServiceApi
         */
        QueueBucketServiceApi.prototype.deleteQueueBucket = function (queue_id, id, domain_id, options) {
            return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueBucketServiceApi
         */
        QueueBucketServiceApi.prototype.readQueueBucket = function (queue_id, id, domain_id, options) {
            return QueueBucketServiceApiFp(this.configuration).readQueueBucket(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueBucketServiceApi
         */
        QueueBucketServiceApi.prototype.searchQueueBucket = function (queue_id, page, size, domain_id, options) {
            return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary UpdateQueueBucket
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueBucketServiceApi
         */
        QueueBucketServiceApi.prototype.updateQueueBucket = function (queue_id, id, body, options) {
            return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(queue_id, id, body, options)(this.axios, this.basePath);
        };
        return QueueBucketServiceApi;
    }(BaseAPI));
    /**
     * QueueResourcesServiceApi - axios parameter creator
     * @export
     */
    var QueueResourcesServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary CreateQueueResourceGroup
             * @param {string} queue_id
             * @param {EngineCreateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueResourceGroup: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueResourceGroup.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueResourceGroup.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/resource_groups".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary DeleteQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueResourceGroup: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueResourceGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueResourceGroup.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ReadQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueResourceGroup: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueResourceGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueResourceGroup.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SearchQueueResourceGroup
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueResourceGroup: function (queue_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueResourceGroup.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/resource_groups".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary UpdateQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueResourceGroup: function (queue_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueResourceGroup.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueResourceGroup.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueResourceGroup.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * QueueResourcesServiceApi - functional programming interface
     * @export
     */
    var QueueResourcesServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary CreateQueueResourceGroup
             * @param {string} queue_id
             * @param {EngineCreateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueResourceGroup: function (queue_id, body, options) {
                var localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).createQueueResourceGroup(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary DeleteQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueResourceGroup: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ReadQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueResourceGroup: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).readQueueResourceGroup(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SearchQueueResourceGroup
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueResourceGroup: function (queue_id, page, size, domain_id, options) {
                var localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary UpdateQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueResourceGroup: function (queue_id, id, body, options) {
                var localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).updateQueueResourceGroup(queue_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * QueueResourcesServiceApi - factory interface
     * @export
     */
    var QueueResourcesServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary CreateQueueResourceGroup
             * @param {string} queue_id
             * @param {EngineCreateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueResourceGroup: function (queue_id, body, options) {
                return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary DeleteQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueResourceGroup: function (queue_id, id, domain_id, options) {
                return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ReadQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueResourceGroup: function (queue_id, id, domain_id, options) {
                return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary SearchQueueResourceGroup
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueResourceGroup: function (queue_id, page, size, domain_id, options) {
                return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary UpdateQueueResourceGroup
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueResourceGroupRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueResourceGroup: function (queue_id, id, body, options) {
                return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(queue_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * QueueResourcesServiceApi - object-oriented interface
     * @export
     * @class QueueResourcesServiceApi
     * @extends {BaseAPI}
     */
    var QueueResourcesServiceApi = /** @class */ (function (_super) {
        tslib.__extends(QueueResourcesServiceApi, _super);
        function QueueResourcesServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary CreateQueueResourceGroup
         * @param {string} queue_id
         * @param {EngineCreateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueResourcesServiceApi
         */
        QueueResourcesServiceApi.prototype.createQueueResourceGroup = function (queue_id, body, options) {
            return QueueResourcesServiceApiFp(this.configuration).createQueueResourceGroup(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary DeleteQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueResourcesServiceApi
         */
        QueueResourcesServiceApi.prototype.deleteQueueResourceGroup = function (queue_id, id, domain_id, options) {
            return QueueResourcesServiceApiFp(this.configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ReadQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueResourcesServiceApi
         */
        QueueResourcesServiceApi.prototype.readQueueResourceGroup = function (queue_id, id, domain_id, options) {
            return QueueResourcesServiceApiFp(this.configuration).readQueueResourceGroup(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SearchQueueResourceGroup
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueResourcesServiceApi
         */
        QueueResourcesServiceApi.prototype.searchQueueResourceGroup = function (queue_id, page, size, domain_id, options) {
            return QueueResourcesServiceApiFp(this.configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary UpdateQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueResourcesServiceApi
         */
        QueueResourcesServiceApi.prototype.updateQueueResourceGroup = function (queue_id, id, body, options) {
            return QueueResourcesServiceApiFp(this.configuration).updateQueueResourceGroup(queue_id, id, body, options)(this.axios, this.basePath);
        };
        return QueueResourcesServiceApi;
    }(BaseAPI));
    /**
     * QueueRoutingServiceApi - axios parameter creator
     * @export
     */
    var QueueRoutingServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary CreateQueueRouting
             * @param {string} queue_id
             * @param {EngineCreateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueRouting: function (queue_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueRouting.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueRouting.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/routings".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueRouting: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueRouting.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueRouting.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/routings/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueRouting: function (queue_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueRouting.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueRouting.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/routings/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueRouting: function (queue_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueRouting.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/routings".replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary UpdateQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueRouting: function (queue_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'queue_id' is not null or undefined
                if (queue_id === null || queue_id === undefined) {
                    throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueRouting.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueRouting.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueRouting.');
                }
                var localVarPath = "/call_center/queues/{queue_id}/routings/{id}"
                    .replace("{" + 'queue_id' + "}", encodeURIComponent(String(queue_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * QueueRoutingServiceApi - functional programming interface
     * @export
     */
    var QueueRoutingServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary CreateQueueRouting
             * @param {string} queue_id
             * @param {EngineCreateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueRouting: function (queue_id, body, options) {
                var localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).createQueueRouting(queue_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueRouting: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).deleteQueueRouting(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueRouting: function (queue_id, id, domain_id, options) {
                var localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).readQueueRouting(queue_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueRouting: function (queue_id, page, size, domain_id, options) {
                var localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).searchQueueRouting(queue_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary UpdateQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueRouting: function (queue_id, id, body, options) {
                var localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).updateQueueRouting(queue_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * QueueRoutingServiceApi - factory interface
     * @export
     */
    var QueueRoutingServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary CreateQueueRouting
             * @param {string} queue_id
             * @param {EngineCreateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueueRouting: function (queue_id, body, options) {
                return QueueRoutingServiceApiFp(configuration).createQueueRouting(queue_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary DeleteQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueueRouting: function (queue_id, id, domain_id, options) {
                return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ReadQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueueRouting: function (queue_id, id, domain_id, options) {
                return QueueRoutingServiceApiFp(configuration).readQueueRouting(queue_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary SearchQueueRouting
             * @param {string} queue_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueueRouting: function (queue_id, page, size, domain_id, options) {
                return QueueRoutingServiceApiFp(configuration).searchQueueRouting(queue_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary UpdateQueueRouting
             * @param {string} queue_id
             * @param {string} id
             * @param {EngineUpdateQueueRoutingRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueueRouting: function (queue_id, id, body, options) {
                return QueueRoutingServiceApiFp(configuration).updateQueueRouting(queue_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * QueueRoutingServiceApi - object-oriented interface
     * @export
     * @class QueueRoutingServiceApi
     * @extends {BaseAPI}
     */
    var QueueRoutingServiceApi = /** @class */ (function (_super) {
        tslib.__extends(QueueRoutingServiceApi, _super);
        function QueueRoutingServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary CreateQueueRouting
         * @param {string} queue_id
         * @param {EngineCreateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueRoutingServiceApi
         */
        QueueRoutingServiceApi.prototype.createQueueRouting = function (queue_id, body, options) {
            return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(queue_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueRoutingServiceApi
         */
        QueueRoutingServiceApi.prototype.deleteQueueRouting = function (queue_id, id, domain_id, options) {
            return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueRoutingServiceApi
         */
        QueueRoutingServiceApi.prototype.readQueueRouting = function (queue_id, id, domain_id, options) {
            return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(queue_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueRoutingServiceApi
         */
        QueueRoutingServiceApi.prototype.searchQueueRouting = function (queue_id, page, size, domain_id, options) {
            return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary UpdateQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueRoutingServiceApi
         */
        QueueRoutingServiceApi.prototype.updateQueueRouting = function (queue_id, id, body, options) {
            return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(queue_id, id, body, options)(this.axios, this.basePath);
        };
        return QueueRoutingServiceApi;
    }(BaseAPI));
    /**
     * QueueServiceApi - axios parameter creator
     * @export
     */
    var QueueServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create Queue
             * @param {EngineCreateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueue: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueue.');
                }
                var localVarPath = "/call_center/queues";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove Queue
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueue: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueue.');
                }
                var localVarPath = "/call_center/queues/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Patch Queue
             * @param {string} id
             * @param {EnginePatchQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchQueue: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchQueue.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchQueue.');
                }
                var localVarPath = "/call_center/queues/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Queue item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueue: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueue.');
                }
                var localVarPath = "/call_center/queues/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Queue
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueue: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/queues";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update Queue
             * @param {string} id
             * @param {EngineUpdateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueue: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueue.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueue.');
                }
                var localVarPath = "/call_center/queues/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * QueueServiceApi - functional programming interface
     * @export
     */
    var QueueServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create Queue
             * @param {EngineCreateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueue: function (body, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).createQueue(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove Queue
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueue: function (id, domain_id, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).deleteQueue(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Patch Queue
             * @param {string} id
             * @param {EnginePatchQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchQueue: function (id, body, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).patchQueue(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Queue item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueue: function (id, domain_id, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).readQueue(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Queue
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueue: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).searchQueue(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update Queue
             * @param {string} id
             * @param {EngineUpdateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueue: function (id, body, options) {
                var localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).updateQueue(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * QueueServiceApi - factory interface
     * @export
     */
    var QueueServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create Queue
             * @param {EngineCreateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createQueue: function (body, options) {
                return QueueServiceApiFp(configuration).createQueue(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove Queue
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteQueue: function (id, domain_id, options) {
                return QueueServiceApiFp(configuration).deleteQueue(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Patch Queue
             * @param {string} id
             * @param {EnginePatchQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchQueue: function (id, body, options) {
                return QueueServiceApiFp(configuration).patchQueue(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Queue item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readQueue: function (id, domain_id, options) {
                return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Queue
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchQueue: function (page, size, q, domain_id, options) {
                return QueueServiceApiFp(configuration).searchQueue(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update Queue
             * @param {string} id
             * @param {EngineUpdateQueueRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateQueue: function (id, body, options) {
                return QueueServiceApiFp(configuration).updateQueue(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * QueueServiceApi - object-oriented interface
     * @export
     * @class QueueServiceApi
     * @extends {BaseAPI}
     */
    var QueueServiceApi = /** @class */ (function (_super) {
        tslib.__extends(QueueServiceApi, _super);
        function QueueServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.createQueue = function (body, options) {
            return QueueServiceApiFp(this.configuration).createQueue(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove Queue
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.deleteQueue = function (id, domain_id, options) {
            return QueueServiceApiFp(this.configuration).deleteQueue(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Patch Queue
         * @param {string} id
         * @param {EnginePatchQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.patchQueue = function (id, body, options) {
            return QueueServiceApiFp(this.configuration).patchQueue(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Queue item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.readQueue = function (id, domain_id, options) {
            return QueueServiceApiFp(this.configuration).readQueue(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Queue
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.searchQueue = function (page, size, q, domain_id, options) {
            return QueueServiceApiFp(this.configuration).searchQueue(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update Queue
         * @param {string} id
         * @param {EngineUpdateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof QueueServiceApi
         */
        QueueServiceApi.prototype.updateQueue = function (id, body, options) {
            return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(this.axios, this.basePath);
        };
        return QueueServiceApi;
    }(BaseAPI));
    /**
     * ResourceTeamServiceApi - axios parameter creator
     * @export
     */
    var ResourceTeamServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create ResourceTeamAgent
             * @param {string} team_id
             * @param {EngineCreateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamAgent: function (team_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createResourceTeamAgent.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createResourceTeamAgent.');
                }
                var localVarPath = "/call_center/teams/{team_id}/agents".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SKill Create ResourceTeamSkill
             * @param {string} team_id
             * @param {EngineCreateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamSkill: function (team_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createResourceTeamSkill.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createResourceTeamSkill.');
                }
                var localVarPath = "/call_center/teams/{team_id}/skills".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamAgent: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteResourceTeamAgent.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteResourceTeamAgent.');
                }
                var localVarPath = "/call_center/teams/{team_id}/agents/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamSkill: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteResourceTeamSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteResourceTeamSkill.');
                }
                var localVarPath = "/call_center/teams/{team_id}/skills/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ResourceTeamAgent item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamAgent: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readResourceTeamAgent.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readResourceTeamAgent.');
                }
                var localVarPath = "/call_center/teams/{team_id}/agents/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary ResourceTeamSkill item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamSkill: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readResourceTeamSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readResourceTeamSkill.');
                }
                var localVarPath = "/call_center/teams/{team_id}/skills/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of ResourceTeamAgent
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamAgent: function (team_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchResourceTeamAgent.');
                }
                var localVarPath = "/call_center/teams/{team_id}/agents".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of ResourceTeamSkill
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamSkill: function (team_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchResourceTeamSkill.');
                }
                var localVarPath = "/call_center/teams/{team_id}/skills".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamAgent: function (team_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateResourceTeamAgent.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateResourceTeamAgent.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateResourceTeamAgent.');
                }
                var localVarPath = "/call_center/teams/{team_id}/agents/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamSkill: function (team_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateResourceTeamSkill.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateResourceTeamSkill.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateResourceTeamSkill.');
                }
                var localVarPath = "/call_center/teams/{team_id}/skills/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * ResourceTeamServiceApi - functional programming interface
     * @export
     */
    var ResourceTeamServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create ResourceTeamAgent
             * @param {string} team_id
             * @param {EngineCreateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamAgent: function (team_id, body, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).createResourceTeamAgent(team_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SKill Create ResourceTeamSkill
             * @param {string} team_id
             * @param {EngineCreateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamSkill: function (team_id, body, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).createResourceTeamSkill(team_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamAgent: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).deleteResourceTeamAgent(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamSkill: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).deleteResourceTeamSkill(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ResourceTeamAgent item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamAgent: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).readResourceTeamAgent(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary ResourceTeamSkill item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamSkill: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).readResourceTeamSkill(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of ResourceTeamAgent
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamAgent: function (team_id, page, size, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of ResourceTeamSkill
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamSkill: function (team_id, page, size, domain_id, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamAgent: function (team_id, id, body, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).updateResourceTeamAgent(team_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamSkill: function (team_id, id, body, options) {
                var localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).updateResourceTeamSkill(team_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * ResourceTeamServiceApi - factory interface
     * @export
     */
    var ResourceTeamServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create ResourceTeamAgent
             * @param {string} team_id
             * @param {EngineCreateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamAgent: function (team_id, body, options) {
                return ResourceTeamServiceApiFp(configuration).createResourceTeamAgent(team_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary SKill Create ResourceTeamSkill
             * @param {string} team_id
             * @param {EngineCreateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createResourceTeamSkill: function (team_id, body, options) {
                return ResourceTeamServiceApiFp(configuration).createResourceTeamSkill(team_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamAgent: function (team_id, id, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).deleteResourceTeamAgent(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteResourceTeamSkill: function (team_id, id, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).deleteResourceTeamSkill(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ResourceTeamAgent item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamAgent: function (team_id, id, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).readResourceTeamAgent(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary ResourceTeamSkill item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readResourceTeamSkill: function (team_id, id, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).readResourceTeamSkill(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of ResourceTeamAgent
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamAgent: function (team_id, page, size, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of ResourceTeamSkill
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchResourceTeamSkill: function (team_id, page, size, domain_id, options) {
                return ResourceTeamServiceApiFp(configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update ResourceTeamAgent
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamAgentRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamAgent: function (team_id, id, body, options) {
                return ResourceTeamServiceApiFp(configuration).updateResourceTeamAgent(team_id, id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Update ResourceTeamSkill
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateResourceTeamSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateResourceTeamSkill: function (team_id, id, body, options) {
                return ResourceTeamServiceApiFp(configuration).updateResourceTeamSkill(team_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * ResourceTeamServiceApi - object-oriented interface
     * @export
     * @class ResourceTeamServiceApi
     * @extends {BaseAPI}
     */
    var ResourceTeamServiceApi = /** @class */ (function (_super) {
        tslib.__extends(ResourceTeamServiceApi, _super);
        function ResourceTeamServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create ResourceTeamAgent
         * @param {string} team_id
         * @param {EngineCreateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.createResourceTeamAgent = function (team_id, body, options) {
            return ResourceTeamServiceApiFp(this.configuration).createResourceTeamAgent(team_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SKill Create ResourceTeamSkill
         * @param {string} team_id
         * @param {EngineCreateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.createResourceTeamSkill = function (team_id, body, options) {
            return ResourceTeamServiceApiFp(this.configuration).createResourceTeamSkill(team_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.deleteResourceTeamAgent = function (team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamAgent(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.deleteResourceTeamSkill = function (team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamSkill(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ResourceTeamAgent item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.readResourceTeamAgent = function (team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).readResourceTeamAgent(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary ResourceTeamSkill item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.readResourceTeamSkill = function (team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).readResourceTeamSkill(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of ResourceTeamAgent
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.searchResourceTeamAgent = function (team_id, page, size, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of ResourceTeamSkill
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.searchResourceTeamSkill = function (team_id, page, size, domain_id, options) {
            return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.updateResourceTeamAgent = function (team_id, id, body, options) {
            return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamAgent(team_id, id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof ResourceTeamServiceApi
         */
        ResourceTeamServiceApi.prototype.updateResourceTeamSkill = function (team_id, id, body, options) {
            return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamSkill(team_id, id, body, options)(this.axios, this.basePath);
        };
        return ResourceTeamServiceApi;
    }(BaseAPI));
    /**
     * RoutingOutboundCallServiceApi - axios parameter creator
     * @export
     */
    var RoutingOutboundCallServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingOutboundCall
             * @param {EngineCreateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingOutboundCall: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove RoutingOutboundCall
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingOutboundCall: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Move RoutingOutboundCall
             * @param {string} from_id
             * @param {string} to_id
             * @param {EngineMovePositionRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            movePositionRoutingOutboundCall: function (from_id, to_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'from_id' is not null or undefined
                if (from_id === null || from_id === undefined) {
                    throw new RequiredError('from_id', 'Required parameter from_id was null or undefined when calling movePositionRoutingOutboundCall.');
                }
                // verify required parameter 'to_id' is not null or undefined
                if (to_id === null || to_id === undefined) {
                    throw new RequiredError('to_id', 'Required parameter to_id was null or undefined when calling movePositionRoutingOutboundCall.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls/{from_id}/to/{to_id}"
                    .replace("{" + 'from_id' + "}", encodeURIComponent(String(from_id)))
                    .replace("{" + 'to_id' + "}", encodeURIComponent(String(to_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Patch RoutingOutboundCall
             * @param {string} id
             * @param {EnginePatchRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingOutboundCall: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchRoutingOutboundCall.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary RoutingOutboundCall item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingOutboundCall: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of RoutingOutboundCall
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingOutboundCall: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/routing/outbound/calls";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update RoutingOutboundCall
             * @param {string} id
             * @param {EngineUpdateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingOutboundCall: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingOutboundCall.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingOutboundCall.');
                }
                var localVarPath = "/routing/outbound/calls/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * RoutingOutboundCallServiceApi - functional programming interface
     * @export
     */
    var RoutingOutboundCallServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingOutboundCall
             * @param {EngineCreateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingOutboundCall: function (body, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).createRoutingOutboundCall(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove RoutingOutboundCall
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingOutboundCall: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).deleteRoutingOutboundCall(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Move RoutingOutboundCall
             * @param {string} from_id
             * @param {string} to_id
             * @param {EngineMovePositionRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            movePositionRoutingOutboundCall: function (from_id, to_id, body, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Patch RoutingOutboundCall
             * @param {string} id
             * @param {EnginePatchRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingOutboundCall: function (id, body, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).patchRoutingOutboundCall(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary RoutingOutboundCall item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingOutboundCall: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).readRoutingOutboundCall(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of RoutingOutboundCall
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingOutboundCall: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).searchRoutingOutboundCall(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update RoutingOutboundCall
             * @param {string} id
             * @param {EngineUpdateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingOutboundCall: function (id, body, options) {
                var localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).updateRoutingOutboundCall(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * RoutingOutboundCallServiceApi - factory interface
     * @export
     */
    var RoutingOutboundCallServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create RoutingOutboundCall
             * @param {EngineCreateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingOutboundCall: function (body, options) {
                return RoutingOutboundCallServiceApiFp(configuration).createRoutingOutboundCall(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove RoutingOutboundCall
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingOutboundCall: function (id, domain_id, options) {
                return RoutingOutboundCallServiceApiFp(configuration).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Move RoutingOutboundCall
             * @param {string} from_id
             * @param {string} to_id
             * @param {EngineMovePositionRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            movePositionRoutingOutboundCall: function (from_id, to_id, body, options) {
                return RoutingOutboundCallServiceApiFp(configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Patch RoutingOutboundCall
             * @param {string} id
             * @param {EnginePatchRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingOutboundCall: function (id, body, options) {
                return RoutingOutboundCallServiceApiFp(configuration).patchRoutingOutboundCall(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary RoutingOutboundCall item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingOutboundCall: function (id, domain_id, options) {
                return RoutingOutboundCallServiceApiFp(configuration).readRoutingOutboundCall(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of RoutingOutboundCall
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingOutboundCall: function (page, size, q, domain_id, options) {
                return RoutingOutboundCallServiceApiFp(configuration).searchRoutingOutboundCall(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update RoutingOutboundCall
             * @param {string} id
             * @param {EngineUpdateRoutingOutboundCallRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingOutboundCall: function (id, body, options) {
                return RoutingOutboundCallServiceApiFp(configuration).updateRoutingOutboundCall(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * RoutingOutboundCallServiceApi - object-oriented interface
     * @export
     * @class RoutingOutboundCallServiceApi
     * @extends {BaseAPI}
     */
    var RoutingOutboundCallServiceApi = /** @class */ (function (_super) {
        tslib.__extends(RoutingOutboundCallServiceApi, _super);
        function RoutingOutboundCallServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.createRoutingOutboundCall = function (body, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).createRoutingOutboundCall(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove RoutingOutboundCall
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.deleteRoutingOutboundCall = function (id, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).deleteRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Move RoutingOutboundCall
         * @param {string} from_id
         * @param {string} to_id
         * @param {EngineMovePositionRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.movePositionRoutingOutboundCall = function (from_id, to_id, body, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Patch RoutingOutboundCall
         * @param {string} id
         * @param {EnginePatchRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.patchRoutingOutboundCall = function (id, body, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).patchRoutingOutboundCall(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary RoutingOutboundCall item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.readRoutingOutboundCall = function (id, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of RoutingOutboundCall
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.searchRoutingOutboundCall = function (page, size, q, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).searchRoutingOutboundCall(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update RoutingOutboundCall
         * @param {string} id
         * @param {EngineUpdateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingOutboundCallServiceApi
         */
        RoutingOutboundCallServiceApi.prototype.updateRoutingOutboundCall = function (id, body, options) {
            return RoutingOutboundCallServiceApiFp(this.configuration).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath);
        };
        return RoutingOutboundCallServiceApi;
    }(BaseAPI));
    /**
     * RoutingSchemaServiceApi - axios parameter creator
     * @export
     */
    var RoutingSchemaServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingSchema
             * @param {EngineCreateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingSchema: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingSchema.');
                }
                var localVarPath = "/routing/schema";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove RoutingSchema
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingSchema: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingSchema.');
                }
                var localVarPath = "/routing/schema/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Patch RoutingSchema
             * @param {string} id
             * @param {EnginePatchRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingSchema: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchRoutingSchema.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchRoutingSchema.');
                }
                var localVarPath = "/routing/schema/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PATCH' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary RoutingSchema item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingSchema: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingSchema.');
                }
                var localVarPath = "/routing/schema/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List RoutingSchema
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingSchema: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/routing/schema";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update RoutingSchema
             * @param {string} id
             * @param {EngineUpdateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingSchema: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingSchema.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingSchema.');
                }
                var localVarPath = "/routing/schema/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * RoutingSchemaServiceApi - functional programming interface
     * @export
     */
    var RoutingSchemaServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingSchema
             * @param {EngineCreateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingSchema: function (body, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).createRoutingSchema(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove RoutingSchema
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingSchema: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).deleteRoutingSchema(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Patch RoutingSchema
             * @param {string} id
             * @param {EnginePatchRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingSchema: function (id, body, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).patchRoutingSchema(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary RoutingSchema item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingSchema: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).readRoutingSchema(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List RoutingSchema
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingSchema: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).searchRoutingSchema(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update RoutingSchema
             * @param {string} id
             * @param {EngineUpdateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingSchema: function (id, body, options) {
                var localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).updateRoutingSchema(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * RoutingSchemaServiceApi - factory interface
     * @export
     */
    var RoutingSchemaServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create RoutingSchema
             * @param {EngineCreateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingSchema: function (body, options) {
                return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove RoutingSchema
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingSchema: function (id, domain_id, options) {
                return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Patch RoutingSchema
             * @param {string} id
             * @param {EnginePatchRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            patchRoutingSchema: function (id, body, options) {
                return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary RoutingSchema item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingSchema: function (id, domain_id, options) {
                return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List RoutingSchema
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingSchema: function (page, size, q, domain_id, options) {
                return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update RoutingSchema
             * @param {string} id
             * @param {EngineUpdateRoutingSchemaRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingSchema: function (id, body, options) {
                return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * RoutingSchemaServiceApi - object-oriented interface
     * @export
     * @class RoutingSchemaServiceApi
     * @extends {BaseAPI}
     */
    var RoutingSchemaServiceApi = /** @class */ (function (_super) {
        tslib.__extends(RoutingSchemaServiceApi, _super);
        function RoutingSchemaServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create RoutingSchema
         * @param {EngineCreateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.createRoutingSchema = function (body, options) {
            return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove RoutingSchema
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.deleteRoutingSchema = function (id, domain_id, options) {
            return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Patch RoutingSchema
         * @param {string} id
         * @param {EnginePatchRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.patchRoutingSchema = function (id, body, options) {
            return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary RoutingSchema item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.readRoutingSchema = function (id, domain_id, options) {
            return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List RoutingSchema
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.searchRoutingSchema = function (page, size, q, domain_id, options) {
            return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update RoutingSchema
         * @param {string} id
         * @param {EngineUpdateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingSchemaServiceApi
         */
        RoutingSchemaServiceApi.prototype.updateRoutingSchema = function (id, body, options) {
            return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(id, body, options)(this.axios, this.basePath);
        };
        return RoutingSchemaServiceApi;
    }(BaseAPI));
    /**
     * RoutingVariableServiceApi - axios parameter creator
     * @export
     */
    var RoutingVariableServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingVariable
             * @param {EngineCreateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingVariable: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingVariable.');
                }
                var localVarPath = "/routing/variables";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove RoutingVariable
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingVariable: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingVariable.');
                }
                var localVarPath = "/routing/variables/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary RoutingVariable item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingVariable: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingVariable.');
                }
                var localVarPath = "/routing/variables/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of RoutingVariable
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingVariable: function (page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/routing/variables";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update RoutingVariable
             * @param {string} id
             * @param {EngineUpdateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingVariable: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingVariable.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingVariable.');
                }
                var localVarPath = "/routing/variables/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * RoutingVariableServiceApi - functional programming interface
     * @export
     */
    var RoutingVariableServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create RoutingVariable
             * @param {EngineCreateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingVariable: function (body, options) {
                var localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).createRoutingVariable(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove RoutingVariable
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingVariable: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).deleteRoutingVariable(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary RoutingVariable item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingVariable: function (id, domain_id, options) {
                var localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).readRoutingVariable(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of RoutingVariable
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingVariable: function (page, size, domain_id, options) {
                var localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).searchRoutingVariable(page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update RoutingVariable
             * @param {string} id
             * @param {EngineUpdateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingVariable: function (id, body, options) {
                var localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).updateRoutingVariable(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * RoutingVariableServiceApi - factory interface
     * @export
     */
    var RoutingVariableServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create RoutingVariable
             * @param {EngineCreateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createRoutingVariable: function (body, options) {
                return RoutingVariableServiceApiFp(configuration).createRoutingVariable(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove RoutingVariable
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteRoutingVariable: function (id, domain_id, options) {
                return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary RoutingVariable item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readRoutingVariable: function (id, domain_id, options) {
                return RoutingVariableServiceApiFp(configuration).readRoutingVariable(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of RoutingVariable
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchRoutingVariable: function (page, size, domain_id, options) {
                return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update RoutingVariable
             * @param {string} id
             * @param {EngineUpdateRoutingVariableRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateRoutingVariable: function (id, body, options) {
                return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * RoutingVariableServiceApi - object-oriented interface
     * @export
     * @class RoutingVariableServiceApi
     * @extends {BaseAPI}
     */
    var RoutingVariableServiceApi = /** @class */ (function (_super) {
        tslib.__extends(RoutingVariableServiceApi, _super);
        function RoutingVariableServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingVariableServiceApi
         */
        RoutingVariableServiceApi.prototype.createRoutingVariable = function (body, options) {
            return RoutingVariableServiceApiFp(this.configuration).createRoutingVariable(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove RoutingVariable
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingVariableServiceApi
         */
        RoutingVariableServiceApi.prototype.deleteRoutingVariable = function (id, domain_id, options) {
            return RoutingVariableServiceApiFp(this.configuration).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary RoutingVariable item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingVariableServiceApi
         */
        RoutingVariableServiceApi.prototype.readRoutingVariable = function (id, domain_id, options) {
            return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of RoutingVariable
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingVariableServiceApi
         */
        RoutingVariableServiceApi.prototype.searchRoutingVariable = function (page, size, domain_id, options) {
            return RoutingVariableServiceApiFp(this.configuration).searchRoutingVariable(page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update RoutingVariable
         * @param {string} id
         * @param {EngineUpdateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RoutingVariableServiceApi
         */
        RoutingVariableServiceApi.prototype.updateRoutingVariable = function (id, body, options) {
            return RoutingVariableServiceApiFp(this.configuration).updateRoutingVariable(id, body, options)(this.axios, this.basePath);
        };
        return RoutingVariableServiceApi;
    }(BaseAPI));
    /**
     * SkillServiceApi - axios parameter creator
     * @export
     */
    var SkillServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create Skill
             * @param {EngineCreateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSkill: function (body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSkill.');
                }
                var localVarPath = "/call_center/skills";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove Skill
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSkill: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteSkill.');
                }
                var localVarPath = "/call_center/skills/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Skill item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSkill: function (id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readSkill.');
                }
                var localVarPath = "/call_center/skills/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of Skill
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSkill: function (page, size, q, domain_id, options) {
                if (options === void 0) { options = {}; }
                var localVarPath = "/call_center/skills";
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (q !== undefined) {
                    localVarQueryParameter['q'] = q;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update Skill
             * @param {string} id
             * @param {EngineUpdateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSkill: function (id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSkill.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSkill.');
                }
                var localVarPath = "/call_center/skills/{id}".replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * SkillServiceApi - functional programming interface
     * @export
     */
    var SkillServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create Skill
             * @param {EngineCreateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSkill: function (body, options) {
                var localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).createSkill(body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove Skill
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSkill: function (id, domain_id, options) {
                var localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).deleteSkill(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Skill item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSkill: function (id, domain_id, options) {
                var localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).readSkill(id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of Skill
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSkill: function (page, size, q, domain_id, options) {
                var localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).searchSkill(page, size, q, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update Skill
             * @param {string} id
             * @param {EngineUpdateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSkill: function (id, body, options) {
                var localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).updateSkill(id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * SkillServiceApi - factory interface
     * @export
     */
    var SkillServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create Skill
             * @param {EngineCreateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSkill: function (body, options) {
                return SkillServiceApiFp(configuration).createSkill(body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove Skill
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSkill: function (id, domain_id, options) {
                return SkillServiceApiFp(configuration).deleteSkill(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Skill item
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSkill: function (id, domain_id, options) {
                return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of Skill
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [q]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSkill: function (page, size, q, domain_id, options) {
                return SkillServiceApiFp(configuration).searchSkill(page, size, q, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update Skill
             * @param {string} id
             * @param {EngineUpdateSkillRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSkill: function (id, body, options) {
                return SkillServiceApiFp(configuration).updateSkill(id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * SkillServiceApi - object-oriented interface
     * @export
     * @class SkillServiceApi
     * @extends {BaseAPI}
     */
    var SkillServiceApi = /** @class */ (function (_super) {
        tslib.__extends(SkillServiceApi, _super);
        function SkillServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SkillServiceApi
         */
        SkillServiceApi.prototype.createSkill = function (body, options) {
            return SkillServiceApiFp(this.configuration).createSkill(body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove Skill
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SkillServiceApi
         */
        SkillServiceApi.prototype.deleteSkill = function (id, domain_id, options) {
            return SkillServiceApiFp(this.configuration).deleteSkill(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Skill item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SkillServiceApi
         */
        SkillServiceApi.prototype.readSkill = function (id, domain_id, options) {
            return SkillServiceApiFp(this.configuration).readSkill(id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of Skill
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SkillServiceApi
         */
        SkillServiceApi.prototype.searchSkill = function (page, size, q, domain_id, options) {
            return SkillServiceApiFp(this.configuration).searchSkill(page, size, q, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update Skill
         * @param {string} id
         * @param {EngineUpdateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SkillServiceApi
         */
        SkillServiceApi.prototype.updateSkill = function (id, body, options) {
            return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(this.axios, this.basePath);
        };
        return SkillServiceApi;
    }(BaseAPI));
    /**
     * SupervisorInTeamServiceApi - axios parameter creator
     * @export
     */
    var SupervisorInTeamServiceApiAxiosParamCreator = function (configuration) {
        return {
            /**
             *
             * @summary Create SupervisorInTeam
             * @param {string} team_id
             * @param {EngineCreateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSupervisorInTeam: function (team_id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createSupervisorInTeam.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSupervisorInTeam.');
                }
                var localVarPath = "/call_center/teams/{team_id}/supervisors".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'POST' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Remove SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSupervisorInTeam: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteSupervisorInTeam.');
                }
                var localVarPath = "/call_center/teams/{team_id}/supervisors/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'DELETE' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary SupervisorInTeam item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSupervisorInTeam: function (team_id, id, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readSupervisorInTeam.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling readSupervisorInTeam.');
                }
                var localVarPath = "/call_center/teams/{team_id}/supervisors/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary List of SupervisorInTeam
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSupervisorInTeam: function (team_id, page, size, domain_id, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.');
                }
                var localVarPath = "/call_center/teams/{team_id}/supervisors".replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'GET' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                if (page !== undefined) {
                    localVarQueryParameter['page'] = page;
                }
                if (size !== undefined) {
                    localVarQueryParameter['size'] = size;
                }
                if (domain_id !== undefined) {
                    localVarQueryParameter['domain_id'] = domain_id;
                }
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
            /**
             *
             * @summary Update SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSupervisorInTeam: function (team_id, id, body, options) {
                if (options === void 0) { options = {}; }
                // verify required parameter 'team_id' is not null or undefined
                if (team_id === null || team_id === undefined) {
                    throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.');
                }
                // verify required parameter 'id' is not null or undefined
                if (id === null || id === undefined) {
                    throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSupervisorInTeam.');
                }
                // verify required parameter 'body' is not null or undefined
                if (body === null || body === undefined) {
                    throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSupervisorInTeam.');
                }
                var localVarPath = "/call_center/teams/{team_id}/supervisors/{id}"
                    .replace("{" + 'team_id' + "}", encodeURIComponent(String(team_id)))
                    .replace("{" + 'id' + "}", encodeURIComponent(String(id)));
                var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                var baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                var localVarRequestOptions = tslib.__assign(tslib.__assign({ method: 'PUT' }, baseOptions), options);
                var localVarHeaderParameter = {};
                var localVarQueryParameter = {};
                // authentication AccessToken required
                if (configuration && configuration.apiKey) {
                    var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                        ? configuration.apiKey('X-Webitel-Access')
                        : configuration.apiKey;
                    localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarUrlObj.query = tslib.__assign(tslib.__assign(tslib.__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                delete localVarUrlObj.search;
                localVarRequestOptions.headers = tslib.__assign(tslib.__assign({}, localVarHeaderParameter), options.headers);
                localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
                return {
                    url: globalImportUrl.format(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * SupervisorInTeamServiceApi - functional programming interface
     * @export
     */
    var SupervisorInTeamServiceApiFp = function (configuration) {
        return {
            /**
             *
             * @summary Create SupervisorInTeam
             * @param {string} team_id
             * @param {EngineCreateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSupervisorInTeam: function (team_id, body, options) {
                var localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).createSupervisorInTeam(team_id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Remove SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSupervisorInTeam: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).deleteSupervisorInTeam(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary SupervisorInTeam item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSupervisorInTeam: function (team_id, id, domain_id, options) {
                var localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).readSupervisorInTeam(team_id, id, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary List of SupervisorInTeam
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSupervisorInTeam: function (team_id, page, size, domain_id, options) {
                var localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
            /**
             *
             * @summary Update SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSupervisorInTeam: function (team_id, id, body, options) {
                var localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).updateSupervisorInTeam(team_id, id, body, options);
                return function (axios, basePath) {
                    if (axios === void 0) { axios = globalAxios; }
                    if (basePath === void 0) { basePath = BASE_PATH; }
                    var axiosRequestArgs = tslib.__assign(tslib.__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            },
        };
    };
    /**
     * SupervisorInTeamServiceApi - factory interface
     * @export
     */
    var SupervisorInTeamServiceApiFactory = function (configuration, basePath, axios) {
        return {
            /**
             *
             * @summary Create SupervisorInTeam
             * @param {string} team_id
             * @param {EngineCreateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            createSupervisorInTeam: function (team_id, body, options) {
                return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(team_id, body, options)(axios, basePath);
            },
            /**
             *
             * @summary Remove SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            deleteSupervisorInTeam: function (team_id, id, domain_id, options) {
                return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary SupervisorInTeam item
             * @param {string} team_id
             * @param {string} id
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            readSupervisorInTeam: function (team_id, id, domain_id, options) {
                return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(team_id, id, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary List of SupervisorInTeam
             * @param {string} team_id
             * @param {number} [page]
             * @param {number} [size]
             * @param {string} [domain_id]
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            searchSupervisorInTeam: function (team_id, page, size, domain_id, options) {
                return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options)(axios, basePath);
            },
            /**
             *
             * @summary Update SupervisorInTeam
             * @param {string} team_id
             * @param {string} id
             * @param {EngineUpdateSupervisorInTeamRequest} body
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            updateSupervisorInTeam: function (team_id, id, body, options) {
                return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(team_id, id, body, options)(axios, basePath);
            },
        };
    };
    /**
     * SupervisorInTeamServiceApi - object-oriented interface
     * @export
     * @class SupervisorInTeamServiceApi
     * @extends {BaseAPI}
     */
    var SupervisorInTeamServiceApi = /** @class */ (function (_super) {
        tslib.__extends(SupervisorInTeamServiceApi, _super);
        function SupervisorInTeamServiceApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @summary Create SupervisorInTeam
         * @param {string} team_id
         * @param {EngineCreateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SupervisorInTeamServiceApi
         */
        SupervisorInTeamServiceApi.prototype.createSupervisorInTeam = function (team_id, body, options) {
            return SupervisorInTeamServiceApiFp(this.configuration).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Remove SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SupervisorInTeamServiceApi
         */
        SupervisorInTeamServiceApi.prototype.deleteSupervisorInTeam = function (team_id, id, domain_id, options) {
            return SupervisorInTeamServiceApiFp(this.configuration).deleteSupervisorInTeam(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary SupervisorInTeam item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SupervisorInTeamServiceApi
         */
        SupervisorInTeamServiceApi.prototype.readSupervisorInTeam = function (team_id, id, domain_id, options) {
            return SupervisorInTeamServiceApiFp(this.configuration).readSupervisorInTeam(team_id, id, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary List of SupervisorInTeam
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SupervisorInTeamServiceApi
         */
        SupervisorInTeamServiceApi.prototype.searchSupervisorInTeam = function (team_id, page, size, domain_id, options) {
            return SupervisorInTeamServiceApiFp(this.configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options)(this.axios, this.basePath);
        };
        /**
         *
         * @summary Update SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SupervisorInTeamServiceApi
         */
        SupervisorInTeamServiceApi.prototype.updateSupervisorInTeam = function (team_id, id, body, options) {
            return SupervisorInTeamServiceApiFp(this.configuration).updateSupervisorInTeam(team_id, id, body, options)(this.axios, this.basePath);
        };
        return SupervisorInTeamServiceApi;
    }(BaseAPI));

    // tslint:disable
    /**
     * Webitel engine API
     * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
     *
     * The version of the OpenAPI document: 2019.0.0
     * Contact: support@webitel.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    var Configuration = /** @class */ (function () {
        function Configuration(param) {
            if (param === void 0) { param = {}; }
            this.apiKey = param.apiKey;
            this.username = param.username;
            this.password = param.password;
            this.accessToken = param.accessToken;
            this.basePath = param.basePath;
            this.baseOptions = param.baseOptions;
        }
        return Configuration;
    }());

    // tslint:disable

    (function (CallActions) {
        CallActions["Ringing"] = "ringing";
        CallActions["Active"] = "active";
        CallActions["Bridge"] = "bridge";
        CallActions["Hold"] = "hold";
        CallActions["DTMF"] = "dtmf";
        CallActions["Voice"] = "voice";
        CallActions["Silence"] = "silence";
        CallActions["Execute"] = "execute";
        CallActions["Update"] = "update";
        CallActions["Hangup"] = "hangup";
        CallActions["PeerStream"] = "peerStream";
    })(exports.CallActions || (exports.CallActions = {}));
    (function (CallDirection) {
        CallDirection["Inbound"] = "inbound";
        CallDirection["Outbound"] = "outbound";
        CallDirection["Internal"] = "internal";
    })(exports.CallDirection || (exports.CallDirection = {}));
    var Call = /** @class */ (function () {
        function Call(client, e, peerStreams) {
            this.client = client;
            this.voice = true;
            this.createdAt = Date.now();
            this.answeredAt = 0;
            this.hangupAt = 0;
            this.peerStreams = peerStreams;
            this.id = e.id;
            this.digits = [];
            this.applications = [];
            this.nodeName = e.node_name;
            this.setState(e);
            this.setInfo(e);
        }
        Call.prototype.setActive = function (e) {
            if (!this.answeredAt) {
                this.answeredAt = Date.now();
            }
            this.setState(e);
        };
        Object.defineProperty(Call.prototype, "display", {
            get: function () {
                return this.displayNumber + " (" + this.displayName + ")";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Call.prototype, "muted", {
            get: function () {
                return this._muted;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Call.prototype, "allowInboundVideo", {
            get: function () {
                if (this.videoFlow) {
                    return this.videoFlow.indexOf('send') > -1;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Call.prototype, "allowOutboundVideo", {
            get: function () {
                if (this.videoFlow) {
                    return this.videoFlow.indexOf('recv') > -1;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Call.prototype.setInfo = function (s) {
            this.ownerCallId = s.owner_id;
            this.parentCallId = s.parent_id;
            this.destination = s.destination;
            this.direction = s.direction;
            this.fromNumber = s.from_number;
            this.fromName = s.from_name;
            this.toName = s.to_name;
            this.toNumber = s.to_number;
            this.payload = s.payload;
            if (s.gateway_id) {
                this._gatewayId = s.gateway_id;
            }
            else {
                this._gatewayId = null; // ?
            }
            if (s.video_flow) {
                this.videoFlow = s.video_flow;
            }
            else {
                this.videoFlow = null;
            }
            this.screenRequest = s.screen_request === 'true';
            this.videoRequest = s.video_request === 'true'; //
            this.setState(s);
        };
        Object.defineProperty(Call.prototype, "gatewayId", {
            get: function () {
                return this._gatewayId;
            },
            enumerable: true,
            configurable: true
        });
        Call.prototype.setState = function (s) {
            this.state = s.action;
        };
        Object.defineProperty(Call.prototype, "active", {
            get: function () {
                return this.hangupAt === 0;
            },
            enumerable: true,
            configurable: true
        });
        Call.prototype.setPeerStreams = function (streams) {
            this.peerStreams = streams;
        };
        Call.prototype.setHangup = function (s) {
            this.hangupAt = Date.now();
            this.hangupCause = s.cause;
            this.voice = false;
            this.peerStreams = null;
            this.setState(s);
        };
        Call.prototype.setVoice = function (s) {
            this.voice = true;
        };
        Call.prototype.setSilence = function (s) {
            this.voice = false;
        };
        Call.prototype.setExecute = function (s) {
            this.applications.push(s.application);
        };
        Call.prototype.addDigit = function (s) {
            this.digits.push(s.digit);
        };
        Object.defineProperty(Call.prototype, "displayNumber", {
            get: function () {
                if (this.direction === 'inbound') {
                    return this.fromNumber;
                }
                else {
                    return this.toNumber;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Call.prototype, "displayName", {
            get: function () {
                if (this.direction === 'inbound') {
                    return this.fromName;
                }
                else {
                    return this.toName;
                }
            },
            enumerable: true,
            configurable: true
        });
        /* Call control */
        Call.prototype.answer = function (req) {
            var sessionId = null;
            if (this.client.phone.hasSession(this.id)) {
                sessionId = this.id;
            }
            else if (this.client.phone.hasSession(this.parentCallId)) {
                sessionId = this.parentCallId;
            }
            if (sessionId) {
                return this.client.phone.answer(sessionId, req);
            }
            return false;
        };
        Call.prototype.hangup = function (cause) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var _cause;
                return tslib.__generator(this, function (_a) {
                    _cause = cause;
                    if (this.answeredAt === 0 && !cause) {
                        _cause =
                            this.direction === exports.CallDirection.Inbound
                                ? 'USER_BUSY'
                                : 'ORIGINATOR_CANCEL';
                    }
                    return [2 /*return*/, this.client.request('call_hangup', {
                            id: this.id,
                            node_id: this.nodeName,
                            cause: _cause,
                        })];
                });
            });
        };
        Call.prototype.toggleHold = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    if (this.state === exports.CallActions.Hold) {
                        return [2 /*return*/, this.unHold()];
                    }
                    else {
                        return [2 /*return*/, this.hold()];
                    }
                    return [2 /*return*/];
                });
            });
        };
        Call.prototype.hold = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    if (this.state === exports.CallActions.Hold) {
                        throw new Error('Call is hold');
                    }
                    return [2 /*return*/, this.client.request('call_hold', {
                            id: this.id,
                            node_id: this.nodeName,
                        })];
                });
            });
        };
        Call.prototype.unHold = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    if (this.state !== exports.CallActions.Hold) {
                        throw new Error('Call is active');
                    }
                    return [2 /*return*/, this.client.request('call_unhold', {
                            id: this.id,
                            node_id: this.nodeName,
                        })];
                });
            });
        };
        Call.prototype.sendDTMF = function (dtmf) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    return [2 /*return*/, this.client.request('call_dtmf', {
                            id: this.id,
                            node_id: this.nodeName,
                            dtmf: dtmf,
                        })];
                });
            });
        };
        Call.prototype.blindTransfer = function (destination) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    if (!this.parentCallId) {
                        throw new Error('Not allow one leg');
                    }
                    return [2 /*return*/, this.client.request('call_blind_transfer', {
                            id: this.parentCallId,
                            node_id: this.nodeName,
                            destination: destination,
                        })];
                });
            });
        };
        Call.prototype.mute = function (mute) {
            if (mute === void 0) { mute = false; }
            return tslib.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.client.request('call_mute', {
                                id: this.id,
                                node_id: this.nodeName,
                                mute: mute,
                            })];
                        case 1:
                            res = _a.sent();
                            this._muted = mute;
                            return [2 /*return*/, res];
                    }
                });
            });
        };
        Call.prototype.bridgeTo = function (call) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    return [2 /*return*/, this.client.request('call_bridge', {
                            id: this.id,
                            node_id: this.nodeName,
                            parent_id: call.id,
                            parent_node_id: call.nodeName,
                        })];
                });
            });
        };
        Call.prototype.callToUser = function (req) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    req.nodeId = this.nodeName;
                    req.parentCallId = this.id || null;
                    req.sendToCallId = this.parentCallId || null;
                    return [2 /*return*/, this.client.inviteToUser(req)];
                });
            });
        };
        return Call;
    }());

    var Log = /** @class */ (function () {
        function Log() {
        }
        Log.prototype.debug = function (msg) {
            var supportingDetails = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                supportingDetails[_i - 1] = arguments[_i];
            }
            this.emitLogMessage('debug', msg, supportingDetails);
        };
        Log.prototype.info = function (msg) {
            var supportingDetails = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                supportingDetails[_i - 1] = arguments[_i];
            }
            this.emitLogMessage('info', msg, supportingDetails);
        };
        Log.prototype.warn = function (msg) {
            var supportingDetails = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                supportingDetails[_i - 1] = arguments[_i];
            }
            this.emitLogMessage('warn', msg, supportingDetails);
        };
        Log.prototype.error = function (msg) {
            var supportingDetails = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                supportingDetails[_i - 1] = arguments[_i];
            }
            this.emitLogMessage('error', msg, supportingDetails);
        };
        Log.prototype.emitLogMessage = function (msgType, msg, supportingDetails) {
            if (supportingDetails.length > 0) {
                console[msgType].apply(console, tslib.__spreadArrays([msg], supportingDetails));
            }
            else {
                console[msgType](msg);
            }
        };
        return Log;
    }());

    var SipPhone = /** @class */ (function (_super) {
        tslib.__extends(SipPhone, _super);
        function SipPhone(instanceId) {
            var _this = _super.call(this) || this;
            _this.instanceId = instanceId;
            _this.sessionCache = new Map();
            SipClient.debug.enable('*');
            _this.log = new Log();
            _this.on('unregistered', function () {
                _this.ua.removeAllListeners();
                delete _this.ua;
                _this.sessionCache.clear();
            });
            return _this;
        }
        SipPhone.prototype.getMediaConstraints = function (req) {
            if (req.useScreen) {
                return {
                    video: false,
                    audio: false,
                    screen: true,
                };
            }
            return {
                video: req.useVideo || false,
                audio: req.useAudio || true,
            };
        };
        SipPhone.prototype.callOption = function (req) {
            return {
                sessionTimersExpires: 120,
                pcConfig: {
                    iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }],
                },
                rtcOfferConstraints: {
                    offerToReceiveAudio: req.useAudio || true,
                    offerToReceiveVideo: req.useVideo,
                },
                mediaConstraints: this.getMediaConstraints(req),
            };
        };
        SipPhone.prototype.getSession = function (id) {
            if (this.sessionCache.has(id)) {
                return this.sessionCache.get(id);
            }
            return null;
        };
        SipPhone.prototype.hasSession = function (id) {
            return this.sessionCache.has(id);
        };
        SipPhone.prototype.getPeerStream = function (id) {
            var session = this.getSession(id);
            if (session && session.sip.connection) {
                // @ts-ignore
                var streams = session.sip.connection.getRemoteStreams();
                if (streams && streams.length) {
                    return streams;
                }
            }
            return null;
        };
        SipPhone.prototype.answer = function (id, req) {
            if (this.sessionCache.has(id)) {
                var session = this.sessionCache.get(id);
                session.sip.answer(this.callOption(req));
                return true;
            }
            return false;
        };
        SipPhone.prototype.register = function (sipConf) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var socket, configuration, ua;
                var _this = this;
                return tslib.__generator(this, function (_a) {
                    socket = new SipClient.WebSocketInterface(sipConf.server);
                    configuration = {
                        realm: sipConf.realm,
                        uri: sipConf.uri,
                        authorization_user: sipConf.authorization_user,
                        ha1: sipConf.ha1,
                        user_agent: SipPhone.userAgent,
                        sockets: [socket],
                        session_timers: true,
                        // use_preloaded_route: true,
                        register_expires: 300,
                        connection_recovery_min_interval: 5,
                        connection_recovery_max_interval: 60,
                    };
                    ua = (this.ua = new SipClient.UA(configuration));
                    ua.on('connected', function (e) {
                        _this.log.error('connected', e);
                    });
                    ua.on('newRTCSession', function (e) {
                        var session = e.session;
                        var id = e.request.getHeader('X-Webitel-Uuid') || session.id;
                        var callSession = {
                            sip: session,
                            incoming: session.direction === 'incoming',
                            instance_id: e.request.getHeader('X-Webitel-Sock-Id'),
                        };
                        _this.storeSession(id, callSession);
                        session.on('peerconnection', function (peer) {
                            peer.peerconnection.addEventListener('addstream', function (evt) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                return tslib.__generator(this, function (_a) {
                                    // set remote audio stream
                                    this.emit('peerStreams', id, new Array(evt.stream));
                                    return [2 /*return*/];
                                });
                            }); });
                        });
                        session.on('ended', function () {
                            // this handler will be called for incoming calls too
                            _this.removeSession(id);
                        });
                        session.on('failed', function () {
                            // this handler will be called for incoming calls too
                            _this.removeSession(id);
                        });
                        session.on('accepted', function () {
                            // the call has answered
                            if (!_this.isOutboundCall(id)) {
                                _this.emit('peerStreams', id, _this.getPeerStream(id));
                            }
                        });
                        session.on('confirmed', function () {
                            // this handler will be called for incoming calls too
                        });
                        _this.emit('newSession', id, callSession);
                    });
                    ua.on('disconnected', function (e) {
                        _this.log.error('disconnected', e);
                        _this.emit('unregistered');
                    });
                    ua.on('registered', function (e) {
                        _this.log.error('registered', e);
                    });
                    ua.on('unregistered', function (e) {
                        _this.log.error('unregistered', e);
                        _this.emit('unregistered');
                    });
                    ua.on('registrationFailed', function (e) {
                        _this.log.error('registrationFailed', e);
                    });
                    ua.on('error', function (e) {
                        _this.emit('error', e);
                        _this.log.error('error', e);
                    });
                    ua.start();
                    return [2 /*return*/];
                });
            });
        };
        SipPhone.prototype.isOutboundCall = function (id) {
            var session = this.getSession(id);
            if (session) {
                return session.incoming && session.instance_id === this.instanceId;
            }
            return false;
        };
        SipPhone.prototype.unregister = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    if (this.ua) {
                        this.ua.unregister();
                    }
                    return [2 /*return*/];
                });
            });
        };
        Object.defineProperty(SipPhone.prototype, "allSession", {
            get: function () {
                return Array.from(this.sessionCache.values());
            },
            enumerable: true,
            configurable: true
        });
        SipPhone.prototype.removeSession = function (id) {
            if (this.sessionCache.has(id)) {
                this.sessionCache.delete(id);
                return true;
            }
            return false;
        };
        SipPhone.prototype.storeSession = function (id, session) {
            if (this.sessionCache.has(id)) {
                throw new Error('Session already store');
            }
            this.sessionCache.set(id, session);
        };
        SipPhone.userAgent = 'Webitel-Phone/0.0.1';
        return SipPhone;
    }(eeTs.EventEmitter));

    function formatWebSocketUri(host) {
        return host.replace(/^http/, 'ws');
    }

    var SOCKET_URL_SUFFIX = 'websocket';
    var Socket = /** @class */ (function (_super) {
        tslib.__extends(Socket, _super);
        function Socket(host) {
            var _this = _super.call(this) || this;
            _this.host = host;
            return _this;
        }
        Socket.prototype.connect = function (token) {
            var _this = this;
            this.socket = new WebSocket(formatWebSocketUri(this.host) + "/" + SOCKET_URL_SUFFIX + "?access_token=" + token);
            this.socket.onclose = function (e) { return _this.onClose(e.code); };
            this.socket.onmessage = function (e) { return _this.onMessage(e.data); };
            this.socket.onopen = function () { return _this.onOpen(); };
        };
        Socket.prototype.send = function (request) {
            this.socket.send(JSON.stringify(request));
            return null;
        };
        Socket.prototype.close = function (code) {
            this.socket.close(code);
            delete this.socket;
        };
        Socket.prototype.onOpen = function () {
            this.emit('open');
        };
        Socket.prototype.onClose = function (code) {
            this.emit('close', code);
        };
        Socket.prototype.onMessage = function (data) {
            var message = JSON.parse(data);
            this.emit('message', message);
        };
        return Socket;
    }(eeTs.EventEmitter));

    var WEBSOCKET_AUTHENTICATION_CHALLENGE = 'authentication_challenge';
    var WEBSOCKET_DEFAULT_DEVICE_CONFIG = 'user_default_device';
    var WEBSOCKET_MAKE_OUTBOUND_CALL = 'call_invite';
    var WEBSOCKET_MAKE_USER_CALL = 'call_user';
    var WEBSOCKET_EVENT_HELLO = 'hello';
    var WEBSOCKET_EVENT_CALL = 'call';
    var WEBSOCKET_EVENT_SIP = 'sip';
    (function (Response) {
        Response["STATUS_FAIL"] = "FAIL";
        Response["STATUS_OK"] = "OK";
    })(exports.Response || (exports.Response = {}));
    var Client = /** @class */ (function () {
        function Client(_config) {
            this._config = _config;
            this.reqSeq = 0;
            this.queueRequest = new Map();
            this.log = new Log();
            this.eventHandler = new eeTs.EventEmitter();
            this.callStore = new Map();
        }
        Client.prototype.connect = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.connectToSocket()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.disconnect = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    this.socket.close();
                    return [2 /*return*/];
                });
            });
        };
        Client.prototype.subscribeCall = function (handler, data) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.request("subscribe_call", data)];
                        case 1:
                            res = _a.sent();
                            this.eventHandler.on(WEBSOCKET_EVENT_CALL, handler);
                            return [2 /*return*/, res];
                    }
                });
            });
        };
        Client.prototype.unSubscribe = function (action, handler, data) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.request("un_subscribe_" + action, data)
                            // this.eventHandler.listeners(action)
                            // this.eventHandler.removeListener(action, handler)
                            // this.eventHandler.off(action, handler)
                        ];
                        case 1:
                            res = _a.sent();
                            // this.eventHandler.listeners(action)
                            // this.eventHandler.removeListener(action, handler)
                            // this.eventHandler.off(action, handler)
                            return [2 /*return*/, res];
                    }
                });
            });
        };
        Client.prototype.allCall = function () {
            return Array.from(this.callStore.values());
        };
        Client.prototype.callById = function (id) {
            if (this.callStore.has(id)) {
                return this.callStore.get(id);
            }
            return undefined;
        };
        Client.prototype.auth = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    return [2 /*return*/, this.request(WEBSOCKET_AUTHENTICATION_CHALLENGE, {
                            token: this._config.token,
                        })];
                });
            });
        };
        Client.prototype.sessionInfo = function () {
            return this.connectionInfo.session;
        };
        Object.defineProperty(Client.prototype, "version", {
            get: function () {
                return this.connectionInfo.server_version;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Client.prototype, "instanceId", {
            get: function () {
                return this.connectionInfo.sock_id;
            },
            enumerable: true,
            configurable: true
        });
        Client.prototype.invite = function (req) {
            return this.request(WEBSOCKET_MAKE_OUTBOUND_CALL, req);
        };
        Client.prototype.inviteToUser = function (req) {
            return this.request(WEBSOCKET_MAKE_USER_CALL, req);
        };
        Client.prototype.answer = function (id, req) {
            return this.phone.answer(id, req);
        };
        Client.prototype.request = function (action, data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.queueRequest.set(++_this.reqSeq, { resolve: resolve, reject: reject });
                _this.socket.send({
                    seq: _this.reqSeq,
                    action: action,
                    data: data,
                });
            });
        };
        Client.prototype.useWebPhone = function () {
            return this._config.registerWebDevice || false;
        };
        Client.prototype.deviceConfig = function () {
            return tslib.__awaiter(this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                    return [2 /*return*/, this.request(WEBSOCKET_DEFAULT_DEVICE_CONFIG, {})];
                });
            });
        };
        Client.prototype.onMessage = function (message) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var promise, _a;
                return tslib.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.log.debug('receive message: ', message);
                            if (!(message.seq_reply > 0)) return [3 /*break*/, 1];
                            if (this.queueRequest.has(message.seq_reply)) {
                                promise = this.queueRequest.get(message.seq_reply);
                                this.queueRequest.delete(message.seq_reply);
                                if (message.status === exports.Response.STATUS_OK) {
                                    promise.resolve(message.data);
                                }
                                else {
                                    promise.reject(message.error);
                                }
                            }
                            return [3 /*break*/, 7];
                        case 1:
                            _a = message.event;
                            switch (_a) {
                                case WEBSOCKET_EVENT_HELLO: return [3 /*break*/, 2];
                                case WEBSOCKET_EVENT_CALL: return [3 /*break*/, 4];
                                case WEBSOCKET_EVENT_SIP: return [3 /*break*/, 5];
                            }
                            return [3 /*break*/, 6];
                        case 2: return [4 /*yield*/, this.connected(message.data)];
                        case 3:
                            _b.sent();
                            this.log.debug("opened session " + this.connectionInfo.sock_id + " for userId=" + this.connectionInfo.session.user_id);
                            return [3 /*break*/, 7];
                        case 4:
                            this.handleCallEvents(message.data.call);
                            return [3 /*break*/, 7];
                        case 5:
                            this.eventHandler.emit(WEBSOCKET_EVENT_SIP, message.data);
                            return [3 /*break*/, 7];
                        case 6:
                            this.log.error("event " + message.event + " not handler");
                            _b.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.connected = function (info) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var conf, e_1;
                var _this = this;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.connectionInfo = info;
                            this.phone = new SipPhone(this.instanceId);
                            this.phone.on('peerStreams', function (id, streams) {
                                var call = _this.callById(id);
                                if (call && call.peerStreams === null) {
                                    call.setPeerStreams(streams);
                                    _this.eventHandler.emit(WEBSOCKET_EVENT_CALL, exports.CallActions.PeerStream, call);
                                }
                            });
                            this.phone.on('newSession', this.onNewCallSession.bind(this));
                            if (!this.useWebPhone()) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.deviceConfig()];
                        case 2:
                            conf = _a.sent();
                            return [4 /*yield*/, this.phone.register(conf)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            e_1 = _a.sent();
                            // FIXME add handle error
                            this.log.error(e_1);
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.onNewCallSession = function (id, session) {
            this.checkAutoAnswer(id);
        };
        Client.prototype.checkAutoAnswer = function (id) {
            var call = this.callById(id);
            if (call && this.phone.isOutboundCall(id)) {
                call.answer({
                    useVideo: call.videoRequest,
                    useScreen: call.screenRequest,
                });
            }
        };
        Client.prototype.connectToSocket = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                try {
                    _this.socket = new Socket(_this._config.endpoint);
                    _this.socket.connect(_this._config.token);
                }
                catch (e) {
                    reject(e);
                    return;
                }
                _this.socket.on('message', _this.onMessage.bind(_this));
                _this.socket.on('close', function (code) {
                    _this.log.error('socket close code: ', code);
                    reject(new Error("close socket code: " + code));
                });
                _this.socket.on('open', function () {
                    resolve(null);
                });
            });
        };
        Client.prototype.handleCallEvents = function (event) {
            var call;
            switch (event.action) {
                case exports.CallActions.Ringing:
                    call = new Call(this, event, this.phone.getPeerStream(event.id));
                    this.callStore.set(call.id, call);
                    this.checkAutoAnswer(event.id);
                    break;
                case exports.CallActions.Active:
                    call = this.callById(event.id);
                    if (call) {
                        call.setActive(event);
                    }
                    break;
                case exports.CallActions.Bridge:
                    call = this.callById(event.id);
                    if (call) {
                        // const session = this.phone.getSession(event.id);
                        // if (session) {
                        //   debugger
                        // }
                        call.setInfo(event);
                    }
                    break;
                case exports.CallActions.Execute:
                    call = this.callById(event.id);
                    if (call) {
                        call.setExecute(event);
                    }
                    break;
                case exports.CallActions.DTMF:
                    call = this.callById(event.id);
                    if (call) {
                        call.addDigit(event);
                    }
                    break;
                case exports.CallActions.Voice:
                    call = this.callById(event.id);
                    if (call) {
                        call.setVoice(event);
                    }
                    break;
                case exports.CallActions.Silence:
                    call = this.callById(event.id);
                    if (call) {
                        call.setSilence(event);
                    }
                    break;
                case exports.CallActions.Hold:
                    call = this.callById(event.id);
                    if (call) {
                        call.setState(event);
                    }
                    break;
                case exports.CallActions.Hangup:
                    call = this.callById(event.id);
                    if (call) {
                        call.setHangup(event);
                        this.callStore.delete(call.id);
                    }
                    break;
                default:
                    throw new Error('Unhandled action');
            }
            if (call) {
                this.eventHandler.emit(WEBSOCKET_EVENT_CALL, event.action, call);
            }
        };
        return Client;
    }());

    exports.AgentServiceApiAxiosParamCreator = AgentServiceApiAxiosParamCreator;
    exports.AgentServiceApiFp = AgentServiceApiFp;
    exports.AgentServiceApiFactory = AgentServiceApiFactory;
    exports.AgentServiceApi = AgentServiceApi;
    exports.AgentSkillServiceApiAxiosParamCreator = AgentSkillServiceApiAxiosParamCreator;
    exports.AgentSkillServiceApiFp = AgentSkillServiceApiFp;
    exports.AgentSkillServiceApiFactory = AgentSkillServiceApiFactory;
    exports.AgentSkillServiceApi = AgentSkillServiceApi;
    exports.AgentTeamServiceApiAxiosParamCreator = AgentTeamServiceApiAxiosParamCreator;
    exports.AgentTeamServiceApiFp = AgentTeamServiceApiFp;
    exports.AgentTeamServiceApiFactory = AgentTeamServiceApiFactory;
    exports.AgentTeamServiceApi = AgentTeamServiceApi;
    exports.BackendProfileServiceApiAxiosParamCreator = BackendProfileServiceApiAxiosParamCreator;
    exports.BackendProfileServiceApiFp = BackendProfileServiceApiFp;
    exports.BackendProfileServiceApiFactory = BackendProfileServiceApiFactory;
    exports.BackendProfileServiceApi = BackendProfileServiceApi;
    exports.BucketServiceApiAxiosParamCreator = BucketServiceApiAxiosParamCreator;
    exports.BucketServiceApiFp = BucketServiceApiFp;
    exports.BucketServiceApiFactory = BucketServiceApiFactory;
    exports.BucketServiceApi = BucketServiceApi;
    exports.CalendarServiceApiAxiosParamCreator = CalendarServiceApiAxiosParamCreator;
    exports.CalendarServiceApiFp = CalendarServiceApiFp;
    exports.CalendarServiceApiFactory = CalendarServiceApiFactory;
    exports.CalendarServiceApi = CalendarServiceApi;
    exports.CommunicationTypeServiceApiAxiosParamCreator = CommunicationTypeServiceApiAxiosParamCreator;
    exports.CommunicationTypeServiceApiFp = CommunicationTypeServiceApiFp;
    exports.CommunicationTypeServiceApiFactory = CommunicationTypeServiceApiFactory;
    exports.CommunicationTypeServiceApi = CommunicationTypeServiceApi;
    exports.ListServiceApiAxiosParamCreator = ListServiceApiAxiosParamCreator;
    exports.ListServiceApiFp = ListServiceApiFp;
    exports.ListServiceApiFactory = ListServiceApiFactory;
    exports.ListServiceApi = ListServiceApi;
    exports.MediaFileServiceApiAxiosParamCreator = MediaFileServiceApiAxiosParamCreator;
    exports.MediaFileServiceApiFp = MediaFileServiceApiFp;
    exports.MediaFileServiceApiFactory = MediaFileServiceApiFactory;
    exports.MediaFileServiceApi = MediaFileServiceApi;
    exports.MemberServiceApiAxiosParamCreator = MemberServiceApiAxiosParamCreator;
    exports.MemberServiceApiFp = MemberServiceApiFp;
    exports.MemberServiceApiFactory = MemberServiceApiFactory;
    exports.MemberServiceApi = MemberServiceApi;
    exports.OutboundResourceGroupServiceApiAxiosParamCreator = OutboundResourceGroupServiceApiAxiosParamCreator;
    exports.OutboundResourceGroupServiceApiFp = OutboundResourceGroupServiceApiFp;
    exports.OutboundResourceGroupServiceApiFactory = OutboundResourceGroupServiceApiFactory;
    exports.OutboundResourceGroupServiceApi = OutboundResourceGroupServiceApi;
    exports.OutboundResourceServiceApiAxiosParamCreator = OutboundResourceServiceApiAxiosParamCreator;
    exports.OutboundResourceServiceApiFp = OutboundResourceServiceApiFp;
    exports.OutboundResourceServiceApiFactory = OutboundResourceServiceApiFactory;
    exports.OutboundResourceServiceApi = OutboundResourceServiceApi;
    exports.QueueBucketServiceApiAxiosParamCreator = QueueBucketServiceApiAxiosParamCreator;
    exports.QueueBucketServiceApiFp = QueueBucketServiceApiFp;
    exports.QueueBucketServiceApiFactory = QueueBucketServiceApiFactory;
    exports.QueueBucketServiceApi = QueueBucketServiceApi;
    exports.QueueResourcesServiceApiAxiosParamCreator = QueueResourcesServiceApiAxiosParamCreator;
    exports.QueueResourcesServiceApiFp = QueueResourcesServiceApiFp;
    exports.QueueResourcesServiceApiFactory = QueueResourcesServiceApiFactory;
    exports.QueueResourcesServiceApi = QueueResourcesServiceApi;
    exports.QueueRoutingServiceApiAxiosParamCreator = QueueRoutingServiceApiAxiosParamCreator;
    exports.QueueRoutingServiceApiFp = QueueRoutingServiceApiFp;
    exports.QueueRoutingServiceApiFactory = QueueRoutingServiceApiFactory;
    exports.QueueRoutingServiceApi = QueueRoutingServiceApi;
    exports.QueueServiceApiAxiosParamCreator = QueueServiceApiAxiosParamCreator;
    exports.QueueServiceApiFp = QueueServiceApiFp;
    exports.QueueServiceApiFactory = QueueServiceApiFactory;
    exports.QueueServiceApi = QueueServiceApi;
    exports.ResourceTeamServiceApiAxiosParamCreator = ResourceTeamServiceApiAxiosParamCreator;
    exports.ResourceTeamServiceApiFp = ResourceTeamServiceApiFp;
    exports.ResourceTeamServiceApiFactory = ResourceTeamServiceApiFactory;
    exports.ResourceTeamServiceApi = ResourceTeamServiceApi;
    exports.RoutingOutboundCallServiceApiAxiosParamCreator = RoutingOutboundCallServiceApiAxiosParamCreator;
    exports.RoutingOutboundCallServiceApiFp = RoutingOutboundCallServiceApiFp;
    exports.RoutingOutboundCallServiceApiFactory = RoutingOutboundCallServiceApiFactory;
    exports.RoutingOutboundCallServiceApi = RoutingOutboundCallServiceApi;
    exports.RoutingSchemaServiceApiAxiosParamCreator = RoutingSchemaServiceApiAxiosParamCreator;
    exports.RoutingSchemaServiceApiFp = RoutingSchemaServiceApiFp;
    exports.RoutingSchemaServiceApiFactory = RoutingSchemaServiceApiFactory;
    exports.RoutingSchemaServiceApi = RoutingSchemaServiceApi;
    exports.RoutingVariableServiceApiAxiosParamCreator = RoutingVariableServiceApiAxiosParamCreator;
    exports.RoutingVariableServiceApiFp = RoutingVariableServiceApiFp;
    exports.RoutingVariableServiceApiFactory = RoutingVariableServiceApiFactory;
    exports.RoutingVariableServiceApi = RoutingVariableServiceApi;
    exports.SkillServiceApiAxiosParamCreator = SkillServiceApiAxiosParamCreator;
    exports.SkillServiceApiFp = SkillServiceApiFp;
    exports.SkillServiceApiFactory = SkillServiceApiFactory;
    exports.SkillServiceApi = SkillServiceApi;
    exports.SupervisorInTeamServiceApiAxiosParamCreator = SupervisorInTeamServiceApiAxiosParamCreator;
    exports.SupervisorInTeamServiceApiFp = SupervisorInTeamServiceApiFp;
    exports.SupervisorInTeamServiceApiFactory = SupervisorInTeamServiceApiFactory;
    exports.SupervisorInTeamServiceApi = SupervisorInTeamServiceApi;
    exports.Configuration = Configuration;
    exports.Client = Client;
    exports.Call = Call;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.umd.js.map
