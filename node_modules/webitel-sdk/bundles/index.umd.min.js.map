{"version":3,"file":"index.umd.min.js","sources":["../../src/api/base.ts","../../src/api/api.ts","../../src/api/configuration.ts","../../src/socket/call.ts","../../src/socket/log.ts","../../src/socket/sip.ts","../../src/socket/socket.ts","../../src/socket/utils.ts","../../src/socket/client.ts"],"sourcesContent":["// tslint:disable\n/// <reference path=\"./custom.d.ts\" />\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration'\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios'\n\nexport const BASE_PATH = 'http://dev.webitel.com'.replace(/\\/+$/, '')\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n}\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string\n  options: any\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n      this.basePath = configuration.basePath || this.basePath\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError'\n  constructor(public field: string, msg?: string) {\n    super(msg)\n  }\n}\n","// tslint:disable\n/// <reference path=\"./custom.d.ts\" />\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport * as globalImportUrl from 'url'\nimport { Configuration } from './configuration'\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios'\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  BASE_PATH,\n  COLLECTION_FORMATS,\n  RequestArgs,\n  BaseAPI,\n  RequiredError,\n} from './base'\n\n/**\n *\n * @export\n * @interface EngineAcceptOfDay\n */\nexport interface EngineAcceptOfDay {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  day?: number\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineAcceptOfDay\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  end_time_of_day?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAcceptOfDay\n   */\n  start_time_of_day?: number\n}\n/**\n *\n * @export\n * @interface EngineAgent\n */\nexport interface EngineAgent {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  last_state_change?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  state?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  state_timeout?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgent\n   */\n  status?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgent\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentInQueue\n */\nexport interface EngineAgentInQueue {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  active_member?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  count_member?: number\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineAgentInQueue\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentInQueue\n   */\n  queue?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentInQueue\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  type?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentInQueue\n   */\n  waiting_member?: number\n}\n/**\n *\n * @export\n * @interface EngineAgentInTeam\n */\nexport interface EngineAgentInTeam {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentInTeam\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentInTeam\n   */\n  team?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentSkill\n */\nexport interface EngineAgentSkill {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentSkill\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkill\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkill\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentSkillItem\n */\nexport interface EngineAgentSkillItem {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentSkillItem\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentSkillItem\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentSkillItem\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineAgentState\n */\nexport interface EngineAgentState {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  joined_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineAgentState\n   */\n  queue?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  state?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentState\n   */\n  timeout_at?: string\n}\n/**\n *\n * @export\n * @interface EngineAgentStatusRequest\n */\nexport interface EngineAgentStatusRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentStatusRequest\n   */\n  status?: string\n}\n/**\n *\n * @export\n * @interface EngineAgentTeam\n */\nexport interface EngineAgentTeam {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  strategy?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineAgentTeam\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineAgentTeam\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineBucket\n */\nexport interface EngineBucket {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineBucket\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCalendar\n */\nexport interface EngineCalendar {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineCalendar\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineCalendar\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCalendar\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCalendar\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCommunicationType\n */\nexport interface EngineCommunicationType {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationType\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineCommunicationTypeRequest\n */\nexport interface EngineCommunicationTypeRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCommunicationTypeRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentRequest\n */\nexport interface EngineCreateAgentRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateAgentRequest\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentSkillRequest\n */\nexport interface EngineCreateAgentSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  agent_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateAgentSkillRequest\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateAgentTeamRequest\n */\nexport interface EngineCreateAgentTeamRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateAgentTeamRequest\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateBucketRequest\n */\nexport interface EngineCreateBucketRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateBucketRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateCalendarRequest\n */\nexport interface EngineCreateCalendarRequest {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineCreateCalendarRequest\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineCreateCalendarRequest\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateCalendarRequest\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateCalendarRequest\n   */\n  timezone?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateListCommunicationRequest\n */\nexport interface EngineCreateListCommunicationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListCommunicationRequest\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateListRequest\n */\nexport interface EngineCreateListRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateListRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberBulkItem\n */\nexport interface EngineCreateMemberBulkItem {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  priority?: number\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateMemberBulkItem\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberBulkRequest\n */\nexport interface EngineCreateMemberBulkRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<EngineCreateMemberBulkItem>}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  items?: Array<EngineCreateMemberBulkItem>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberBulkRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateMemberRequest\n */\nexport interface EngineCreateMemberRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineCreateMemberRequest\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateMemberRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateMemberRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateMemberRequest\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateMemberRequest\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateMemberRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceDisplayRequest\n */\nexport interface EngineCreateOutboundResourceDisplayRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceDisplayRequest\n   */\n  resource_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceGroupRequest\n */\nexport interface EngineCreateOutboundResourceGroupRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineCreateOutboundResourceGroupRequest\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceInGroupRequest\n */\nexport interface EngineCreateOutboundResourceInGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  group_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceInGroupRequest\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateOutboundResourceRequest\n */\nexport interface EngineCreateOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueBucketRequest\n */\nexport interface EngineCreateQueueBucketRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueBucketRequest\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueRequest\n */\nexport interface EngineCreateQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineCreateQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueResourceGroupRequest\n */\nexport interface EngineCreateQueueResourceGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateQueueResourceGroupRequest\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateQueueRoutingRequest\n */\nexport interface EngineCreateQueueRoutingRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateQueueRoutingRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateResourceTeamAgentRequest\n */\nexport interface EngineCreateResourceTeamAgentRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamAgentRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateResourceTeamSkillRequest\n */\nexport interface EngineCreateResourceTeamSkillRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateResourceTeamSkillRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingOutboundCallRequest\n */\nexport interface EngineCreateRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingSchemaRequest\n */\nexport interface EngineCreateRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineCreateRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineCreateRoutingVariableRequest\n */\nexport interface EngineCreateRoutingVariableRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateRoutingVariableRequest\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateSkillRequest\n */\nexport interface EngineCreateSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSkillRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineCreateSupervisorInTeamRequest\n */\nexport interface EngineCreateSupervisorInTeamRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineCreateSupervisorInTeamRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineDeleteMembersRequest\n */\nexport interface EngineDeleteMembersRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineDeleteMembersRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineDeleteMembersRequest\n   */\n  ids?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineDeleteMembersRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineExceptDate\n */\nexport interface EngineExceptDate {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineExceptDate\n   */\n  date?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineExceptDate\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineExceptDate\n   */\n  name?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineExceptDate\n   */\n  repeat?: boolean\n}\n/**\n *\n * @export\n * @interface EngineList\n */\nexport interface EngineList {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineList\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineList\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineList\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineListAgent\n */\nexport interface EngineListAgent {\n  /**\n   *\n   * @type {Array<EngineAgent>}\n   * @memberof EngineListAgent\n   */\n  items?: Array<EngineAgent>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListAgent\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListAgentInQueue\n */\nexport interface EngineListAgentInQueue {\n  /**\n   *\n   * @type {Array<EngineAgentInQueue>}\n   * @memberof EngineListAgentInQueue\n   */\n  items?: Array<EngineAgentInQueue>\n}\n/**\n *\n * @export\n * @interface EngineListAgentInTeam\n */\nexport interface EngineListAgentInTeam {\n  /**\n   *\n   * @type {Array<EngineAgentInTeam>}\n   * @memberof EngineListAgentInTeam\n   */\n  items?: Array<EngineAgentInTeam>\n}\n/**\n *\n * @export\n * @interface EngineListAgentSkill\n */\nexport interface EngineListAgentSkill {\n  /**\n   *\n   * @type {Array<EngineAgentSkillItem>}\n   * @memberof EngineListAgentSkill\n   */\n  items?: Array<EngineAgentSkillItem>\n}\n/**\n *\n * @export\n * @interface EngineListAgentStateHistory\n */\nexport interface EngineListAgentStateHistory {\n  /**\n   *\n   * @type {Array<EngineAgentState>}\n   * @memberof EngineListAgentStateHistory\n   */\n  items?: Array<EngineAgentState>\n}\n/**\n *\n * @export\n * @interface EngineListAgentTeam\n */\nexport interface EngineListAgentTeam {\n  /**\n   *\n   * @type {Array<EngineAgentTeam>}\n   * @memberof EngineListAgentTeam\n   */\n  items?: Array<EngineAgentTeam>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListAgentTeam\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListBucket\n */\nexport interface EngineListBucket {\n  /**\n   *\n   * @type {Array<EngineBucket>}\n   * @memberof EngineListBucket\n   */\n  items?: Array<EngineBucket>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListBucket\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListCalendar\n */\nexport interface EngineListCalendar {\n  /**\n   *\n   * @type {Array<EngineCalendar>}\n   * @memberof EngineListCalendar\n   */\n  items?: Array<EngineCalendar>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListCalendar\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListCommunication\n */\nexport interface EngineListCommunication {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineListCommunication\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineListCommunicationType\n */\nexport interface EngineListCommunicationType {\n  /**\n   *\n   * @type {Array<EngineCommunicationType>}\n   * @memberof EngineListCommunicationType\n   */\n  items?: Array<EngineCommunicationType>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListCommunicationType\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListMember\n */\nexport interface EngineListMember {\n  /**\n   *\n   * @type {Array<EngineMember>}\n   * @memberof EngineListMember\n   */\n  items?: Array<EngineMember>\n}\n/**\n *\n * @export\n * @interface EngineListMemberAttempt\n */\nexport interface EngineListMemberAttempt {\n  /**\n   *\n   * @type {Array<EngineMemberAttempt>}\n   * @memberof EngineListMemberAttempt\n   */\n  items?: Array<EngineMemberAttempt>\n}\n/**\n *\n * @export\n * @interface EngineListOfList\n */\nexport interface EngineListOfList {\n  /**\n   *\n   * @type {Array<EngineList>}\n   * @memberof EngineListOfList\n   */\n  items?: Array<EngineList>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOfList\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOfListCommunication\n */\nexport interface EngineListOfListCommunication {\n  /**\n   *\n   * @type {Array<EngineListCommunication>}\n   * @memberof EngineListOfListCommunication\n   */\n  items?: Array<EngineListCommunication>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOfListCommunication\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResource\n */\nexport interface EngineListOutboundResource {\n  /**\n   *\n   * @type {Array<EngineOutboundResource>}\n   * @memberof EngineListOutboundResource\n   */\n  items?: Array<EngineOutboundResource>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOutboundResource\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceDisplay\n */\nexport interface EngineListOutboundResourceDisplay {\n  /**\n   *\n   * @type {Array<EngineResourceDisplay>}\n   * @memberof EngineListOutboundResourceDisplay\n   */\n  items?: Array<EngineResourceDisplay>\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceGroup\n */\nexport interface EngineListOutboundResourceGroup {\n  /**\n   *\n   * @type {Array<EngineOutboundResourceViewGroup>}\n   * @memberof EngineListOutboundResourceGroup\n   */\n  items?: Array<EngineOutboundResourceViewGroup>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListOutboundResourceGroup\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListOutboundResourceInGroup\n */\nexport interface EngineListOutboundResourceInGroup {\n  /**\n   *\n   * @type {Array<EngineOutboundResourceInGroup>}\n   * @memberof EngineListOutboundResourceInGroup\n   */\n  items?: Array<EngineOutboundResourceInGroup>\n}\n/**\n *\n * @export\n * @interface EngineListQueue\n */\nexport interface EngineListQueue {\n  /**\n   *\n   * @type {Array<EngineQueue>}\n   * @memberof EngineListQueue\n   */\n  items?: Array<EngineQueue>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListQueue\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListQueueBucket\n */\nexport interface EngineListQueueBucket {\n  /**\n   *\n   * @type {Array<EngineQueueBucket>}\n   * @memberof EngineListQueueBucket\n   */\n  items?: Array<EngineQueueBucket>\n}\n/**\n *\n * @export\n * @interface EngineListQueueResourceGroup\n */\nexport interface EngineListQueueResourceGroup {\n  /**\n   *\n   * @type {Array<EngineQueueResourceGroup>}\n   * @memberof EngineListQueueResourceGroup\n   */\n  items?: Array<EngineQueueResourceGroup>\n}\n/**\n *\n * @export\n * @interface EngineListQueueRouting\n */\nexport interface EngineListQueueRouting {\n  /**\n   *\n   * @type {Array<EngineQueueRouting>}\n   * @memberof EngineListQueueRouting\n   */\n  items?: Array<EngineQueueRouting>\n}\n/**\n *\n * @export\n * @interface EngineListResourceTeamAgent\n */\nexport interface EngineListResourceTeamAgent {\n  /**\n   *\n   * @type {Array<EngineResourceTeamAgent>}\n   * @memberof EngineListResourceTeamAgent\n   */\n  items?: Array<EngineResourceTeamAgent>\n}\n/**\n *\n * @export\n * @interface EngineListResourceTeamSkill\n */\nexport interface EngineListResourceTeamSkill {\n  /**\n   *\n   * @type {Array<EngineResourceTeamSkill>}\n   * @memberof EngineListResourceTeamSkill\n   */\n  items?: Array<EngineResourceTeamSkill>\n}\n/**\n *\n * @export\n * @interface EngineListRoutingOutboundCall\n */\nexport interface EngineListRoutingOutboundCall {\n  /**\n   *\n   * @type {Array<EngineRoutingOutboundCallCompact>}\n   * @memberof EngineListRoutingOutboundCall\n   */\n  items?: Array<EngineRoutingOutboundCallCompact>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListRoutingOutboundCall\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListRoutingSchema\n */\nexport interface EngineListRoutingSchema {\n  /**\n   *\n   * @type {Array<EngineRoutingSchema>}\n   * @memberof EngineListRoutingSchema\n   */\n  items?: Array<EngineRoutingSchema>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListRoutingSchema\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListRoutingVariable\n */\nexport interface EngineListRoutingVariable {\n  /**\n   *\n   * @type {Array<EngineRoutingVariable>}\n   * @memberof EngineListRoutingVariable\n   */\n  items?: Array<EngineRoutingVariable>\n}\n/**\n *\n * @export\n * @interface EngineListSkill\n */\nexport interface EngineListSkill {\n  /**\n   *\n   * @type {Array<EngineSkill>}\n   * @memberof EngineListSkill\n   */\n  items?: Array<EngineSkill>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListSkill\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineListSupervisorInTeam\n */\nexport interface EngineListSupervisorInTeam {\n  /**\n   *\n   * @type {Array<EngineSupervisorInTeam>}\n   * @memberof EngineListSupervisorInTeam\n   */\n  items?: Array<EngineSupervisorInTeam>\n}\n/**\n *\n * @export\n * @interface EngineListTimezoneResponse\n */\nexport interface EngineListTimezoneResponse {\n  /**\n   *\n   * @type {Array<EngineTimezone>}\n   * @memberof EngineListTimezoneResponse\n   */\n  items?: Array<EngineTimezone>\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineListTimezoneResponse\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface EngineLookup\n */\nexport interface EngineLookup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineLookup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineLookup\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineMember\n */\nexport interface EngineMember {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMember\n   */\n  attempts?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMember\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunication>}\n   * @memberof EngineMember\n   */\n  communications?: Array<EngineMemberCommunication>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  created_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  last_activity_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMember\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineMember\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMember\n   */\n  stop_cause?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMember\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineMember\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineMemberAttempt\n */\nexport interface EngineMemberAttempt {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMemberAttempt\n   */\n  active?: boolean\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  answered_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  bridged_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  created_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  hangup_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  leg_a_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  leg_b_id?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineMemberAttempt\n   */\n  logs?: object\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  node?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  originate_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberAttempt\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberAttempt\n   */\n  result?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMemberAttempt\n   */\n  success?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberAttempt\n   */\n  weight?: number\n}\n/**\n *\n * @export\n * @interface EngineMemberBulkResponse\n */\nexport interface EngineMemberBulkResponse {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineMemberBulkResponse\n   */\n  ids?: Array<string>\n}\n/**\n *\n * @export\n * @interface EngineMemberCommunication\n */\nexport interface EngineMemberCommunication {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  attempts?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  last_activity_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunication\n   */\n  last_cause?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunication\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunication\n   */\n  state?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunication\n   */\n  type?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineMemberCommunicationCreateRequest\n */\nexport interface EngineMemberCommunicationCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  destination?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  resource?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineMemberCommunicationCreateRequest\n   */\n  type?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineMovePositionRoutingOutboundCallRequest\n */\nexport interface EngineMovePositionRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  from_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineMovePositionRoutingOutboundCallRequest\n   */\n  to_id?: string\n}\n/**\n *\n * @export\n * @interface EngineMovePositionRoutingOutboundCallResponse\n */\nexport interface EngineMovePositionRoutingOutboundCallResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineMovePositionRoutingOutboundCallResponse\n   */\n  success?: boolean\n}\n/**\n *\n * @export\n * @interface EngineOutboundResource\n */\nexport interface EngineOutboundResource {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineOutboundResource\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineOutboundResource\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  last_error_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  last_error_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineOutboundResource\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  rps?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResource\n   */\n  successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResource\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResource\n   */\n  updated_by?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineOutboundResource\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceGroup\n */\nexport interface EngineOutboundResourceGroup {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineOutboundResourceGroup\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceGroup\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceGroup\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceInGroup\n */\nexport interface EngineOutboundResourceInGroup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  group_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceInGroup\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceTimeRange\n */\nexport interface EngineOutboundResourceTimeRange {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResourceTimeRange\n   */\n  end_time_of_day?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineOutboundResourceTimeRange\n   */\n  start_time_of_day?: number\n}\n/**\n *\n * @export\n * @interface EngineOutboundResourceViewGroup\n */\nexport interface EngineOutboundResourceViewGroup {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineOutboundResourceViewGroup\n   */\n  strategy?: string\n}\n/**\n *\n * @export\n * @interface EnginePatchOutboundResourceRequest\n */\nexport interface EnginePatchOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EnginePatchOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EnginePatchQueueRequest\n */\nexport interface EnginePatchQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchQueueRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EnginePatchQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EnginePatchRoutingOutboundCallRequest\n */\nexport interface EnginePatchRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EnginePatchRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EnginePatchRoutingSchemaRequest\n */\nexport interface EnginePatchRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EnginePatchRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineQueue\n */\nexport interface EngineQueue {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineQueue\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineQueue\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueue\n   */\n  type?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueue\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueue\n   */\n  updated_by?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineQueue\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineQueueBucket\n */\nexport interface EngineQueueBucket {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueueBucket\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueBucket\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueueBucket\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineQueueResourceGroup\n */\nexport interface EngineQueueResourceGroup {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueResourceGroup\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineQueueResourceGroup\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineQueueRouting\n */\nexport interface EngineQueueRouting {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineQueueRouting\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineQueueRouting\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineQueueRouting\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceDisplay\n */\nexport interface EngineResourceDisplay {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceDisplay\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceDisplay\n   */\n  id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceTeamAgent\n */\nexport interface EngineResourceTeamAgent {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamAgent\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamAgent\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamAgent\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamAgent\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamAgent\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResourceTeamSkill\n */\nexport interface EngineResourceTeamSkill {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamSkill\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineResourceTeamSkill\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineResourceTeamSkill\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResourceTeamSkill\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineResponse\n */\nexport interface EngineResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineResponse\n   */\n  status?: string\n}\n/**\n *\n * @export\n * @interface EngineRoutingOutboundCall\n */\nexport interface EngineRoutingOutboundCall {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingOutboundCall\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCall\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCall\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingOutboundCallCompact\n */\nexport interface EngineRoutingOutboundCallCompact {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  position?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingOutboundCallCompact\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingSchema\n */\nexport interface EngineRoutingSchema {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingSchema\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineRoutingSchema\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineRoutingSchema\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineRoutingSchema\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineRoutingSchema\n   */\n  type?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingSchema\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineRoutingSchema\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineRoutingVariable\n */\nexport interface EngineRoutingVariable {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineRoutingVariable\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineSkill\n */\nexport interface EngineSkill {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSkill\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineSupervisorInTeam\n */\nexport interface EngineSupervisorInTeam {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineSupervisorInTeam\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineSupervisorInTeam\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineTimezone\n */\nexport interface EngineTimezone {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineTimezone\n   */\n  offset?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentRequest\n */\nexport interface EngineUpdateAgentRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateAgentRequest\n   */\n  user?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentSkillRequest\n */\nexport interface EngineUpdateAgentSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  agent_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  capacity?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateAgentSkillRequest\n   */\n  skill?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateAgentTeamRequest\n */\nexport interface EngineUpdateAgentTeamRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  busy_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  call_timeout?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  max_no_answer?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  no_answer_delay_time?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  reject_delay_time?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateAgentTeamRequest\n   */\n  wrap_up_time?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateBucketRequest\n */\nexport interface EngineUpdateBucketRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateBucketRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateCalendarRequest\n */\nexport interface EngineUpdateCalendarRequest {\n  /**\n   *\n   * @type {Array<EngineAcceptOfDay>}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  accepts?: Array<EngineAcceptOfDay>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  end_at?: string\n  /**\n   *\n   * @type {Array<EngineExceptDate>}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  excepts?: Array<EngineExceptDate>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  start_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateCalendarRequest\n   */\n  timezone?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateCommunicationTypeRequest\n */\nexport interface EngineUpdateCommunicationTypeRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  code?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateCommunicationTypeRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateListCommunicationRequest\n */\nexport interface EngineUpdateListCommunicationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  list_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListCommunicationRequest\n   */\n  number?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateListRequest\n */\nexport interface EngineUpdateListRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateListRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateMemberRequest\n */\nexport interface EngineUpdateMemberRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateMemberRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {Array<EngineMemberCommunicationCreateRequest>}\n   * @memberof EngineUpdateMemberRequest\n   */\n  communications?: Array<EngineMemberCommunicationCreateRequest>\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  expire_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  min_offering_at?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateMemberRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateMemberRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineUpdateMemberRequest\n   */\n  skills?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateMemberRequest\n   */\n  timezone?: EngineLookup\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateMemberRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceDisplayRequest\n */\nexport interface EngineUpdateOutboundResourceDisplayRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  display?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceDisplayRequest\n   */\n  resource_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceGroupRequest\n */\nexport interface EngineUpdateOutboundResourceGroupRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  communication?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {Array<EngineOutboundResourceTimeRange>}\n   * @memberof EngineUpdateOutboundResourceGroupRequest\n   */\n  time?: Array<EngineOutboundResourceTimeRange>\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceInGroupRequest\n */\nexport interface EngineUpdateOutboundResourceInGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  group_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceInGroupRequest\n   */\n  resource?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateOutboundResourceRequest\n */\nexport interface EngineUpdateOutboundResourceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  dial_string?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  error_ids?: Array<string>\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  gateway?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  limit?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  max_successively_errors?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  number?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  reserve?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  rps?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateOutboundResourceRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueBucketRequest\n */\nexport interface EngineUpdateQueueBucketRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueBucketRequest\n   */\n  ratio?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueRequest\n */\nexport interface EngineUpdateQueueRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  calendar?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  dnc_list?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateQueueRequest\n   */\n  enabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateQueueRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  schema?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  sec_locate_agent?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRequest\n   */\n  strategy?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueRequest\n   */\n  team?: EngineLookup\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  timeout?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRequest\n   */\n  type?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof EngineUpdateQueueRequest\n   */\n  variables?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueResourceGroupRequest\n */\nexport interface EngineUpdateQueueResourceGroupRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  queue_id?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateQueueResourceGroupRequest\n   */\n  resource_group?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateQueueRoutingRequest\n */\nexport interface EngineUpdateQueueRoutingRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateQueueRoutingRequest\n   */\n  queue_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateResourceTeamAgentRequest\n */\nexport interface EngineUpdateResourceTeamAgentRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamAgentRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateResourceTeamSkillRequest\n */\nexport interface EngineUpdateResourceTeamSkillRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  bucket?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  lvl?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  max_capacity?: number\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  min_capacity?: number\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  skill?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateResourceTeamSkillRequest\n   */\n  team_id?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingOutboundCallRequest\n */\nexport interface EngineUpdateRoutingOutboundCallRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  pattern?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateRoutingOutboundCallRequest\n   */\n  schema?: EngineLookup\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingSchemaRequest\n */\nexport interface EngineUpdateRoutingSchemaRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  debug?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  payload?: object\n  /**\n   *\n   * @type {object}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  schema?: object\n  /**\n   *\n   * @type {number}\n   * @memberof EngineUpdateRoutingSchemaRequest\n   */\n  type?: number\n}\n/**\n *\n * @export\n * @interface EngineUpdateRoutingVariableRequest\n */\nexport interface EngineUpdateRoutingVariableRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  key?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateRoutingVariableRequest\n   */\n  value?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateSkillRequest\n */\nexport interface EngineUpdateSkillRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSkillRequest\n   */\n  name?: string\n}\n/**\n *\n * @export\n * @interface EngineUpdateSupervisorInTeamRequest\n */\nexport interface EngineUpdateSupervisorInTeamRequest {\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  agent?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof EngineUpdateSupervisorInTeamRequest\n   */\n  team_id?: string\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.\n * @export\n * @enum {string}\n */\nexport enum ProtobufNullValue {\n  NULLVALUE = 'NULL_VALUE',\n}\n\n/**\n *\n * @export\n * @interface StorageBackendProfile\n */\nexport interface StorageBackendProfile {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageBackendProfile\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  data_count?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  data_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageBackendProfile\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {number}\n   * @memberof StorageBackendProfile\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageBackendProfile\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageBackendProfile\n   */\n  properties?: { [key: string]: string }\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  type?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageBackendProfile\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageBackendProfile\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface StorageCreateBackendProfileRequest\n */\nexport interface StorageCreateBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n  /**\n   *\n   * @type {string}\n   * @memberof StorageCreateBackendProfileRequest\n   */\n  type?: string\n}\n/**\n *\n * @export\n * @interface StorageListBackendProfile\n */\nexport interface StorageListBackendProfile {\n  /**\n   *\n   * @type {Array<StorageBackendProfile>}\n   * @memberof StorageListBackendProfile\n   */\n  items?: Array<StorageBackendProfile>\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageListBackendProfile\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface StorageListMedia\n */\nexport interface StorageListMedia {\n  /**\n   *\n   * @type {Array<StorageMediaFile>}\n   * @memberof StorageListMedia\n   */\n  items?: Array<StorageMediaFile>\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageListMedia\n   */\n  next?: boolean\n}\n/**\n *\n * @export\n * @interface StorageMediaFile\n */\nexport interface StorageMediaFile {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  created_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageMediaFile\n   */\n  created_by?: EngineLookup\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  mime_type?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  name?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageMediaFile\n   */\n  updated_at?: string\n  /**\n   *\n   * @type {EngineLookup}\n   * @memberof StorageMediaFile\n   */\n  updated_by?: EngineLookup\n}\n/**\n *\n * @export\n * @interface StoragePatchBackendProfileRequest\n */\nexport interface StoragePatchBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  fields?: Array<string>\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StoragePatchBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n}\n/**\n *\n * @export\n * @interface StorageUpdateBackendProfileRequest\n */\nexport interface StorageUpdateBackendProfileRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  description?: string\n  /**\n   *\n   * @type {boolean}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  disabled?: boolean\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  domain_id?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  expire_days?: number\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  id?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  max_size?: string\n  /**\n   *\n   * @type {string}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  name?: string\n  /**\n   *\n   * @type {number}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  priority?: number\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof StorageUpdateBackendProfileRequest\n   */\n  properties?: { [key: string]: string }\n}\n\n/**\n * AgentServiceApi - axios parameter creator\n * @export\n */\nexport const AgentServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(\n      body: EngineCreateAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/agents`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling searchAgentInQueue.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/queues`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling searchAgentInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/teams`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling searchAgentStateHistory.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/states/history`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (time_from !== undefined) {\n        localVarQueryParameter['time_from'] = time_from\n      }\n\n      if (time_to !== undefined) {\n        localVarQueryParameter['time_to'] = time_to\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(\n      id: string,\n      body: EngineUpdateAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgent.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentStatus.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentStatus.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{id}/status`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineAgentStatusRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentServiceApi - functional programming interface\n * @export\n */\nexport const AgentServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(\n      body: EngineCreateAgentRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).createAgent(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgent(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).readAgent(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgent(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentInQueue> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentInQueue(id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentInTeam> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentInTeam(id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentStateHistory> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentStateHistory(\n        agent_id,\n        page,\n        size,\n        time_from,\n        time_to,\n        domain_id,\n        options\n      )\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(\n      id: string,\n      body: EngineUpdateAgentRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgent(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResponse> {\n      const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentStatus(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentServiceApi - factory interface\n * @export\n */\nexport const AgentServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Agent\n     * @param {EngineCreateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgent(body: EngineCreateAgentRequest, options?: any) {\n      return AgentServiceApiFp(configuration).createAgent(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Agent\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgent(id: string, domain_id?: string, options?: any) {\n      return AgentServiceApiFp(configuration).deleteAgent(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Agent item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgent(id: string, domain_id?: string, options?: any) {\n      return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgent(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgent(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInQueue(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentInQueue(\n        id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentInTeam(\n      id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentInTeam(\n        id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Agent\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [time_from]\n     * @param {string} [time_to]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentStateHistory(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      time_from?: string,\n      time_to?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).searchAgentStateHistory(\n        agent_id,\n        page,\n        size,\n        time_from,\n        time_to,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Agent\n     * @param {string} id\n     * @param {EngineUpdateAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgent(id: string, body: EngineUpdateAgentRequest, options?: any) {\n      return AgentServiceApiFp(configuration).updateAgent(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Change agent status\n     * @param {string} id\n     * @param {EngineAgentStatusRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentStatus(\n      id: string,\n      body: EngineAgentStatusRequest,\n      options?: any\n    ) {\n      return AgentServiceApiFp(configuration).updateAgentStatus(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentServiceApi - object-oriented interface\n * @export\n * @class AgentServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Agent\n   * @param {EngineCreateAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public createAgent(body: EngineCreateAgentRequest, options?: any) {\n    return AgentServiceApiFp(this.configuration).createAgent(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Agent\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public deleteAgent(id: string, domain_id?: string, options?: any) {\n    return AgentServiceApiFp(this.configuration).deleteAgent(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Agent item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public readAgent(id: string, domain_id?: string, options?: any) {\n    return AgentServiceApiFp(this.configuration).readAgent(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Agent\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgent(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgent(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentInQueue(\n    id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentInQueue(\n      id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentInTeam(\n    id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentInTeam(\n      id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Agent\n   * @param {string} agent_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [time_from]\n   * @param {string} [time_to]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public searchAgentStateHistory(\n    agent_id: string,\n    page?: number,\n    size?: number,\n    time_from?: string,\n    time_to?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).searchAgentStateHistory(\n      agent_id,\n      page,\n      size,\n      time_from,\n      time_to,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Agent\n   * @param {string} id\n   * @param {EngineUpdateAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public updateAgent(\n    id: string,\n    body: EngineUpdateAgentRequest,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Change agent status\n   * @param {string} id\n   * @param {EngineAgentStatusRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentServiceApi\n   */\n  public updateAgentStatus(\n    id: string,\n    body: EngineAgentStatusRequest,\n    options?: any\n  ) {\n    return AgentServiceApiFp(this.configuration).updateAgentStatus(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * AgentSkillServiceApi - axios parameter creator\n * @export\n */\nexport const AgentSkillServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling createAgentSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling deleteAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling readAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling searchAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(\n        `{${'agent_id'}}`,\n        encodeURIComponent(String(agent_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'agent_id' is not null or undefined\n      if (agent_id === null || agent_id === undefined) {\n        throw new RequiredError(\n          'agent_id',\n          'Required parameter agent_id was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentSkill.'\n        )\n      }\n      const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`\n        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - functional programming interface\n * @export\n */\nexport const AgentSkillServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).createAgentSkill(agent_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgentSkill(agent_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).readAgentSkill(agent_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentSkill(agent_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentSkill> {\n      const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentSkill(agent_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - factory interface\n * @export\n */\nexport const AgentSkillServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentSkill\n     * @param {string} agent_id\n     * @param {EngineCreateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentSkill(\n      agent_id: string,\n      body: EngineCreateAgentSkillRequest,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).createAgentSkill(\n        agent_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(\n        agent_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary AgentSkill item\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentSkill(\n      agent_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).readAgentSkill(\n        agent_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of AgentSkill\n     * @param {string} agent_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentSkill(\n      agent_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).searchAgentSkill(\n        agent_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update AgentSkill\n     * @param {string} agent_id\n     * @param {string} id\n     * @param {EngineUpdateAgentSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentSkill(\n      agent_id: string,\n      id: string,\n      body: EngineUpdateAgentSkillRequest,\n      options?: any\n    ) {\n      return AgentSkillServiceApiFp(configuration).updateAgentSkill(\n        agent_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentSkillServiceApi - object-oriented interface\n * @export\n * @class AgentSkillServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentSkillServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create AgentSkill\n   * @param {string} agent_id\n   * @param {EngineCreateAgentSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public createAgentSkill(\n    agent_id: string,\n    body: EngineCreateAgentSkillRequest,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).createAgentSkill(\n      agent_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove AgentSkill\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public deleteAgentSkill(\n    agent_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(\n      agent_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary AgentSkill item\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public readAgentSkill(\n    agent_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).readAgentSkill(\n      agent_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of AgentSkill\n   * @param {string} agent_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public searchAgentSkill(\n    agent_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(\n      agent_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update AgentSkill\n   * @param {string} agent_id\n   * @param {string} id\n   * @param {EngineUpdateAgentSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentSkillServiceApi\n   */\n  public updateAgentSkill(\n    agent_id: string,\n    id: string,\n    body: EngineUpdateAgentSkillRequest,\n    options?: any\n  ) {\n    return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(\n      agent_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * AgentTeamServiceApi - axios parameter creator\n * @export\n */\nexport const AgentTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(\n      body: EngineCreateAgentTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateAgentTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/teams`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateAgentTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateAgentTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateAgentTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - functional programming interface\n * @export\n */\nexport const AgentTeamServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(\n      body: EngineCreateAgentTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createAgentTeam(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteAgentTeam(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readAgentTeam(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchAgentTeam(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineAgentTeam> {\n      const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateAgentTeam(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - factory interface\n * @export\n */\nexport const AgentTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create AgentTeam\n     * @param {EngineCreateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {\n      return AgentTeamServiceApiFp(configuration).createAgentTeam(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove AgentTeam\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteAgentTeam(id: string, domain_id?: string, options?: any) {\n      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary AgentTeam item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readAgentTeam(id: string, domain_id?: string, options?: any) {\n      return AgentTeamServiceApiFp(configuration).readAgentTeam(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of AgentTeam\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchAgentTeam(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return AgentTeamServiceApiFp(configuration).searchAgentTeam(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update AgentTeam\n     * @param {string} id\n     * @param {EngineUpdateAgentTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateAgentTeam(\n      id: string,\n      body: EngineUpdateAgentTeamRequest,\n      options?: any\n    ) {\n      return AgentTeamServiceApiFp(configuration).updateAgentTeam(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * AgentTeamServiceApi - object-oriented interface\n * @export\n * @class AgentTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class AgentTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create AgentTeam\n   * @param {EngineCreateAgentTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public createAgentTeam(body: EngineCreateAgentTeamRequest, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).createAgentTeam(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove AgentTeam\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public deleteAgentTeam(id: string, domain_id?: string, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary AgentTeam item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public readAgentTeam(id: string, domain_id?: string, options?: any) {\n    return AgentTeamServiceApiFp(this.configuration).readAgentTeam(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of AgentTeam\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public searchAgentTeam(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update AgentTeam\n   * @param {string} id\n   * @param {EngineUpdateAgentTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AgentTeamServiceApi\n   */\n  public updateAgentTeam(\n    id: string,\n    body: EngineUpdateAgentTeamRequest,\n    options?: any\n  ) {\n    return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * BackendProfileServiceApi - axios parameter creator\n * @export\n */\nexport const BackendProfileServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StorageCreateBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchBackendProfile.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StoragePatchBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/storage/backend_profiles`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateBackendProfile.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateBackendProfile.'\n        )\n      }\n      const localVarPath = `/storage/backend_profiles/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'StorageUpdateBackendProfileRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - functional programming interface\n * @export\n */\nexport const BackendProfileServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).createBackendProfile(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).deleteBackendProfile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).patchBackendProfile(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).readBackendProfile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageListBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).searchBackendProfile(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageBackendProfile> {\n      const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(\n        configuration\n      ).updateBackendProfile(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - factory interface\n * @export\n */\nexport const BackendProfileServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create BackendProfile\n     * @param {StorageCreateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBackendProfile(\n      body: StorageCreateBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).createBackendProfile(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove BackendProfile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBackendProfile(id: string, domain_id?: string, options?: any) {\n      return BackendProfileServiceApiFp(configuration).deleteBackendProfile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch BackendProfile\n     * @param {string} id\n     * @param {StoragePatchBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchBackendProfile(\n      id: string,\n      body: StoragePatchBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).patchBackendProfile(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary BackendProfile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBackendProfile(id: string, domain_id?: string, options?: any) {\n      return BackendProfileServiceApiFp(configuration).readBackendProfile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of BackendProfile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBackendProfile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).searchBackendProfile(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update BackendProfile\n     * @param {string} id\n     * @param {StorageUpdateBackendProfileRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBackendProfile(\n      id: string,\n      body: StorageUpdateBackendProfileRequest,\n      options?: any\n    ) {\n      return BackendProfileServiceApiFp(configuration).updateBackendProfile(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * BackendProfileServiceApi - object-oriented interface\n * @export\n * @class BackendProfileServiceApi\n * @extends {BaseAPI}\n */\nexport class BackendProfileServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create BackendProfile\n   * @param {StorageCreateBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public createBackendProfile(\n    body: StorageCreateBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).createBackendProfile(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove BackendProfile\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public deleteBackendProfile(id: string, domain_id?: string, options?: any) {\n    return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch BackendProfile\n   * @param {string} id\n   * @param {StoragePatchBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public patchBackendProfile(\n    id: string,\n    body: StoragePatchBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary BackendProfile item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public readBackendProfile(id: string, domain_id?: string, options?: any) {\n    return BackendProfileServiceApiFp(this.configuration).readBackendProfile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of BackendProfile\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public searchBackendProfile(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update BackendProfile\n   * @param {string} id\n   * @param {StorageUpdateBackendProfileRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BackendProfileServiceApi\n   */\n  public updateBackendProfile(\n    id: string,\n    body: StorageUpdateBackendProfileRequest,\n    options?: any\n  ) {\n    return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * BucketServiceApi - axios parameter creator\n * @export\n */\nexport const BucketServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(\n      body: EngineCreateBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/buckets`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(\n      id: string,\n      body: EngineUpdateBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateBucket.'\n        )\n      }\n      const localVarPath = `/call_center/buckets/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * BucketServiceApi - functional programming interface\n * @export\n */\nexport const BucketServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(\n      body: EngineCreateBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).createBucket(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).deleteBucket(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).readBucket(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).searchBucket(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(\n      id: string,\n      body: EngineUpdateBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineBucket> {\n      const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(\n        configuration\n      ).updateBucket(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * BucketServiceApi - factory interface\n * @export\n */\nexport const BucketServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Bucket\n     * @param {EngineCreateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createBucket(body: EngineCreateBucketRequest, options?: any) {\n      return BucketServiceApiFp(configuration).createBucket(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Bucket\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteBucket(id: string, domain_id?: string, options?: any) {\n      return BucketServiceApiFp(configuration).deleteBucket(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Bucket item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readBucket(id: string, domain_id?: string, options?: any) {\n      return BucketServiceApiFp(configuration).readBucket(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Bucket\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchBucket(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return BucketServiceApiFp(configuration).searchBucket(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Bucket\n     * @param {string} id\n     * @param {EngineUpdateBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateBucket(id: string, body: EngineUpdateBucketRequest, options?: any) {\n      return BucketServiceApiFp(configuration).updateBucket(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * BucketServiceApi - object-oriented interface\n * @export\n * @class BucketServiceApi\n * @extends {BaseAPI}\n */\nexport class BucketServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Bucket\n   * @param {EngineCreateBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public createBucket(body: EngineCreateBucketRequest, options?: any) {\n    return BucketServiceApiFp(this.configuration).createBucket(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Bucket\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public deleteBucket(id: string, domain_id?: string, options?: any) {\n    return BucketServiceApiFp(this.configuration).deleteBucket(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Bucket item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public readBucket(id: string, domain_id?: string, options?: any) {\n    return BucketServiceApiFp(this.configuration).readBucket(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Bucket\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public searchBucket(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return BucketServiceApiFp(this.configuration).searchBucket(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Bucket\n   * @param {string} id\n   * @param {EngineUpdateBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BucketServiceApi\n   */\n  public updateBucket(\n    id: string,\n    body: EngineUpdateBucketRequest,\n    options?: any\n  ) {\n    return BucketServiceApiFp(this.configuration).updateBucket(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * CalendarServiceApi - axios parameter creator\n * @export\n */\nexport const CalendarServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(\n      body: EngineCreateCalendarRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createCalendar.'\n        )\n      }\n      const localVarPath = `/calendars`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateCalendarRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/calendars`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(\n      page?: number,\n      size?: number,\n      q?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/calendars/timezones`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateCalendar.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateCalendar.'\n        )\n      }\n      const localVarPath = `/calendars/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateCalendarRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - functional programming interface\n * @export\n */\nexport const CalendarServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(\n      body: EngineCreateCalendarRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).createCalendar(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).deleteCalendar(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).readCalendar(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).searchCalendar(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(\n      page?: number,\n      size?: number,\n      q?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListTimezoneResponse> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).searchTimezones(page, size, q, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCalendar> {\n      const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(\n        configuration\n      ).updateCalendar(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - factory interface\n * @export\n */\nexport const CalendarServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create calendar\n     * @param {EngineCreateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCalendar(body: EngineCreateCalendarRequest, options?: any) {\n      return CalendarServiceApiFp(configuration).createCalendar(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove calendar\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCalendar(id: string, domain_id?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).deleteCalendar(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Calendar item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCalendar(id: string, domain_id?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).readCalendar(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of calendar\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCalendar(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return CalendarServiceApiFp(configuration).searchCalendar(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List timezones\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchTimezones(page?: number, size?: number, q?: string, options?: any) {\n      return CalendarServiceApiFp(configuration).searchTimezones(\n        page,\n        size,\n        q,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update calendar\n     * @param {string} id\n     * @param {EngineUpdateCalendarRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCalendar(\n      id: string,\n      body: EngineUpdateCalendarRequest,\n      options?: any\n    ) {\n      return CalendarServiceApiFp(configuration).updateCalendar(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * CalendarServiceApi - object-oriented interface\n * @export\n * @class CalendarServiceApi\n * @extends {BaseAPI}\n */\nexport class CalendarServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create calendar\n   * @param {EngineCreateCalendarRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public createCalendar(body: EngineCreateCalendarRequest, options?: any) {\n    return CalendarServiceApiFp(this.configuration).createCalendar(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove calendar\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public deleteCalendar(id: string, domain_id?: string, options?: any) {\n    return CalendarServiceApiFp(this.configuration).deleteCalendar(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Calendar item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public readCalendar(id: string, domain_id?: string, options?: any) {\n    return CalendarServiceApiFp(this.configuration).readCalendar(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of calendar\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public searchCalendar(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).searchCalendar(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List timezones\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public searchTimezones(\n    page?: number,\n    size?: number,\n    q?: string,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).searchTimezones(\n      page,\n      size,\n      q,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update calendar\n   * @param {string} id\n   * @param {EngineUpdateCalendarRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CalendarServiceApi\n   */\n  public updateCalendar(\n    id: string,\n    body: EngineUpdateCalendarRequest,\n    options?: any\n  ) {\n    return CalendarServiceApiFp(this.configuration).updateCalendar(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - axios parameter creator\n * @export\n */\nexport const CommunicationTypeServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCommunicationTypeRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/communication_type`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateCommunicationType.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateCommunicationType.'\n        )\n      }\n      const localVarPath = `/call_center/communication_type/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateCommunicationTypeRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - functional programming interface\n * @export\n */\nexport const CommunicationTypeServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).createCommunicationType(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).deleteCommunicationType(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).readCommunicationType(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).searchCommunicationType(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineCommunicationType> {\n      const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(\n        configuration\n      ).updateCommunicationType(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - factory interface\n * @export\n */\nexport const CommunicationTypeServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create CommunicationType\n     * @param {EngineCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCommunicationType(\n      body: EngineCommunicationTypeRequest,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).createCommunicationType(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove CommunicationType\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCommunicationType(id: string, domain_id?: string, options?: any) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).deleteCommunicationType(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary CommunicationType item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readCommunicationType(id: string, domain_id?: string, options?: any) {\n      return CommunicationTypeServiceApiFp(configuration).readCommunicationType(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of CommunicationType\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchCommunicationType(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).searchCommunicationType(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update CommunicationType\n     * @param {string} id\n     * @param {EngineUpdateCommunicationTypeRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCommunicationType(\n      id: string,\n      body: EngineUpdateCommunicationTypeRequest,\n      options?: any\n    ) {\n      return CommunicationTypeServiceApiFp(\n        configuration\n      ).updateCommunicationType(id, body, options)(axios, basePath)\n    },\n  }\n}\n\n/**\n * CommunicationTypeServiceApi - object-oriented interface\n * @export\n * @class CommunicationTypeServiceApi\n * @extends {BaseAPI}\n */\nexport class CommunicationTypeServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create CommunicationType\n   * @param {EngineCommunicationTypeRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public createCommunicationType(\n    body: EngineCommunicationTypeRequest,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).createCommunicationType(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove CommunicationType\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public deleteCommunicationType(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).deleteCommunicationType(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary CommunicationType item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public readCommunicationType(id: string, domain_id?: string, options?: any) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).readCommunicationType(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of CommunicationType\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public searchCommunicationType(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).searchCommunicationType(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update CommunicationType\n   * @param {string} id\n   * @param {EngineUpdateCommunicationTypeRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CommunicationTypeServiceApi\n   */\n  public updateCommunicationType(\n    id: string,\n    body: EngineUpdateCommunicationTypeRequest,\n    options?: any\n  ) {\n    return CommunicationTypeServiceApiFp(\n      this.configuration\n    ).updateCommunicationType(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * ListServiceApi - axios parameter creator\n * @export\n */\nexport const ListServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(body: EngineCreateListRequest, options: any = {}): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createList.'\n        )\n      }\n      const localVarPath = `/call_center/list`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateListRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling createListCommunication.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication`.replace(\n        `{${'list_id'}}`,\n        encodeURIComponent(String(list_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateListCommunicationRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling deleteListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling readListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/list`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling searchListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication`.replace(\n        `{${'list_id'}}`,\n        encodeURIComponent(String(list_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(\n      id: string,\n      body: EngineUpdateListRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateList.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateList.'\n        )\n      }\n      const localVarPath = `/call_center/list/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateListRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'list_id' is not null or undefined\n      if (list_id === null || list_id === undefined) {\n        throw new RequiredError(\n          'list_id',\n          'Required parameter list_id was null or undefined when calling updateListCommunication.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateListCommunication.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateListCommunication.'\n        )\n      }\n      const localVarPath = `/call_center/list/{list_id}/communication/{id}`\n        .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateListCommunicationRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * ListServiceApi - functional programming interface\n * @export\n */\nexport const ListServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(\n      body: EngineCreateListRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).createList(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).createListCommunication(list_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).deleteList(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).deleteListCommunication(list_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).readList(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).readListCommunication(list_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOfList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).searchList(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOfListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).searchListCommunication(list_id, page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(\n      id: string,\n      body: EngineUpdateListRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineList> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).updateList(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListCommunication> {\n      const localVarAxiosArgs = ListServiceApiAxiosParamCreator(\n        configuration\n      ).updateListCommunication(list_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * ListServiceApi - factory interface\n * @export\n */\nexport const ListServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create List\n     * @param {EngineCreateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createList(body: EngineCreateListRequest, options?: any) {\n      return ListServiceApiFp(configuration).createList(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Create ListCommunication\n     * @param {string} list_id\n     * @param {EngineCreateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createListCommunication(\n      list_id: string,\n      body: EngineCreateListCommunicationRequest,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).createListCommunication(\n        list_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove list\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteList(id: string, domain_id?: string, options?: any) {\n      return ListServiceApiFp(configuration).deleteList(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).deleteListCommunication(\n        list_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readList(id: string, domain_id?: string, options?: any) {\n      return ListServiceApiFp(configuration).readList(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List item\n     * @param {string} list_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readListCommunication(\n      list_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).readListCommunication(\n        list_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchList(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).searchList(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of List\n     * @param {string} list_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchListCommunication(\n      list_id: string,\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).searchListCommunication(\n        list_id,\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update list\n     * @param {string} id\n     * @param {EngineUpdateListRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateList(id: string, body: EngineUpdateListRequest, options?: any) {\n      return ListServiceApiFp(configuration).updateList(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update ListCommunication\n     * @param {string} list_id\n     * @param {string} id\n     * @param {EngineUpdateListCommunicationRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateListCommunication(\n      list_id: string,\n      id: string,\n      body: EngineUpdateListCommunicationRequest,\n      options?: any\n    ) {\n      return ListServiceApiFp(configuration).updateListCommunication(\n        list_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * ListServiceApi - object-oriented interface\n * @export\n * @class ListServiceApi\n * @extends {BaseAPI}\n */\nexport class ListServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create List\n   * @param {EngineCreateListRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public createList(body: EngineCreateListRequest, options?: any) {\n    return ListServiceApiFp(this.configuration).createList(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Create ListCommunication\n   * @param {string} list_id\n   * @param {EngineCreateListCommunicationRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public createListCommunication(\n    list_id: string,\n    body: EngineCreateListCommunicationRequest,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).createListCommunication(\n      list_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove list\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public deleteList(id: string, domain_id?: string, options?: any) {\n    return ListServiceApiFp(this.configuration).deleteList(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ListCommunication\n   * @param {string} list_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public deleteListCommunication(\n    list_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).deleteListCommunication(\n      list_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public readList(id: string, domain_id?: string, options?: any) {\n    return ListServiceApiFp(this.configuration).readList(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List item\n   * @param {string} list_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public readListCommunication(\n    list_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).readListCommunication(\n      list_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of List\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public searchList(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).searchList(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of List\n   * @param {string} list_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public searchListCommunication(\n    list_id: string,\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).searchListCommunication(\n      list_id,\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update list\n   * @param {string} id\n   * @param {EngineUpdateListRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public updateList(id: string, body: EngineUpdateListRequest, options?: any) {\n    return ListServiceApiFp(this.configuration).updateList(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update ListCommunication\n   * @param {string} list_id\n   * @param {string} id\n   * @param {EngineUpdateListCommunicationRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ListServiceApi\n   */\n  public updateListCommunication(\n    list_id: string,\n    id: string,\n    body: EngineUpdateListCommunicationRequest,\n    options?: any\n  ) {\n    return ListServiceApiFp(this.configuration).updateListCommunication(\n      list_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * MediaFileServiceApi - axios parameter creator\n * @export\n */\nexport const MediaFileServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteMediaFile.'\n        )\n      }\n      const localVarPath = `/storage/media/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readMediaFile.'\n        )\n      }\n      const localVarPath = `/storage/media/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/storage/media`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - functional programming interface\n * @export\n */\nexport const MediaFileServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageMediaFile> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMediaFile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageMediaFile> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).readMediaFile(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<StorageListMedia> {\n      const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(\n        configuration\n      ).searchMediaFile(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - factory interface\n * @export\n */\nexport const MediaFileServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Remove MediaFile\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMediaFile(id: string, domain_id?: string, options?: any) {\n      return MediaFileServiceApiFp(configuration).deleteMediaFile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary MediaFile item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMediaFile(id: string, domain_id?: string, options?: any) {\n      return MediaFileServiceApiFp(configuration).readMediaFile(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Search MediaFile\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMediaFile(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MediaFileServiceApiFp(configuration).searchMediaFile(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * MediaFileServiceApi - object-oriented interface\n * @export\n * @class MediaFileServiceApi\n * @extends {BaseAPI}\n */\nexport class MediaFileServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Remove MediaFile\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public deleteMediaFile(id: string, domain_id?: string, options?: any) {\n    return MediaFileServiceApiFp(this.configuration).deleteMediaFile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary MediaFile item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public readMediaFile(id: string, domain_id?: string, options?: any) {\n    return MediaFileServiceApiFp(this.configuration).readMediaFile(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Search MediaFile\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MediaFileServiceApi\n   */\n  public searchMediaFile(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MediaFileServiceApiFp(this.configuration).searchMediaFile(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * MemberServiceApi - axios parameter creator\n * @export\n */\nexport const MemberServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createMember.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateMemberRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createMemberBulk.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createMemberBulk.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/bulk`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateMemberBulkRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteMembers.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling deleteMembers.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineDeleteMembersRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchMemberAttempts.'\n        )\n      }\n      // verify required parameter 'member_id' is not null or undefined\n      if (member_id === null || member_id === undefined) {\n        throw new RequiredError(\n          'member_id',\n          'Required parameter member_id was null or undefined when calling searchMemberAttempts.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateMember.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateMember.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateMember.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateMemberRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * MemberServiceApi - functional programming interface\n * @export\n */\nexport const MemberServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).createMember(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMemberBulkResponse> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).createMemberBulk(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMember(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).deleteMembers(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).readMember(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).searchMember(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListMemberAttempt> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).searchMemberAttempts(queue_id, member_id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMember> {\n      const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(\n        configuration\n      ).updateMember(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * MemberServiceApi - factory interface\n * @export\n */\nexport const MemberServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMember(\n      queue_id: string,\n      body: EngineCreateMemberRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).createMember(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create Member\n     * @param {string} queue_id\n     * @param {EngineCreateMemberBulkRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createMemberBulk(\n      queue_id: string,\n      body: EngineCreateMemberBulkRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).createMemberBulk(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).deleteMember(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteMembers\n     * @param {string} queue_id\n     * @param {EngineDeleteMembersRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteMembers(\n      queue_id: string,\n      body: EngineDeleteMembersRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).deleteMembers(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readMember(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).readMember(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of Member\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMember(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).searchMember(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchMemberAttempts\n     * @param {string} queue_id\n     * @param {string} member_id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchMemberAttempts(\n      queue_id: string,\n      member_id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).searchMemberAttempts(\n        queue_id,\n        member_id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateMember\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateMemberRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateMember(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateMemberRequest,\n      options?: any\n    ) {\n      return MemberServiceApiFp(configuration).updateMember(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * MemberServiceApi - object-oriented interface\n * @export\n * @class MemberServiceApi\n * @extends {BaseAPI}\n */\nexport class MemberServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Member\n   * @param {string} queue_id\n   * @param {EngineCreateMemberRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public createMember(\n    queue_id: string,\n    body: EngineCreateMemberRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).createMember(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create Member\n   * @param {string} queue_id\n   * @param {EngineCreateMemberBulkRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public createMemberBulk(\n    queue_id: string,\n    body: EngineCreateMemberBulkRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).createMemberBulk(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteMember\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public deleteMember(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).deleteMember(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteMembers\n   * @param {string} queue_id\n   * @param {EngineDeleteMembersRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public deleteMembers(\n    queue_id: string,\n    body: EngineDeleteMembersRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).deleteMembers(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public readMember(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).readMember(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Member\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public searchMember(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).searchMember(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchMemberAttempts\n   * @param {string} queue_id\n   * @param {string} member_id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public searchMemberAttempts(\n    queue_id: string,\n    member_id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).searchMemberAttempts(\n      queue_id,\n      member_id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateMember\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateMemberRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MemberServiceApi\n   */\n  public updateMember(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateMemberRequest,\n    options?: any\n  ) {\n    return MemberServiceApiFp(this.configuration).updateMember(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - axios parameter creator\n * @export\n */\nexport const OutboundResourceGroupServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling createOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(\n        `{${'group_id'}}`,\n        encodeURIComponent(String(group_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceInGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling deleteOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling readOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/resource_group`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling searchOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(\n        `{${'group_id'}}`,\n        encodeURIComponent(String(group_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'group_id' is not null or undefined\n      if (group_id === null || group_id === undefined) {\n        throw new RequiredError(\n          'group_id',\n          'Required parameter group_id was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceInGroup.'\n        )\n      }\n      const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`\n        .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceInGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - functional programming interface\n * @export\n */\nexport const OutboundResourceGroupServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceGroup(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceInGroup(group_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceGroup(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceGroup(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceInGroup(group_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceGroup(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceGroup(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResourceInGroup> {\n      const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceInGroup(group_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - factory interface\n * @export\n */\nexport const OutboundResourceGroupServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {EngineCreateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceGroup(\n      body: EngineCreateOutboundResourceGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).createOutboundResourceGroup(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create OutboundResourceGroup\n     * @param {string} group_id\n     * @param {EngineCreateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceInGroup(\n      group_id: string,\n      body: EngineCreateOutboundResourceInGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).createOutboundResourceInGroup(group_id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceGroup\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceGroup(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).deleteOutboundResourceGroup(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary OutboundResourceGroup item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceGroup(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).readOutboundResourceGroup(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary OutboundResourceInGroup item\n     * @param {string} group_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).readOutboundResourceInGroup(group_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResourceGroup\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceGroup(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).searchOutboundResourceGroup(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceInGroup(\n      group_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update OutboundResourceGroup\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceGroup(\n      id: string,\n      body: EngineUpdateOutboundResourceGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).updateOutboundResourceGroup(id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update OutboundResourceInGroup\n     * @param {string} group_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceInGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceInGroup(\n      group_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceInGroupRequest,\n      options?: any\n    ) {\n      return OutboundResourceGroupServiceApiFp(\n        configuration\n      ).updateOutboundResourceInGroup(group_id, id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * OutboundResourceGroupServiceApi - object-oriented interface\n * @export\n * @class OutboundResourceGroupServiceApi\n * @extends {BaseAPI}\n */\nexport class OutboundResourceGroupServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create OutboundResourceGroup\n   * @param {EngineCreateOutboundResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public createOutboundResourceGroup(\n    body: EngineCreateOutboundResourceGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).createOutboundResourceGroup(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create OutboundResourceGroup\n   * @param {string} group_id\n   * @param {EngineCreateOutboundResourceInGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public createOutboundResourceInGroup(\n    group_id: string,\n    body: EngineCreateOutboundResourceInGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).createOutboundResourceInGroup(group_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResourceGroup\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public deleteOutboundResourceGroup(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceGroup(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public deleteOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary OutboundResourceGroup item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public readOutboundResourceGroup(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).readOutboundResourceGroup(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary OutboundResourceInGroup item\n   * @param {string} group_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public readOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).readOutboundResourceInGroup(group_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResourceGroup\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public searchOutboundResourceGroup(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceGroup(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public searchOutboundResourceInGroup(\n    group_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update OutboundResourceGroup\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public updateOutboundResourceGroup(\n    id: string,\n    body: EngineUpdateOutboundResourceGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceGroup(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update OutboundResourceInGroup\n   * @param {string} group_id\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceInGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceGroupServiceApi\n   */\n  public updateOutboundResourceInGroup(\n    group_id: string,\n    id: string,\n    body: EngineUpdateOutboundResourceInGroupRequest,\n    options?: any\n  ) {\n    return OutboundResourceGroupServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceInGroup(group_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * OutboundResourceServiceApi - axios parameter creator\n * @export\n */\nexport const OutboundResourceServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling createOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(\n        `{${'resource_id'}}`,\n        encodeURIComponent(String(resource_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateOutboundResourceDisplayRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling deleteOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchOutboundResource.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling readOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/resources`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling searchOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(\n        `{${'resource_id'}}`,\n        encodeURIComponent(String(resource_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResource.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResource.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'resource_id' is not null or undefined\n      if (resource_id === null || resource_id === undefined) {\n        throw new RequiredError(\n          'resource_id',\n          'Required parameter resource_id was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateOutboundResourceDisplay.'\n        )\n      }\n      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateOutboundResourceDisplayRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - functional programming interface\n * @export\n */\nexport const OutboundResourceServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResource(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).createOutboundResourceDisplay(resource_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResource(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).patchOutboundResource(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResource(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResource(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListOutboundResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).searchOutboundResourceDisplay(\n        resource_id,\n        page,\n        size,\n        domain_id,\n        options\n      )\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineOutboundResource> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResource(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceDisplay> {\n      const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(\n        configuration\n      ).updateOutboundResourceDisplay(resource_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - factory interface\n * @export\n */\nexport const OutboundResourceServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create OutboundResource\n     * @param {EngineCreateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResource(\n      body: EngineCreateOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).createOutboundResource(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Create CreateOutboundResourceDisplay\n     * @param {string} resource_id\n     * @param {EngineCreateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOutboundResourceDisplay(\n      resource_id: string,\n      body: EngineCreateOutboundResourceDisplayRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).createOutboundResourceDisplay(resource_id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove OutboundResource\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResource(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Patch OutboundResource\n     * @param {string} id\n     * @param {EnginePatchOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchOutboundResource(\n      id: string,\n      body: EnginePatchOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).patchOutboundResource(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary OutboundResource item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResource(id: string, domain_id?: string, options?: any) {\n      return OutboundResourceServiceApiFp(configuration).readOutboundResource(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceDisplay item\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of OutboundResource\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResource(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceDisplay\n     * @param {string} resource_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchOutboundResourceDisplay(\n      resource_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).searchOutboundResourceDisplay(\n        resource_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update OutboundResource\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResource(\n      id: string,\n      body: EngineUpdateOutboundResourceRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceDisplay\n     * @param {string} resource_id\n     * @param {string} id\n     * @param {EngineUpdateOutboundResourceDisplayRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOutboundResourceDisplay(\n      resource_id: string,\n      id: string,\n      body: EngineUpdateOutboundResourceDisplayRequest,\n      options?: any\n    ) {\n      return OutboundResourceServiceApiFp(\n        configuration\n      ).updateOutboundResourceDisplay(resource_id, id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * OutboundResourceServiceApi - object-oriented interface\n * @export\n * @class OutboundResourceServiceApi\n * @extends {BaseAPI}\n */\nexport class OutboundResourceServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create OutboundResource\n   * @param {EngineCreateOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public createOutboundResource(\n    body: EngineCreateOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).createOutboundResource(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Create CreateOutboundResourceDisplay\n   * @param {string} resource_id\n   * @param {EngineCreateOutboundResourceDisplayRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public createOutboundResourceDisplay(\n    resource_id: string,\n    body: EngineCreateOutboundResourceDisplayRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).createOutboundResourceDisplay(resource_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove OutboundResource\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public deleteOutboundResource(id: string, domain_id?: string, options?: any) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceDisplay\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public deleteOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Patch OutboundResource\n   * @param {string} id\n   * @param {EnginePatchOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public patchOutboundResource(\n    id: string,\n    body: EnginePatchOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).patchOutboundResource(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary OutboundResource item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public readOutboundResource(id: string, domain_id?: string, options?: any) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).readOutboundResource(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceDisplay item\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public readOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).readOutboundResourceDisplay(resource_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of OutboundResource\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public searchOutboundResource(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).searchOutboundResource(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of ResourceDisplay\n   * @param {string} resource_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public searchOutboundResourceDisplay(\n    resource_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).searchOutboundResourceDisplay(\n      resource_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update OutboundResource\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public updateOutboundResource(\n    id: string,\n    body: EngineUpdateOutboundResourceRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).updateOutboundResource(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceDisplay\n   * @param {string} resource_id\n   * @param {string} id\n   * @param {EngineUpdateOutboundResourceDisplayRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OutboundResourceServiceApi\n   */\n  public updateOutboundResourceDisplay(\n    resource_id: string,\n    id: string,\n    body: EngineUpdateOutboundResourceDisplayRequest,\n    options?: any\n  ) {\n    return OutboundResourceServiceApiFp(\n      this.configuration\n    ).updateOutboundResourceDisplay(resource_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * QueueBucketServiceApi - axios parameter creator\n * @export\n */\nexport const QueueBucketServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueBucket.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueBucketRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - functional programming interface\n * @export\n */\nexport const QueueBucketServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueBucket(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueBucket(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueBucket(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueBucket(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueBucket> {\n      const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueBucket(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - factory interface\n * @export\n */\nexport const QueueBucketServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create QueueBucket\n     * @param {string} queue_id\n     * @param {EngineCreateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueBucket(\n      queue_id: string,\n      body: EngineCreateQueueBucketRequest,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).createQueueBucket(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).deleteQueueBucket(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueBucket(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).readQueueBucket(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueBucket(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).searchQueueBucket(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueBucket\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueBucketRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueBucket(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueBucketRequest,\n      options?: any\n    ) {\n      return QueueBucketServiceApiFp(configuration).updateQueueBucket(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueBucketServiceApi - object-oriented interface\n * @export\n * @class QueueBucketServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueBucketServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create QueueBucket\n   * @param {string} queue_id\n   * @param {EngineCreateQueueBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public createQueueBucket(\n    queue_id: string,\n    body: EngineCreateQueueBucketRequest,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).createQueueBucket(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public deleteQueueBucket(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public readQueueBucket(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).readQueueBucket(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchQueueRouting\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public searchQueueBucket(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateQueueBucket\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueBucketRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueBucketServiceApi\n   */\n  public updateQueueBucket(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueBucketRequest,\n    options?: any\n  ) {\n    return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * QueueResourcesServiceApi - axios parameter creator\n * @export\n */\nexport const QueueResourcesServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueResourceGroup.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueResourceGroupRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - functional programming interface\n * @export\n */\nexport const QueueResourcesServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueResourceGroup(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueResourceGroup(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueResourceGroup(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueResourceGroup(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueResourceGroup> {\n      const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueResourceGroup(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - factory interface\n * @export\n */\nexport const QueueResourcesServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {EngineCreateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueResourceGroup(\n      queue_id: string,\n      body: EngineCreateQueueResourceGroupRequest,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueResourceGroup\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueResourceGroup(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueResourceGroup\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueResourceGroupRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueResourceGroup(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueResourceGroupRequest,\n      options?: any\n    ) {\n      return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueResourcesServiceApi - object-oriented interface\n * @export\n * @class QueueResourcesServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueResourcesServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary CreateQueueResourceGroup\n   * @param {string} queue_id\n   * @param {EngineCreateQueueResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public createQueueResourceGroup(\n    queue_id: string,\n    body: EngineCreateQueueResourceGroupRequest,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).createQueueResourceGroup(queue_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary DeleteQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public deleteQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).deleteQueueResourceGroup(queue_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary ReadQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public readQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).readQueueResourceGroup(queue_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary SearchQueueResourceGroup\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public searchQueueResourceGroup(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary UpdateQueueResourceGroup\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueResourceGroupRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueResourcesServiceApi\n   */\n  public updateQueueResourceGroup(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueResourceGroupRequest,\n    options?: any\n  ) {\n    return QueueResourcesServiceApiFp(\n      this.configuration\n    ).updateQueueResourceGroup(queue_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * QueueRoutingServiceApi - axios parameter creator\n * @export\n */\nexport const QueueRoutingServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling createQueueRouting.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueRoutingRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling deleteQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling readQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling searchQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(\n        `{${'queue_id'}}`,\n        encodeURIComponent(String(queue_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'queue_id' is not null or undefined\n      if (queue_id === null || queue_id === undefined) {\n        throw new RequiredError(\n          'queue_id',\n          'Required parameter queue_id was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueueRouting.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`\n        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueRoutingRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - functional programming interface\n * @export\n */\nexport const QueueRoutingServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).createQueueRouting(queue_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueueRouting(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).readQueueRouting(queue_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueueRouting(queue_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineQueueRouting> {\n      const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueueRouting(queue_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - factory interface\n * @export\n */\nexport const QueueRoutingServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary CreateQueueRouting\n     * @param {string} queue_id\n     * @param {EngineCreateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueueRouting(\n      queue_id: string,\n      body: EngineCreateQueueRoutingRequest,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).createQueueRouting(\n        queue_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary DeleteQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ReadQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueueRouting(\n      queue_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).readQueueRouting(\n        queue_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SearchQueueRouting\n     * @param {string} queue_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueueRouting(\n      queue_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).searchQueueRouting(\n        queue_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary UpdateQueueRouting\n     * @param {string} queue_id\n     * @param {string} id\n     * @param {EngineUpdateQueueRoutingRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueueRouting(\n      queue_id: string,\n      id: string,\n      body: EngineUpdateQueueRoutingRequest,\n      options?: any\n    ) {\n      return QueueRoutingServiceApiFp(configuration).updateQueueRouting(\n        queue_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * QueueRoutingServiceApi - object-oriented interface\n * @export\n * @class QueueRoutingServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueRoutingServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary CreateQueueRouting\n   * @param {string} queue_id\n   * @param {EngineCreateQueueRoutingRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public createQueueRouting(\n    queue_id: string,\n    body: EngineCreateQueueRoutingRequest,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(\n      queue_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary DeleteQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public deleteQueueRouting(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ReadQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public readQueueRouting(\n    queue_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(\n      queue_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SearchQueueRouting\n   * @param {string} queue_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public searchQueueRouting(\n    queue_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(\n      queue_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary UpdateQueueRouting\n   * @param {string} queue_id\n   * @param {string} id\n   * @param {EngineUpdateQueueRoutingRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueRoutingServiceApi\n   */\n  public updateQueueRouting(\n    queue_id: string,\n    id: string,\n    body: EngineUpdateQueueRoutingRequest,\n    options?: any\n  ) {\n    return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(\n      queue_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * QueueServiceApi - axios parameter creator\n * @export\n */\nexport const QueueServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(\n      body: EngineCreateQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(\n      id: string,\n      body: EnginePatchQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchQueue.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/queues`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(\n      id: string,\n      body: EngineUpdateQueueRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateQueue.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateQueue.'\n        )\n      }\n      const localVarPath = `/call_center/queues/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateQueueRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * QueueServiceApi - functional programming interface\n * @export\n */\nexport const QueueServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(\n      body: EngineCreateQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).createQueue(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).deleteQueue(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(\n      id: string,\n      body: EnginePatchQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).patchQueue(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).readQueue(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).searchQueue(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(\n      id: string,\n      body: EngineUpdateQueueRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineQueue> {\n      const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(\n        configuration\n      ).updateQueue(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * QueueServiceApi - factory interface\n * @export\n */\nexport const QueueServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Queue\n     * @param {EngineCreateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createQueue(body: EngineCreateQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).createQueue(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Queue\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteQueue(id: string, domain_id?: string, options?: any) {\n      return QueueServiceApiFp(configuration).deleteQueue(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch Queue\n     * @param {string} id\n     * @param {EnginePatchQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).patchQueue(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Queue item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readQueue(id: string, domain_id?: string, options?: any) {\n      return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Queue\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchQueue(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return QueueServiceApiFp(configuration).searchQueue(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Queue\n     * @param {string} id\n     * @param {EngineUpdateQueueRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateQueue(id: string, body: EngineUpdateQueueRequest, options?: any) {\n      return QueueServiceApiFp(configuration).updateQueue(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * QueueServiceApi - object-oriented interface\n * @export\n * @class QueueServiceApi\n * @extends {BaseAPI}\n */\nexport class QueueServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Queue\n   * @param {EngineCreateQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public createQueue(body: EngineCreateQueueRequest, options?: any) {\n    return QueueServiceApiFp(this.configuration).createQueue(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Queue\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public deleteQueue(id: string, domain_id?: string, options?: any) {\n    return QueueServiceApiFp(this.configuration).deleteQueue(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch Queue\n   * @param {string} id\n   * @param {EnginePatchQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public patchQueue(id: string, body: EnginePatchQueueRequest, options?: any) {\n    return QueueServiceApiFp(this.configuration).patchQueue(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Queue item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public readQueue(id: string, domain_id?: string, options?: any) {\n    return QueueServiceApiFp(this.configuration).readQueue(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Queue\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public searchQueue(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return QueueServiceApiFp(this.configuration).searchQueue(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Queue\n   * @param {string} id\n   * @param {EngineUpdateQueueRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof QueueServiceApi\n   */\n  public updateQueue(\n    id: string,\n    body: EngineUpdateQueueRequest,\n    options?: any\n  ) {\n    return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * ResourceTeamServiceApi - axios parameter creator\n * @export\n */\nexport const ResourceTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateResourceTeamAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateResourceTeamSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateResourceTeamAgent.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/agents/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateResourceTeamAgentRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateResourceTeamSkill.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/skills/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateResourceTeamSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - functional programming interface\n * @export\n */\nexport const ResourceTeamServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createResourceTeamAgent(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createResourceTeamSkill(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteResourceTeamAgent(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteResourceTeamSkill(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readResourceTeamAgent(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readResourceTeamSkill(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchResourceTeamAgent(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchResourceTeamSkill(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamAgent> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateResourceTeamAgent(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineResourceTeamSkill> {\n      const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateResourceTeamSkill(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - factory interface\n * @export\n */\nexport const ResourceTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create ResourceTeamAgent\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamAgent(\n      team_id: string,\n      body: EngineCreateResourceTeamAgentRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).createResourceTeamAgent(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SKill Create ResourceTeamSkill\n     * @param {string} team_id\n     * @param {EngineCreateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceTeamSkill(\n      team_id: string,\n      body: EngineCreateResourceTeamSkillRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).createResourceTeamSkill(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamAgent(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).deleteResourceTeamSkill(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceTeamAgent item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamAgent(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).readResourceTeamAgent(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary ResourceTeamSkill item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readResourceTeamSkill(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).readResourceTeamSkill(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceTeamAgent\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamAgent(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).searchResourceTeamAgent(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of ResourceTeamSkill\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchResourceTeamSkill(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).searchResourceTeamSkill(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceTeamAgent\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamAgentRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamAgent(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamAgentRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).updateResourceTeamAgent(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update ResourceTeamSkill\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateResourceTeamSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceTeamSkill(\n      team_id: string,\n      id: string,\n      body: EngineUpdateResourceTeamSkillRequest,\n      options?: any\n    ) {\n      return ResourceTeamServiceApiFp(configuration).updateResourceTeamSkill(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * ResourceTeamServiceApi - object-oriented interface\n * @export\n * @class ResourceTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class ResourceTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create ResourceTeamAgent\n   * @param {string} team_id\n   * @param {EngineCreateResourceTeamAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public createResourceTeamAgent(\n    team_id: string,\n    body: EngineCreateResourceTeamAgentRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamAgent(\n      team_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary SKill Create ResourceTeamSkill\n   * @param {string} team_id\n   * @param {EngineCreateResourceTeamSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public createResourceTeamSkill(\n    team_id: string,\n    body: EngineCreateResourceTeamSkillRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).createResourceTeamSkill(\n      team_id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceTeamAgent\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public deleteResourceTeamAgent(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamAgent(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove ResourceTeamSkill\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public deleteResourceTeamSkill(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamSkill(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceTeamAgent item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public readResourceTeamAgent(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamAgent(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary ResourceTeamSkill item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public readResourceTeamSkill(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).readResourceTeamSkill(\n      team_id,\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of ResourceTeamAgent\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public searchResourceTeamAgent(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamAgent(\n      team_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of ResourceTeamSkill\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public searchResourceTeamSkill(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamSkill(\n      team_id,\n      page,\n      size,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceTeamAgent\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateResourceTeamAgentRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public updateResourceTeamAgent(\n    team_id: string,\n    id: string,\n    body: EngineUpdateResourceTeamAgentRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamAgent(\n      team_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update ResourceTeamSkill\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateResourceTeamSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceTeamServiceApi\n   */\n  public updateResourceTeamSkill(\n    team_id: string,\n    id: string,\n    body: EngineUpdateResourceTeamSkillRequest,\n    options?: any\n  ) {\n    return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamSkill(\n      team_id,\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingOutboundCallServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'from_id' is not null or undefined\n      if (from_id === null || from_id === undefined) {\n        throw new RequiredError(\n          'from_id',\n          'Required parameter from_id was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'to_id' is not null or undefined\n      if (to_id === null || to_id === undefined) {\n        throw new RequiredError(\n          'to_id',\n          'Required parameter to_id was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{from_id}/to/{to_id}`\n        .replace(`{${'from_id'}}`, encodeURIComponent(String(from_id)))\n        .replace(`{${'to_id'}}`, encodeURIComponent(String(to_id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineMovePositionRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/outbound/calls`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingOutboundCall.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingOutboundCall.'\n        )\n      }\n      const localVarPath = `/routing/outbound/calls/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingOutboundCallRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - functional programming interface\n * @export\n */\nexport const RoutingOutboundCallServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingOutboundCall(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingOutboundCall(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineMovePositionRoutingOutboundCallResponse> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).patchRoutingOutboundCall(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingOutboundCall(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingOutboundCall(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingOutboundCall> {\n      const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingOutboundCall(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - factory interface\n * @export\n */\nexport const RoutingOutboundCallServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingOutboundCall\n     * @param {EngineCreateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingOutboundCall(\n      body: EngineCreateRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).createRoutingOutboundCall(body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingOutboundCall\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingOutboundCall(id: string, domain_id?: string, options?: any) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary Move RoutingOutboundCall\n     * @param {string} from_id\n     * @param {string} to_id\n     * @param {EngineMovePositionRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    movePositionRoutingOutboundCall(\n      from_id: string,\n      to_id: string,\n      body: EngineMovePositionRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Patch RoutingOutboundCall\n     * @param {string} id\n     * @param {EnginePatchRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingOutboundCall(\n      id: string,\n      body: EnginePatchRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).patchRoutingOutboundCall(id, body, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingOutboundCall item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingOutboundCall(id: string, domain_id?: string, options?: any) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).readRoutingOutboundCall(id, domain_id, options)(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of RoutingOutboundCall\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingOutboundCall(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).searchRoutingOutboundCall(page, size, q, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Update RoutingOutboundCall\n     * @param {string} id\n     * @param {EngineUpdateRoutingOutboundCallRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingOutboundCall(\n      id: string,\n      body: EngineUpdateRoutingOutboundCallRequest,\n      options?: any\n    ) {\n      return RoutingOutboundCallServiceApiFp(\n        configuration\n      ).updateRoutingOutboundCall(id, body, options)(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingOutboundCallServiceApi - object-oriented interface\n * @export\n * @class RoutingOutboundCallServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingOutboundCallServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingOutboundCall\n   * @param {EngineCreateRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public createRoutingOutboundCall(\n    body: EngineCreateRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).createRoutingOutboundCall(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingOutboundCall\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public deleteRoutingOutboundCall(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).deleteRoutingOutboundCall(id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Move RoutingOutboundCall\n   * @param {string} from_id\n   * @param {string} to_id\n   * @param {EngineMovePositionRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public movePositionRoutingOutboundCall(\n    from_id: string,\n    to_id: string,\n    body: EngineMovePositionRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).movePositionRoutingOutboundCall(from_id, to_id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Patch RoutingOutboundCall\n   * @param {string} id\n   * @param {EnginePatchRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public patchRoutingOutboundCall(\n    id: string,\n    body: EnginePatchRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).patchRoutingOutboundCall(id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingOutboundCall item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public readRoutingOutboundCall(\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of RoutingOutboundCall\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public searchRoutingOutboundCall(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).searchRoutingOutboundCall(page, size, q, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update RoutingOutboundCall\n   * @param {string} id\n   * @param {EngineUpdateRoutingOutboundCallRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingOutboundCallServiceApi\n   */\n  public updateRoutingOutboundCall(\n    id: string,\n    body: EngineUpdateRoutingOutboundCallRequest,\n    options?: any\n  ) {\n    return RoutingOutboundCallServiceApiFp(\n      this.configuration\n    ).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingSchemaServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(\n      body: EngineCreateRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling patchRoutingSchema.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling patchRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EnginePatchRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/schema`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingSchema.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingSchema.'\n        )\n      }\n      const localVarPath = `/routing/schema/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingSchemaRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - functional programming interface\n * @export\n */\nexport const RoutingSchemaServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(\n      body: EngineCreateRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingSchema(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingSchema(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).patchRoutingSchema(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingSchema(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingSchema(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingSchema> {\n      const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingSchema(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - factory interface\n * @export\n */\nexport const RoutingSchemaServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingSchema\n     * @param {EngineCreateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingSchema(body: EngineCreateRoutingSchemaRequest, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingSchema\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingSchema(id: string, domain_id?: string, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Patch RoutingSchema\n     * @param {string} id\n     * @param {EnginePatchRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    patchRoutingSchema(\n      id: string,\n      body: EnginePatchRoutingSchemaRequest,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingSchema item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingSchema(id: string, domain_id?: string, options?: any) {\n      return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List RoutingSchema\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingSchema(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update RoutingSchema\n     * @param {string} id\n     * @param {EngineUpdateRoutingSchemaRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingSchema(\n      id: string,\n      body: EngineUpdateRoutingSchemaRequest,\n      options?: any\n    ) {\n      return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingSchemaServiceApi - object-oriented interface\n * @export\n * @class RoutingSchemaServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingSchemaServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingSchema\n   * @param {EngineCreateRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public createRoutingSchema(\n    body: EngineCreateRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingSchema\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public deleteRoutingSchema(id: string, domain_id?: string, options?: any) {\n    return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Patch RoutingSchema\n   * @param {string} id\n   * @param {EnginePatchRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public patchRoutingSchema(\n    id: string,\n    body: EnginePatchRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingSchema item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public readRoutingSchema(id: string, domain_id?: string, options?: any) {\n    return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List RoutingSchema\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public searchRoutingSchema(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update RoutingSchema\n   * @param {string} id\n   * @param {EngineUpdateRoutingSchemaRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingSchemaServiceApi\n   */\n  public updateRoutingSchema(\n    id: string,\n    body: EngineUpdateRoutingSchemaRequest,\n    options?: any\n  ) {\n    return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(\n      id,\n      body,\n      options\n    )(this.axios, this.basePath)\n  }\n}\n\n/**\n * RoutingVariableServiceApi - axios parameter creator\n * @export\n */\nexport const RoutingVariableServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateRoutingVariableRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/routing/variables`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateRoutingVariable.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateRoutingVariable.'\n        )\n      }\n      const localVarPath = `/routing/variables/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateRoutingVariableRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - functional programming interface\n * @export\n */\nexport const RoutingVariableServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).createRoutingVariable(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).deleteRoutingVariable(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).readRoutingVariable(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).searchRoutingVariable(page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineRoutingVariable> {\n      const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(\n        configuration\n      ).updateRoutingVariable(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - factory interface\n * @export\n */\nexport const RoutingVariableServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create RoutingVariable\n     * @param {EngineCreateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRoutingVariable(\n      body: EngineCreateRoutingVariableRequest,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove RoutingVariable\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRoutingVariable(id: string, domain_id?: string, options?: any) {\n      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary RoutingVariable item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readRoutingVariable(id: string, domain_id?: string, options?: any) {\n      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of RoutingVariable\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchRoutingVariable(\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update RoutingVariable\n     * @param {string} id\n     * @param {EngineUpdateRoutingVariableRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRoutingVariable(\n      id: string,\n      body: EngineUpdateRoutingVariableRequest,\n      options?: any\n    ) {\n      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * RoutingVariableServiceApi - object-oriented interface\n * @export\n * @class RoutingVariableServiceApi\n * @extends {BaseAPI}\n */\nexport class RoutingVariableServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create RoutingVariable\n   * @param {EngineCreateRoutingVariableRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public createRoutingVariable(\n    body: EngineCreateRoutingVariableRequest,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).createRoutingVariable(body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove RoutingVariable\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public deleteRoutingVariable(id: string, domain_id?: string, options?: any) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary RoutingVariable item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public readRoutingVariable(id: string, domain_id?: string, options?: any) {\n    return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of RoutingVariable\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public searchRoutingVariable(\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).searchRoutingVariable(page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update RoutingVariable\n   * @param {string} id\n   * @param {EngineUpdateRoutingVariableRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoutingVariableServiceApi\n   */\n  public updateRoutingVariable(\n    id: string,\n    body: EngineUpdateRoutingVariableRequest,\n    options?: any\n  ) {\n    return RoutingVariableServiceApiFp(\n      this.configuration\n    ).updateRoutingVariable(id, body, options)(this.axios, this.basePath)\n  }\n}\n\n/**\n * SkillServiceApi - axios parameter creator\n * @export\n */\nexport const SkillServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(\n      body: EngineCreateSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(id: string, domain_id?: string, options: any = {}): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      const localVarPath = `/call_center/skills`\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (q !== undefined) {\n        localVarQueryParameter['q'] = q\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(\n      id: string,\n      body: EngineUpdateSkillRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateSkill.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateSkill.'\n        )\n      }\n      const localVarPath = `/call_center/skills/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateSkillRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * SkillServiceApi - functional programming interface\n * @export\n */\nexport const SkillServiceApiFp = function(configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(\n      body: EngineCreateSkillRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).createSkill(body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).deleteSkill(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).readSkill(id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).searchSkill(page, size, q, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(\n      id: string,\n      body: EngineUpdateSkillRequest,\n      options?: any\n    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineSkill> {\n      const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(\n        configuration\n      ).updateSkill(id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * SkillServiceApi - factory interface\n * @export\n */\nexport const SkillServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create Skill\n     * @param {EngineCreateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSkill(body: EngineCreateSkillRequest, options?: any) {\n      return SkillServiceApiFp(configuration).createSkill(body, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary Remove Skill\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSkill(id: string, domain_id?: string, options?: any) {\n      return SkillServiceApiFp(configuration).deleteSkill(\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Skill item\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSkill(id: string, domain_id?: string, options?: any) {\n      return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(\n        axios,\n        basePath\n      )\n    },\n    /**\n     *\n     * @summary List of Skill\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [q]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSkill(\n      page?: number,\n      size?: number,\n      q?: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SkillServiceApiFp(configuration).searchSkill(\n        page,\n        size,\n        q,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update Skill\n     * @param {string} id\n     * @param {EngineUpdateSkillRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSkill(id: string, body: EngineUpdateSkillRequest, options?: any) {\n      return SkillServiceApiFp(configuration).updateSkill(id, body, options)(\n        axios,\n        basePath\n      )\n    },\n  }\n}\n\n/**\n * SkillServiceApi - object-oriented interface\n * @export\n * @class SkillServiceApi\n * @extends {BaseAPI}\n */\nexport class SkillServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create Skill\n   * @param {EngineCreateSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public createSkill(body: EngineCreateSkillRequest, options?: any) {\n    return SkillServiceApiFp(this.configuration).createSkill(body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Remove Skill\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public deleteSkill(id: string, domain_id?: string, options?: any) {\n    return SkillServiceApiFp(this.configuration).deleteSkill(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Skill item\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public readSkill(id: string, domain_id?: string, options?: any) {\n    return SkillServiceApiFp(this.configuration).readSkill(\n      id,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary List of Skill\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [q]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public searchSkill(\n    page?: number,\n    size?: number,\n    q?: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SkillServiceApiFp(this.configuration).searchSkill(\n      page,\n      size,\n      q,\n      domain_id,\n      options\n    )(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Update Skill\n   * @param {string} id\n   * @param {EngineUpdateSkillRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SkillServiceApi\n   */\n  public updateSkill(\n    id: string,\n    body: EngineUpdateSkillRequest,\n    options?: any\n  ) {\n    return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - axios parameter creator\n * @export\n */\nexport const SupervisorInTeamServiceApiAxiosParamCreator = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling createSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling createSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineCreateSupervisorInTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling deleteSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling readSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling readSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(\n        `{${'team_id'}}`,\n        encodeURIComponent(String(team_id))\n      )\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size\n      }\n\n      if (domain_id !== undefined) {\n        localVarQueryParameter['domain_id'] = domain_id\n      }\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options: any = {}\n    ): RequestArgs {\n      // verify required parameter 'team_id' is not null or undefined\n      if (team_id === null || team_id === undefined) {\n        throw new RequiredError(\n          'team_id',\n          'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'id' is not null or undefined\n      if (id === null || id === undefined) {\n        throw new RequiredError(\n          'id',\n          'Required parameter id was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      // verify required parameter 'body' is not null or undefined\n      if (body === null || body === undefined) {\n        throw new RequiredError(\n          'body',\n          'Required parameter body was null or undefined when calling updateSupervisorInTeam.'\n        )\n      }\n      const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`\n        .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)\n      let baseOptions\n      if (configuration) {\n        baseOptions = configuration.baseOptions\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options,\n      }\n      const localVarHeaderParameter = {} as any\n      const localVarQueryParameter = {} as any\n\n      // authentication AccessToken required\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue =\n          typeof configuration.apiKey === 'function'\n            ? configuration.apiKey('X-Webitel-Access')\n            : configuration.apiKey\n        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json'\n\n      localVarUrlObj.query = {\n        ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query,\n      }\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n      delete localVarUrlObj.search\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...options.headers,\n      }\n      const needsSerialization =\n        <any>'EngineUpdateSupervisorInTeamRequest' !== 'string' ||\n        localVarRequestOptions.headers['Content-Type'] === 'application/json'\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(body !== undefined ? body : {})\n        : body || ''\n\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions,\n      }\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - functional programming interface\n * @export\n */\nexport const SupervisorInTeamServiceApiFp = function(\n  configuration?: Configuration\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).createSupervisorInTeam(team_id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).deleteSupervisorInTeam(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).readSupervisorInTeam(team_id, id, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineListSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).searchSupervisorInTeam(team_id, page, size, domain_id, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options?: any\n    ): (\n      axios?: AxiosInstance,\n      basePath?: string\n    ) => AxiosPromise<EngineSupervisorInTeam> {\n      const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(\n        configuration\n      ).updateSupervisorInTeam(team_id, id, body, options)\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url,\n        }\n        return axios.request(axiosRequestArgs)\n      }\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - factory interface\n * @export\n */\nexport const SupervisorInTeamServiceApiFactory = function(\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     *\n     * @summary Create SupervisorInTeam\n     * @param {string} team_id\n     * @param {EngineCreateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createSupervisorInTeam(\n      team_id: string,\n      body: EngineCreateSupervisorInTeamRequest,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(\n        team_id,\n        body,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Remove SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary SupervisorInTeam item\n     * @param {string} team_id\n     * @param {string} id\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    readSupervisorInTeam(\n      team_id: string,\n      id: string,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(\n        team_id,\n        id,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary List of SupervisorInTeam\n     * @param {string} team_id\n     * @param {number} [page]\n     * @param {number} [size]\n     * @param {string} [domain_id]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    searchSupervisorInTeam(\n      team_id: string,\n      page?: number,\n      size?: number,\n      domain_id?: string,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(\n        team_id,\n        page,\n        size,\n        domain_id,\n        options\n      )(axios, basePath)\n    },\n    /**\n     *\n     * @summary Update SupervisorInTeam\n     * @param {string} team_id\n     * @param {string} id\n     * @param {EngineUpdateSupervisorInTeamRequest} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateSupervisorInTeam(\n      team_id: string,\n      id: string,\n      body: EngineUpdateSupervisorInTeamRequest,\n      options?: any\n    ) {\n      return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(\n        team_id,\n        id,\n        body,\n        options\n      )(axios, basePath)\n    },\n  }\n}\n\n/**\n * SupervisorInTeamServiceApi - object-oriented interface\n * @export\n * @class SupervisorInTeamServiceApi\n * @extends {BaseAPI}\n */\nexport class SupervisorInTeamServiceApi extends BaseAPI {\n  /**\n   *\n   * @summary Create SupervisorInTeam\n   * @param {string} team_id\n   * @param {EngineCreateSupervisorInTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public createSupervisorInTeam(\n    team_id: string,\n    body: EngineCreateSupervisorInTeamRequest,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath)\n  }\n\n  /**\n   *\n   * @summary Remove SupervisorInTeam\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public deleteSupervisorInTeam(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).deleteSupervisorInTeam(team_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary SupervisorInTeam item\n   * @param {string} team_id\n   * @param {string} id\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public readSupervisorInTeam(\n    team_id: string,\n    id: string,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).readSupervisorInTeam(team_id, id, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary List of SupervisorInTeam\n   * @param {string} team_id\n   * @param {number} [page]\n   * @param {number} [size]\n   * @param {string} [domain_id]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public searchSupervisorInTeam(\n    team_id: string,\n    page?: number,\n    size?: number,\n    domain_id?: string,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).searchSupervisorInTeam(team_id, page, size, domain_id, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n\n  /**\n   *\n   * @summary Update SupervisorInTeam\n   * @param {string} team_id\n   * @param {string} id\n   * @param {EngineUpdateSupervisorInTeamRequest} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupervisorInTeamServiceApi\n   */\n  public updateSupervisorInTeam(\n    team_id: string,\n    id: string,\n    body: EngineUpdateSupervisorInTeamRequest,\n    options?: any\n  ) {\n    return SupervisorInTeamServiceApiFp(\n      this.configuration\n    ).updateSupervisorInTeam(team_id, id, body, options)(\n      this.axios,\n      this.basePath\n    )\n  }\n}\n","// tslint:disable\n/**\n * Webitel engine API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 2019.0.0\n * Contact: support@webitel.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | ((name: string) => string)\n  username?: string\n  password?: string\n  accessToken?: string | ((name?: string, scopes?: string[]) => string)\n  basePath?: string\n  baseOptions?: any\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | ((name: string) => string)\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?: string | ((name?: string, scopes?: string[]) => string)\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey\n    this.username = param.username\n    this.password = param.password\n    this.accessToken = param.accessToken\n    this.basePath = param.basePath\n    this.baseOptions = param.baseOptions\n  }\n}\n","import { Client, UserCallRequest } from './client'\n\nexport enum CallActions {\n  Ringing = 'ringing',\n  Active = 'active',\n  Bridge = 'bridge',\n  Hold = 'hold',\n  DTMF = 'dtmf',\n  Voice = 'voice',\n  Silence = 'silence',\n  Execute = 'execute',\n  Update = 'update',\n  Hangup = 'hangup',\n  PeerStream = 'peerStream',\n}\n\nexport enum CallDirection {\n  Inbound = 'inbound',\n  Outbound = 'outbound',\n  Internal = 'internal',\n}\n\nexport interface AnswerRequest {\n  useVideo?: boolean\n  useAudio?: boolean\n  useScreen?: boolean\n}\n\nexport interface CallEventData {\n  id: string\n  node_name: string\n  action: string\n}\n\nexport interface CallEventExecute extends CallEventData {\n  application: string\n}\n\nexport interface CallEventDTMF extends CallEventData {\n  digit: string\n}\n\nexport interface CallInfo extends CallEventData {\n  parent_id: string\n  owner_id: string\n  direction: string\n  destination: string\n\n  from_number: string\n  from_name: string\n\n  to_number: string\n  to_name: string\n\n  payload: Map<string, string>\n  gateway_id: string\n  video_request: string\n  video_flow: string\n  screen_request: string\n}\n\nexport interface CallHangup extends CallEventData {\n  cause: string\n}\n\nexport class Call {\n  id: string\n  nodeName: string\n  state!: string\n\n  direction!: string\n  destination!: string\n\n  fromNumber!: string\n  fromName!: string\n\n  toNumber!: string\n  toName!: string\n  payload!: Map<string, string>\n\n  videoRequest!: boolean\n  screenRequest!: boolean\n  videoFlow!: string | null\n  peerStreams!: MediaStream[] | null\n  screen!: string | null\n\n  createdAt: number\n  answeredAt: number\n  hangupAt: number\n\n  hangupCause!: string\n\n  parentCallId!: string\n  ownerCallId!: string\n\n  _muted!: boolean\n  _gatewayId!: string | null\n\n  digits!: string[]\n  applications!: string[]\n  voice: boolean\n\n  constructor(\n    protected client: Client,\n    e: CallInfo,\n    peerStreams: MediaStream[] | null\n  ) {\n    this.voice = true\n    this.createdAt = Date.now()\n\n    this.answeredAt = 0\n    this.hangupAt = 0\n    this.peerStreams = peerStreams\n\n    this.id = e.id\n    this.digits = []\n    this.applications = []\n    this.nodeName = e.node_name\n    this.setState(e)\n    this.setInfo(e)\n  }\n\n  setActive(e: CallEventData) {\n    if (!this.answeredAt) {\n      this.answeredAt = Date.now()\n    }\n    this.setState(e)\n  }\n\n  get display() {\n    return `${this.displayNumber} (${this.displayName})`\n  }\n\n  get muted() {\n    return this._muted\n  }\n\n  get allowInboundVideo(): boolean {\n    if (this.videoFlow) {\n      return this.videoFlow.indexOf('send') > -1\n    }\n\n    return false\n  }\n\n  get allowOutboundVideo(): boolean {\n    if (this.videoFlow) {\n      return this.videoFlow.indexOf('recv') > -1\n    }\n\n    return false\n  }\n\n  setInfo(s: CallInfo) {\n    this.ownerCallId = s.owner_id\n    this.parentCallId = s.parent_id\n    this.destination = s.destination\n    this.direction = s.direction\n    this.fromNumber = s.from_number\n    this.fromName = s.from_name\n    this.toName = s.to_name\n    this.toNumber = s.to_number\n    this.payload = s.payload\n\n    if (s.gateway_id) {\n      this._gatewayId = s.gateway_id\n    } else {\n      this._gatewayId = null // ?\n    }\n\n    if (s.video_flow) {\n      this.videoFlow = s.video_flow\n    } else {\n      this.videoFlow = null\n    }\n\n    this.screenRequest = s.screen_request === 'true'\n    this.videoRequest = s.video_request === 'true' //\n\n    this.setState(s)\n  }\n\n  get gatewayId() {\n    return this._gatewayId\n  }\n\n  setState(s: CallEventData) {\n    this.state = s.action\n  }\n\n  get active(): boolean {\n    return this.hangupAt === 0\n  }\n\n  setPeerStreams(streams: MediaStream[] | null) {\n    this.peerStreams = streams\n  }\n\n  setHangup(s: CallHangup) {\n    this.hangupAt = Date.now()\n    this.hangupCause = s.cause\n    this.voice = false\n    this.peerStreams = null\n    this.setState(s)\n  }\n\n  setVoice(s: CallEventData) {\n    this.voice = true\n  }\n\n  setSilence(s: CallEventData) {\n    this.voice = false\n  }\n\n  setExecute(s: CallEventExecute) {\n    this.applications.push(s.application)\n  }\n\n  addDigit(s: CallEventDTMF) {\n    this.digits.push(s.digit)\n  }\n\n  get displayNumber() {\n    if (this.direction === 'inbound') {\n      return this.fromNumber\n    } else {\n      return this.toNumber\n    }\n  }\n\n  get displayName() {\n    if (this.direction === 'inbound') {\n      return this.fromName\n    } else {\n      return this.toName\n    }\n  }\n\n  /* Call control */\n  answer(req: AnswerRequest): boolean {\n    let sessionId = null\n    if (this.client.phone.hasSession(this.id)) {\n      sessionId = this.id\n    } else if (this.client.phone.hasSession(this.parentCallId)) {\n      sessionId = this.parentCallId\n    }\n\n    if (sessionId) {\n      return this.client.phone.answer(sessionId, req)\n    }\n\n    return false\n  }\n\n  async hangup(cause?: string) {\n    let _cause = cause\n    if (this.answeredAt === 0 && !cause) {\n      _cause =\n        this.direction === CallDirection.Inbound\n          ? 'USER_BUSY'\n          : 'ORIGINATOR_CANCEL'\n    }\n\n    return this.client.request('call_hangup', {\n      id: this.id,\n      node_id: this.nodeName,\n      cause: _cause,\n    })\n  }\n\n  async toggleHold() {\n    if (this.state === CallActions.Hold) {\n      return this.unHold()\n    } else {\n      return this.hold()\n    }\n  }\n\n  async hold() {\n    if (this.state === CallActions.Hold) {\n      throw new Error('Call is hold')\n    }\n\n    return this.client.request('call_hold', {\n      id: this.id,\n      node_id: this.nodeName,\n    })\n  }\n\n  async unHold() {\n    if (this.state !== CallActions.Hold) {\n      throw new Error('Call is active')\n    }\n\n    return this.client.request('call_unhold', {\n      id: this.id,\n      node_id: this.nodeName,\n    })\n  }\n\n  async sendDTMF(dtmf: string) {\n    return this.client.request('call_dtmf', {\n      id: this.id,\n      node_id: this.nodeName,\n      dtmf,\n    })\n  }\n\n  async blindTransfer(destination: string) {\n    if (!this.parentCallId) {\n      throw new Error('Not allow one leg')\n    }\n\n    return this.client.request('call_blind_transfer', {\n      id: this.parentCallId,\n      node_id: this.nodeName,\n      destination,\n    })\n  }\n\n  async mute(mute = false) {\n    const res = await this.client.request('call_mute', {\n      id: this.id,\n      node_id: this.nodeName,\n      mute,\n    })\n    this._muted = mute\n\n    return res\n  }\n\n  async bridgeTo(call: Call) {\n    return this.client.request('call_bridge', {\n      id: this.id,\n      node_id: this.nodeName,\n      parent_id: call.id,\n      parent_node_id: call.nodeName,\n    })\n  }\n\n  async callToUser(req: UserCallRequest) {\n    req.nodeId = this.nodeName\n    req.parentCallId = this.id || null\n    req.sendToCallId = this.parentCallId || null\n\n    return this.client.inviteToUser(req)\n  }\n}\n","export interface Log {\n  debug(primaryMessage: string, ...supportingData: any[]): void\n  warn(primaryMessage: string, ...supportingData: any[]): void\n  error(primaryMessage: string, ...supportingData: any[]): void\n  info(primaryMessage: string, ...supportingData: any[]): void\n}\n\nexport class Log implements Log {\n  debug(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('debug', msg, supportingDetails)\n  }\n  info(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('info', msg, supportingDetails)\n  }\n  warn(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('warn', msg, supportingDetails)\n  }\n  error(msg: string, ...supportingDetails: any[]): void {\n    this.emitLogMessage('error', msg, supportingDetails)\n  }\n\n  private emitLogMessage(\n    msgType: 'debug' | 'info' | 'warn' | 'error',\n    msg: string,\n    supportingDetails: any[]\n  ) {\n    if (supportingDetails.length > 0) {\n      console[msgType](msg, ...supportingDetails)\n    } else {\n      console[msgType](msg)\n    }\n  }\n}\n","import { EventEmitter } from 'ee-ts'\nimport * as SipClient from 'jssip'\nimport { AnswerRequest } from './call'\nimport { Log } from './log'\n\nexport interface SipConfiguration {\n  server: string\n  extension: string\n  realm: string\n  uri: string\n  authorization_user: string\n  ha1?: string\n}\n\ninterface RTCSession {\n  session: SipSession\n  peerconnection: SipSession\n  request: RTCRequest\n}\n\ninterface RTCRequest {\n  getHeader(name: string): string\n}\n\ninterface SipSession {\n  id: string\n  direction: string\n  stream: object\n  connection: RTCPeerConnection\n  answer(s: object): void\n  on(name: string, arg?: object): void\n}\n\nexport interface CallSession {\n  sip: SipSession\n  incoming: boolean\n  instance_id: string\n}\n\ninterface PeerConnectionEvent {\n  peerconnection: RTCPeerConnection\n}\n\ninterface SipHoneEvent {\n  unregistered(): void\n  error(err: Error): void\n  peerStreams(id: string, e: MediaStream[] | null): void\n  newSession(id: string, session: CallSession): void\n}\n\nexport class SipPhone extends EventEmitter<SipHoneEvent> {\n  static readonly userAgent = 'Webitel-Phone/0.0.1'\n  private ua!: SipClient.UA\n  private sessionCache = new Map<string, CallSession>()\n  private log: Log\n\n  constructor(private instanceId: string) {\n    super()\n    SipClient.debug.enable('*')\n    this.log = new Log()\n\n    this.on('unregistered', () => {\n      this.ua.removeAllListeners()\n      delete this.ua\n      this.sessionCache.clear()\n    })\n  }\n\n  getMediaConstraints(req: AnswerRequest): object {\n    if (req.useScreen) {\n      return {\n        video: false,\n        audio: false,\n        screen: true,\n      }\n    }\n\n    return {\n      video: req.useVideo || false,\n      audio: req.useAudio || true,\n    }\n  }\n\n  callOption(req: AnswerRequest): object {\n    return {\n      sessionTimersExpires: 120,\n      pcConfig: {\n        iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }],\n      },\n      rtcOfferConstraints: {\n        offerToReceiveAudio: req.useAudio || true,\n        offerToReceiveVideo: req.useVideo,\n      },\n      mediaConstraints: this.getMediaConstraints(req),\n    }\n  }\n\n  getSession(id: string): CallSession | null {\n    if (this.sessionCache.has(id)) {\n      return this.sessionCache.get(id) as CallSession\n    }\n\n    return null\n  }\n\n  hasSession(id: string | null): boolean {\n    return this.sessionCache.has(id!)\n  }\n\n  getPeerStream(id: string): MediaStream[] | null {\n    const session = this.getSession(id)\n    if (session && session.sip.connection) {\n      // @ts-ignore\n      const streams = session.sip.connection.getRemoteStreams() as MediaStream[]\n      if (streams && streams.length) {\n        return streams\n      }\n    }\n\n    return null\n  }\n\n  answer(id: string, req: AnswerRequest): boolean {\n    if (this.sessionCache.has(id)) {\n      const session = this.sessionCache.get(id)\n      session!.sip.answer(this.callOption(req))\n\n      return true\n    }\n\n    return false\n  }\n\n  async register(sipConf: SipConfiguration) {\n    const socket = new SipClient.WebSocketInterface(sipConf.server)\n\n    const configuration = {\n      realm: sipConf.realm,\n      uri: sipConf.uri,\n      authorization_user: sipConf.authorization_user,\n      ha1: sipConf.ha1,\n      user_agent: SipPhone.userAgent,\n      sockets: [socket],\n      session_timers: true,\n      // use_preloaded_route: true,\n      register_expires: 300,\n      connection_recovery_min_interval: 5,\n      connection_recovery_max_interval: 60,\n      // instance_id: '8f1fa16a-1165-4a96-8341-785b1ef24f13',\n    }\n\n    const ua = (this.ua = new SipClient.UA(configuration))\n\n    ua.on('connected', (e: object) => {\n      this.log.error('connected', e)\n    })\n\n    ua.on('newRTCSession', (e: RTCSession) => {\n      const session = e.session\n      const id = e.request.getHeader('X-Webitel-Uuid') || session.id\n\n      const callSession = {\n        sip: session,\n        incoming: session.direction === 'incoming',\n        instance_id: e.request.getHeader('X-Webitel-Sock-Id'),\n      }\n\n      this.storeSession(id, callSession)\n\n      session.on('peerconnection', (peer: PeerConnectionEvent) => {\n        peer.peerconnection.addEventListener(\n          'addstream',\n          async (evt: Event) => {\n            // set remote audio stream\n            this.emit(\n              'peerStreams',\n              id,\n              new Array((evt as MediaStreamEvent).stream as MediaStream)\n            )\n          }\n        )\n      })\n\n      session.on('ended', () => {\n        // this handler will be called for incoming calls too\n        this.removeSession(id)\n      })\n\n      session.on('failed', () => {\n        // this handler will be called for incoming calls too\n        this.removeSession(id)\n      })\n\n      session.on('accepted', () => {\n        // the call has answered\n        if (!this.isOutboundCall(id)) {\n          this.emit('peerStreams', id, this.getPeerStream(id))\n        }\n      })\n\n      session.on('confirmed', () => {\n        // this handler will be called for incoming calls too\n      })\n\n      this.emit('newSession', id, callSession)\n    })\n\n    ua.on('disconnected', (e: object) => {\n      this.log.error('disconnected', e)\n      this.emit('unregistered')\n    })\n\n    ua.on('registered', (e: object) => {\n      this.log.error('registered', e)\n    })\n\n    ua.on('unregistered', (e: object) => {\n      this.log.error('unregistered', e)\n      this.emit('unregistered')\n    })\n\n    ua.on('registrationFailed', (e: object) => {\n      this.log.error('registrationFailed', e)\n    })\n\n    ua.on('error', (e: Error) => {\n      this.emit('error', e)\n      this.log.error('error', e)\n    })\n\n    ua.start()\n  }\n\n  isOutboundCall(id: string): boolean {\n    const session = this.getSession(id)\n    if (session) {\n      return session.incoming && session.instance_id === this.instanceId\n    }\n\n    return false\n  }\n\n  async unregister() {\n    if (this.ua) {\n      this.ua.unregister()\n    }\n  }\n\n  get allSession(): CallSession[] {\n    return Array.from(this.sessionCache.values())\n  }\n\n  protected removeSession(id: string): boolean {\n    if (this.sessionCache.has(id)) {\n      this.sessionCache.delete(id)\n\n      return true\n    }\n\n    return false\n  }\n\n  protected storeSession(id: string, session: CallSession) {\n    if (this.sessionCache.has(id)) {\n      throw new Error('Session already store')\n    }\n\n    this.sessionCache.set(id, session)\n  }\n}\n","import { EventEmitter } from 'ee-ts'\nimport { formatWebSocketUri } from './utils'\n\nconst SOCKET_URL_SUFFIX = 'websocket'\n\nexport interface Message {\n  event?: string\n  status?: string\n  seq?: number\n  seq_reply?: number\n  data: any\n  error?: Map<string, Error>\n}\n\nexport interface Request {\n  seq: number\n  action: string\n  data?: object\n}\n\nexport interface SocketEvents {\n  message(msg: Message): void\n  close(code: number): void\n  open(): void\n}\n\nexport class Socket extends EventEmitter<SocketEvents> {\n  private socket!: WebSocket\n\n  constructor(private host: string) {\n    super()\n  }\n\n  connect(token: string) {\n    this.socket = new WebSocket(\n      `${formatWebSocketUri(\n        this.host\n      )}/${SOCKET_URL_SUFFIX}?access_token=${token}`\n    )\n\n    this.socket.onclose = (e) => this.onClose(e.code)\n\n    this.socket.onmessage = (e) => this.onMessage(e.data)\n    this.socket.onopen = () => this.onOpen()\n  }\n\n  send(request: Request): never | null {\n    this.socket.send(JSON.stringify(request))\n\n    return null\n  }\n\n  close(code?: number) {\n    this.socket.close(code)\n    delete this.socket\n  }\n\n  private onOpen() {\n    this.emit('open')\n  }\n\n  private onClose(code: number) {\n    this.emit('close', code)\n  }\n\n  private onMessage(data: string) {\n    const message = JSON.parse(data) as Message\n    this.emit('message', message)\n  }\n}\n","export function formatWebSocketUri(host: string): string {\n  return host.replace(/^http/, 'ws')\n}\n","import { EventEmitter } from 'ee-ts'\nimport {\n  AnswerRequest,\n  Call,\n  CallActions,\n  CallEventData,\n  CallEventDTMF,\n  CallEventExecute,\n  CallHangup,\n  CallInfo,\n} from './call'\nimport { Log } from './log'\nimport { CallSession, SipConfiguration, SipPhone } from './sip'\nimport { Message, Socket } from './socket'\n\nexport interface Config {\n  endpoint: string\n  token?: string\n  logLvl?: 'debug' | 'info' | 'warn' | 'error'\n  registerWebDevice?: boolean\n  phone?: number\n}\n\ninterface PromiseCallback {\n  resolve: (res: object) => void\n  reject: (err: object) => void\n}\n\nexport interface OutboundCallRequest {\n  parentCallId?: string\n  toNumber: string\n  toName?: string\n  useVideo?: boolean\n  useScreen?: boolean\n  useAudio?: boolean\n  variables?: Map<string, string>\n}\n\nexport interface UserCallRequest {\n  nodeId?: string | null\n  parentCallId?: string | null\n  sendToCallId?: string | null\n  toUserId: string\n  useVideo?: boolean\n  useScreen?: boolean\n  useAudio?: boolean\n  variables?: Map<string, string>\n}\n\nconst WEBSOCKET_AUTHENTICATION_CHALLENGE = 'authentication_challenge'\nconst WEBSOCKET_DEFAULT_DEVICE_CONFIG = 'user_default_device'\n\nconst WEBSOCKET_MAKE_OUTBOUND_CALL = 'call_invite'\nconst WEBSOCKET_MAKE_USER_CALL = 'call_user'\nconst WEBSOCKET_EVENT_HELLO = 'hello'\nconst WEBSOCKET_EVENT_CALL = 'call'\nconst WEBSOCKET_EVENT_SIP = 'sip'\n\nexport enum Response {\n  STATUS_FAIL = 'FAIL',\n  STATUS_OK = 'OK',\n}\n\nexport interface Session {\n  id: string\n  expire: number\n  user_id: number\n  role_ids: number[]\n}\n\nexport interface ConnectionInfo {\n  sock_id: string\n  server_build_commit: string\n  server_node_id: string\n  server_version: string\n  server_time: number\n  session: Session\n}\n\nexport type CallEventHandler = (action: CallActions, call: Call) => void\n\ninterface EventHandler {\n  [WEBSOCKET_EVENT_CALL](action: CallActions, call: Call): void\n  [WEBSOCKET_EVENT_SIP](data: object): void\n}\n\nexport class Client {\n  phone!: SipPhone\n  private socket!: Socket\n  private connectionInfo!: ConnectionInfo\n\n  private reqSeq = 0\n  private queueRequest: Map<number, PromiseCallback> = new Map<\n    number,\n    PromiseCallback\n  >()\n  private log: Log\n  private eventHandler: EventEmitter<EventHandler>\n  private callStore: Map<string, Call>\n\n  constructor(protected readonly _config: Config) {\n    this.log = new Log()\n    this.eventHandler = new EventEmitter()\n    this.callStore = new Map<string, Call>()\n  }\n\n  async connect() {\n    await this.connectToSocket()\n  }\n\n  async disconnect() {\n    this.socket.close()\n  }\n\n  async subscribeCall(\n    handler: CallEventHandler,\n    data?: object\n  ): Promise<null | Error> {\n    const res = await this.request(`subscribe_call`, data)\n    this.eventHandler.on(WEBSOCKET_EVENT_CALL, handler)\n\n    return res\n  }\n\n  async unSubscribe(\n    action: string,\n    handler: CallEventHandler,\n    data?: object\n  ): Promise<null | Error> {\n    const res = await this.request(`un_subscribe_${action}`, data)\n\n    // this.eventHandler.listeners(action)\n    // this.eventHandler.removeListener(action, handler)\n    // this.eventHandler.off(action, handler)\n\n    return res\n  }\n\n  allCall(): Call[] {\n    return Array.from(this.callStore.values())\n  }\n\n  callById(id: string): Call | undefined {\n    if (this.callStore.has(id)) {\n      return this.callStore.get(id)\n    }\n\n    return undefined\n  }\n\n  async auth() {\n    return this.request(WEBSOCKET_AUTHENTICATION_CHALLENGE, {\n      token: this._config.token,\n    })\n  }\n\n  sessionInfo(): Session {\n    return this.connectionInfo.session\n  }\n\n  get version(): string {\n    return this.connectionInfo.server_version\n  }\n\n  get instanceId(): string {\n    return this.connectionInfo.sock_id\n  }\n\n  invite(req: OutboundCallRequest) {\n    return this.request(WEBSOCKET_MAKE_OUTBOUND_CALL, req)\n  }\n\n  inviteToUser(req: UserCallRequest) {\n    return this.request(WEBSOCKET_MAKE_USER_CALL, req)\n  }\n\n  answer(id: string, req: AnswerRequest): boolean {\n    return this.phone.answer(id, req)\n  }\n\n  request(action: string, data?: object): Promise<Error> {\n    return new Promise<Error>((resolve: () => void, reject: () => void) => {\n      this.queueRequest.set(++this.reqSeq, { resolve, reject })\n      this.socket.send({\n        seq: this.reqSeq,\n        action,\n        data,\n      })\n    })\n  }\n\n  useWebPhone(): boolean {\n    return this._config.registerWebDevice || false\n  }\n\n  private async deviceConfig(): Promise<SipConfiguration | Error> {\n    return this.request(WEBSOCKET_DEFAULT_DEVICE_CONFIG, {})\n  }\n\n  private async onMessage(message: Message) {\n    this.log.debug('receive message: ', message)\n    if (message.seq_reply! > 0) {\n      if (this.queueRequest.has(message.seq_reply!)) {\n        const promise = this.queueRequest.get(message.seq_reply!)\n        this.queueRequest.delete(message.seq_reply!)\n        if (message.status === Response.STATUS_OK) {\n          promise!.resolve(message.data)\n        } else {\n          promise!.reject(message.error!)\n        }\n      }\n    } else {\n      switch (message.event) {\n        case WEBSOCKET_EVENT_HELLO:\n          await this.connected(message.data as ConnectionInfo)\n          this.log.debug(\n            `opened session ${this.connectionInfo.sock_id} for userId=${\n              this.connectionInfo.session.user_id\n            }`\n          )\n          break\n        case WEBSOCKET_EVENT_CALL:\n          this.handleCallEvents(message.data.call as CallEventData)\n          break\n\n        case WEBSOCKET_EVENT_SIP:\n          this.eventHandler.emit(WEBSOCKET_EVENT_SIP, message.data)\n          break\n        default:\n          this.log.error(`event ${message.event} not handler`)\n      }\n    }\n  }\n\n  private async connected(info: ConnectionInfo) {\n    this.connectionInfo = info\n\n    this.phone = new SipPhone(this.instanceId)\n\n    this.phone.on(\n      'peerStreams',\n      (id: string, streams: MediaStream[] | null) => {\n        const call = this.callById(id)\n        if (call && call.peerStreams === null) {\n          call.setPeerStreams(streams)\n          this.eventHandler.emit(\n            WEBSOCKET_EVENT_CALL,\n            CallActions.PeerStream,\n            call\n          )\n        }\n      }\n    )\n\n    this.phone.on('newSession', this.onNewCallSession.bind(this))\n\n    if (this.useWebPhone()) {\n      try {\n        const conf = await this.deviceConfig()\n        await this.phone.register(conf as SipConfiguration)\n      } catch (e) {\n        // FIXME add handle error\n        this.log.error(e)\n      }\n    }\n  }\n\n  private onNewCallSession(id: string, session: CallSession) {\n    this.checkAutoAnswer(id)\n  }\n\n  private checkAutoAnswer(id: string) {\n    const call = this.callById(id)\n    if (call && this.phone.isOutboundCall(id)) {\n      call.answer({\n        useVideo: call.videoRequest,\n        useScreen: call.screenRequest,\n      })\n    }\n  }\n\n  private connectToSocket(): Promise<Error | null> {\n    return new Promise<Error | null>((resolve, reject) => {\n      try {\n        this.socket = new Socket(this._config.endpoint)\n        this.socket.connect(this._config.token!)\n      } catch (e) {\n        reject(e)\n\n        return\n      }\n\n      this.socket.on('message', this.onMessage.bind(this))\n      this.socket.on('close', (code: number) => {\n        this.log.error('socket close code: ', code)\n        reject(new Error(`close socket code: ${code}`))\n      })\n      this.socket.on('open', () => {\n        resolve(null)\n      })\n    })\n  }\n\n  private handleCallEvents(event: CallEventData) {\n    let call: Call | undefined\n\n    switch (event.action) {\n      case CallActions.Ringing:\n        call = new Call(\n          this,\n          event as CallInfo,\n          this.phone.getPeerStream(event.id)\n        )\n\n        this.callStore.set(call.id, call)\n\n        this.checkAutoAnswer(event.id)\n        break\n\n      case CallActions.Active:\n        call = this.callById(event.id)\n        if (call) {\n          call.setActive(event)\n        }\n        break\n\n      case CallActions.Bridge:\n        call = this.callById(event.id)\n        if (call) {\n          // const session = this.phone.getSession(event.id);\n          // if (session) {\n          //   debugger\n          // }\n          call.setInfo(event as CallInfo)\n        }\n        break\n\n      case CallActions.Execute:\n        call = this.callById(event.id)\n        if (call) {\n          call.setExecute(event as CallEventExecute)\n        }\n        break\n\n      case CallActions.DTMF:\n        call = this.callById(event.id)\n        if (call) {\n          call.addDigit(event as CallEventDTMF)\n        }\n        break\n\n      case CallActions.Voice:\n        call = this.callById(event.id)\n        if (call) {\n          call.setVoice(event)\n        }\n        break\n\n      case CallActions.Silence:\n        call = this.callById(event.id)\n        if (call) {\n          call.setSilence(event)\n        }\n        break\n\n      case CallActions.Hold:\n        call = this.callById(event.id)\n        if (call) {\n          call.setState(event)\n        }\n        break\n\n      case CallActions.Hangup:\n        call = this.callById(event.id)\n        if (call) {\n          call.setHangup(event as CallHangup)\n          this.callStore.delete(call.id)\n        }\n        break\n\n      default:\n        throw new Error('Unhandled action')\n    }\n\n    if (call) {\n      this.eventHandler.emit(WEBSOCKET_EVENT_CALL, event.action, call)\n    }\n  }\n}\n"],"names":["configuration","basePath","axios","this","BASE_PATH","replace","Error","__extends","field","msg","_super","_this","ProtobufNullValue","AgentServiceApiAxiosParamCreator","createAgent","body","options","RequiredError","baseOptions","localVarUrlObj","globalImportUrl.parse","localVarRequestOptions","method","localVarHeaderParameter","apiKey","localVarApiKeyValue","query","search","headers","data","JSON","stringify","undefined","url","globalImportUrl.format","deleteAgent","id","domain_id","localVarPath","encodeURIComponent","String","localVarQueryParameter","readAgent","searchAgent","page","size","q","searchAgentInQueue","searchAgentInTeam","searchAgentStateHistory","agent_id","time_from","time_to","updateAgent","updateAgentStatus","AgentServiceApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI","AgentServiceApi","AgentSkillServiceApiAxiosParamCreator","createAgentSkill","deleteAgentSkill","readAgentSkill","searchAgentSkill","updateAgentSkill","AgentSkillServiceApiFp","AgentSkillServiceApi","AgentTeamServiceApiAxiosParamCreator","createAgentTeam","deleteAgentTeam","readAgentTeam","searchAgentTeam","updateAgentTeam","AgentTeamServiceApiFp","AgentTeamServiceApi","BackendProfileServiceApiAxiosParamCreator","createBackendProfile","deleteBackendProfile","patchBackendProfile","readBackendProfile","searchBackendProfile","updateBackendProfile","BackendProfileServiceApiFp","BackendProfileServiceApi","BucketServiceApiAxiosParamCreator","createBucket","deleteBucket","readBucket","searchBucket","updateBucket","BucketServiceApiFp","BucketServiceApi","CalendarServiceApiAxiosParamCreator","createCalendar","deleteCalendar","readCalendar","searchCalendar","searchTimezones","updateCalendar","CalendarServiceApiFp","CalendarServiceApi","CommunicationTypeServiceApiAxiosParamCreator","createCommunicationType","deleteCommunicationType","readCommunicationType","searchCommunicationType","updateCommunicationType","CommunicationTypeServiceApiFp","CommunicationTypeServiceApi","ListServiceApiAxiosParamCreator","createList","createListCommunication","list_id","deleteList","deleteListCommunication","readList","readListCommunication","searchList","searchListCommunication","updateList","updateListCommunication","ListServiceApiFp","ListServiceApi","MediaFileServiceApiAxiosParamCreator","deleteMediaFile","readMediaFile","searchMediaFile","MediaFileServiceApiFp","MediaFileServiceApi","MemberServiceApiAxiosParamCreator","createMember","queue_id","createMemberBulk","deleteMember","deleteMembers","readMember","searchMember","searchMemberAttempts","member_id","updateMember","MemberServiceApiFp","MemberServiceApi","OutboundResourceGroupServiceApiAxiosParamCreator","createOutboundResourceGroup","createOutboundResourceInGroup","group_id","deleteOutboundResourceGroup","deleteOutboundResourceInGroup","readOutboundResourceGroup","readOutboundResourceInGroup","searchOutboundResourceGroup","searchOutboundResourceInGroup","updateOutboundResourceGroup","updateOutboundResourceInGroup","OutboundResourceGroupServiceApiFp","OutboundResourceGroupServiceApi","OutboundResourceServiceApiAxiosParamCreator","createOutboundResource","createOutboundResourceDisplay","resource_id","deleteOutboundResource","deleteOutboundResourceDisplay","patchOutboundResource","readOutboundResource","readOutboundResourceDisplay","searchOutboundResource","searchOutboundResourceDisplay","updateOutboundResource","updateOutboundResourceDisplay","OutboundResourceServiceApiFp","OutboundResourceServiceApi","QueueBucketServiceApiAxiosParamCreator","createQueueBucket","deleteQueueBucket","readQueueBucket","searchQueueBucket","updateQueueBucket","QueueBucketServiceApiFp","QueueBucketServiceApi","QueueResourcesServiceApiAxiosParamCreator","createQueueResourceGroup","deleteQueueResourceGroup","readQueueResourceGroup","searchQueueResourceGroup","updateQueueResourceGroup","QueueResourcesServiceApiFp","QueueResourcesServiceApi","QueueRoutingServiceApiAxiosParamCreator","createQueueRouting","deleteQueueRouting","readQueueRouting","searchQueueRouting","updateQueueRouting","QueueRoutingServiceApiFp","QueueRoutingServiceApi","QueueServiceApiAxiosParamCreator","createQueue","deleteQueue","patchQueue","readQueue","searchQueue","updateQueue","QueueServiceApiFp","QueueServiceApi","ResourceTeamServiceApiAxiosParamCreator","createResourceTeamAgent","team_id","createResourceTeamSkill","deleteResourceTeamAgent","deleteResourceTeamSkill","readResourceTeamAgent","readResourceTeamSkill","searchResourceTeamAgent","searchResourceTeamSkill","updateResourceTeamAgent","updateResourceTeamSkill","ResourceTeamServiceApiFp","ResourceTeamServiceApi","RoutingOutboundCallServiceApiAxiosParamCreator","createRoutingOutboundCall","deleteRoutingOutboundCall","movePositionRoutingOutboundCall","from_id","to_id","patchRoutingOutboundCall","readRoutingOutboundCall","searchRoutingOutboundCall","updateRoutingOutboundCall","RoutingOutboundCallServiceApiFp","RoutingOutboundCallServiceApi","RoutingSchemaServiceApiAxiosParamCreator","createRoutingSchema","deleteRoutingSchema","patchRoutingSchema","readRoutingSchema","searchRoutingSchema","updateRoutingSchema","RoutingSchemaServiceApiFp","RoutingSchemaServiceApi","RoutingVariableServiceApiAxiosParamCreator","createRoutingVariable","deleteRoutingVariable","readRoutingVariable","searchRoutingVariable","updateRoutingVariable","RoutingVariableServiceApiFp","RoutingVariableServiceApi","SkillServiceApiAxiosParamCreator","createSkill","deleteSkill","readSkill","searchSkill","updateSkill","SkillServiceApiFp","SkillServiceApi","SupervisorInTeamServiceApiAxiosParamCreator","createSupervisorInTeam","deleteSupervisorInTeam","readSupervisorInTeam","searchSupervisorInTeam","updateSupervisorInTeam","SupervisorInTeamServiceApiFp","SupervisorInTeamServiceApi","param","username","password","accessToken","CallActions","CallDirection","Call","e","answeredAt","Date","now","setState","Object","displayNumber","displayName","_muted","videoFlow","indexOf","s","ownerCallId","owner_id","parentCallId","parent_id","destination","direction","fromNumber","from_number","fromName","from_name","toName","to_name","toNumber","to_number","payload","gateway_id","_gatewayId","video_flow","screenRequest","screen_request","videoRequest","video_request","state","action","hangupAt","streams","peerStreams","hangupCause","cause","voice","applications","push","application","digits","digit","req","sessionId","client","phone","hasSession","answer","_cause","Inbound","node_id","nodeName","Hold","unHold","hold","dtmf","mute","res","_a","call","parent_node_id","nodeId","sendToCallId","inviteToUser","createdAt","node_name","setInfo","Log","_i","supportingDetails","emitLogMessage","msgType","length","console","EventEmitter","SipPhone","useScreen","video","audio","screen","useVideo","useAudio","sessionTimersExpires","pcConfig","iceServers","urls","rtcOfferConstraints","offerToReceiveAudio","offerToReceiveVideo","mediaConstraints","getMediaConstraints","sessionCache","has","get","session","getSession","sip","connection","getRemoteStreams","callOption","sipConf","socket","SipClient.WebSocketInterface","server","realm","uri","authorization_user","ha1","user_agent","userAgent","sockets","session_timers","register_expires","connection_recovery_min_interval","connection_recovery_max_interval","ua","SipClient.UA","on","log","error","getHeader","callSession","incoming","instance_id","storeSession","peer","peerconnection","addEventListener","evt","emit","Array","stream","removeSession","isOutboundCall","getPeerStream","start","instanceId","unregister","from","values","delete","set","Map","SipClient.debug","enable","removeAllListeners","clear","Socket","token","WebSocket","host","onclose","onClose","code","onmessage","onMessage","onopen","onOpen","send","close","message","parse","Response","WEBSOCKET_EVENT_CALL","Client","connectToSocket","handler","eventHandler","callStore","_config","connectionInfo","server_version","sock_id","Promise","resolve","reject","queueRequest","reqSeq","seq","registerWebDevice","debug","seq_reply","promise","status","STATUS_OK","event","connected","_b","user_id","handleCallEvents","info","callById","setPeerStreams","PeerStream","onNewCallSession","bind","useWebPhone","deviceConfig","conf","register","e_1","checkAutoAnswer","endpoint","connect","Ringing","Active","setActive","Bridge","Execute","setExecute","DTMF","addDigit","Voice","setVoice","Silence","setSilence","Hangup","setHangup"],"mappings":"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"}