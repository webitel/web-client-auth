import { parse, format } from 'url';
import globalAxios from 'axios';
import { EventEmitter } from 'ee-ts';
import { debug, WebSocketInterface, UA } from 'jssip';

// tslint:disable
const BASE_PATH = 'http://dev.webitel.com'.replace(/\/+$/, '');
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = 'RequiredError';
    }
}

// tslint:disable
/**
 * `NullValue` is a singleton enumeration to represent the null value for the  `Value` type union.     The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
var ProtobufNullValue;
(function (ProtobufNullValue) {
    ProtobufNullValue["NULLVALUE"] = "NULL_VALUE";
})(ProtobufNullValue || (ProtobufNullValue = {}));
/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
const AgentServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgent.');
            }
            const localVarPath = `/call_center/agents`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Agent
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Agent item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Agent
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/agents`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInQueue(id, page, size, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling searchAgentInQueue.');
            }
            const localVarPath = `/call_center/agents/{id}/queues`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInTeam(id, page, size, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling searchAgentInTeam.');
            }
            const localVarPath = `/call_center/agents/{id}/teams`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Agent
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [time_from]
         * @param {string} [time_to]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling searchAgentStateHistory.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/states/history`.replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (time_from !== undefined) {
                localVarQueryParameter['time_from'] = time_from;
            }
            if (time_to !== undefined) {
                localVarQueryParameter['time_to'] = time_to;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Agent
         * @param {string} id
         * @param {EngineUpdateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgent.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgent.');
            }
            const localVarPath = `/call_center/agents/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Change agent status
         * @param {string} id
         * @param {EngineAgentStatusRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentStatus.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentStatus.');
            }
            const localVarPath = `/call_center/agents/{id}/status`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AgentServiceApi - functional programming interface
 * @export
 */
const AgentServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).createAgent(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove Agent
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).deleteAgent(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Agent item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).readAgent(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Agent
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(page, size, q, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgent(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInQueue(id, page, size, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentInQueue(id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInTeam(id, page, size, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentInTeam(id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Agent
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [time_from]
         * @param {string} [time_to]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update Agent
         * @param {string} id
         * @param {EngineUpdateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(id, body, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgent(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Change agent status
         * @param {string} id
         * @param {EngineAgentStatusRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(id, body, options) {
            const localVarAxiosArgs = AgentServiceApiAxiosParamCreator(configuration).updateAgentStatus(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AgentServiceApi - factory interface
 * @export
 */
const AgentServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create Agent
         * @param {EngineCreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body, options) {
            return AgentServiceApiFp(configuration).createAgent(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove Agent
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id, domain_id, options) {
            return AgentServiceApiFp(configuration).deleteAgent(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Agent item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgent(id, domain_id, options) {
            return AgentServiceApiFp(configuration).readAgent(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Agent
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgent(page, size, q, domain_id, options) {
            return AgentServiceApiFp(configuration).searchAgent(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInQueue(id, page, size, domain_id, options) {
            return AgentServiceApiFp(configuration).searchAgentInQueue(id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentInTeam(id, page, size, domain_id, options) {
            return AgentServiceApiFp(configuration).searchAgentInTeam(id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Agent
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [time_from]
         * @param {string} [time_to]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options) {
            return AgentServiceApiFp(configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update Agent
         * @param {string} id
         * @param {EngineUpdateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(id, body, options) {
            return AgentServiceApiFp(configuration).updateAgent(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Change agent status
         * @param {string} id
         * @param {EngineAgentStatusRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentStatus(id, body, options) {
            return AgentServiceApiFp(configuration).updateAgentStatus(id, body, options)(axios, basePath);
        },
    };
};
/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
class AgentServiceApi extends BaseAPI {
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    createAgent(body, options) {
        return AgentServiceApiFp(this.configuration).createAgent(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    deleteAgent(id, domain_id, options) {
        return AgentServiceApiFp(this.configuration).deleteAgent(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    readAgent(id, domain_id, options) {
        return AgentServiceApiFp(this.configuration).readAgent(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    searchAgent(page, size, q, domain_id, options) {
        return AgentServiceApiFp(this.configuration).searchAgent(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    searchAgentInQueue(id, page, size, domain_id, options) {
        return AgentServiceApiFp(this.configuration).searchAgentInQueue(id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    searchAgentInTeam(id, page, size, domain_id, options) {
        return AgentServiceApiFp(this.configuration).searchAgentInTeam(id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Agent
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [time_from]
     * @param {string} [time_to]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options) {
        return AgentServiceApiFp(this.configuration).searchAgentStateHistory(agent_id, page, size, time_from, time_to, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    updateAgent(id, body, options) {
        return AgentServiceApiFp(this.configuration).updateAgent(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentServiceApi
     */
    updateAgentStatus(id, body, options) {
        return AgentServiceApiFp(this.configuration).updateAgentStatus(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * AgentSkillServiceApi - axios parameter creator
 * @export
 */
const AgentSkillServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create AgentSkill
         * @param {string} agent_id
         * @param {EngineCreateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(agent_id, body, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling createAgentSkill.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agent_id, id, domain_id, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling deleteAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary AgentSkill item
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agent_id, id, domain_id, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling readAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of AgentSkill
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agent_id, page, size, domain_id, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling searchAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills`.replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {EngineUpdateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(agent_id, id, body, options = {}) {
            // verify required parameter 'agent_id' is not null or undefined
            if (agent_id === null || agent_id === undefined) {
                throw new RequiredError('agent_id', 'Required parameter agent_id was null or undefined when calling updateAgentSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentSkill.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentSkill.');
            }
            const localVarPath = `/call_center/agents/{agent_id}/skills/{id}`
                .replace(`{${'agent_id'}}`, encodeURIComponent(String(agent_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AgentSkillServiceApi - functional programming interface
 * @export
 */
const AgentSkillServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create AgentSkill
         * @param {string} agent_id
         * @param {EngineCreateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(agent_id, body, options) {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).createAgentSkill(agent_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agent_id, id, domain_id, options) {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).deleteAgentSkill(agent_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary AgentSkill item
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agent_id, id, domain_id, options) {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).readAgentSkill(agent_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of AgentSkill
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agent_id, page, size, domain_id, options) {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).searchAgentSkill(agent_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {EngineUpdateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(agent_id, id, body, options) {
            const localVarAxiosArgs = AgentSkillServiceApiAxiosParamCreator(configuration).updateAgentSkill(agent_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AgentSkillServiceApi - factory interface
 * @export
 */
const AgentSkillServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create AgentSkill
         * @param {string} agent_id
         * @param {EngineCreateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentSkill(agent_id, body, options) {
            return AgentSkillServiceApiFp(configuration).createAgentSkill(agent_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentSkill(agent_id, id, domain_id, options) {
            return AgentSkillServiceApiFp(configuration).deleteAgentSkill(agent_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary AgentSkill item
         * @param {string} agent_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentSkill(agent_id, id, domain_id, options) {
            return AgentSkillServiceApiFp(configuration).readAgentSkill(agent_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of AgentSkill
         * @param {string} agent_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentSkill(agent_id, page, size, domain_id, options) {
            return AgentSkillServiceApiFp(configuration).searchAgentSkill(agent_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update AgentSkill
         * @param {string} agent_id
         * @param {string} id
         * @param {EngineUpdateAgentSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentSkill(agent_id, id, body, options) {
            return AgentSkillServiceApiFp(configuration).updateAgentSkill(agent_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * AgentSkillServiceApi - object-oriented interface
 * @export
 * @class AgentSkillServiceApi
 * @extends {BaseAPI}
 */
class AgentSkillServiceApi extends BaseAPI {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agent_id
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    createAgentSkill(agent_id, body, options) {
        return AgentSkillServiceApiFp(this.configuration).createAgentSkill(agent_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    deleteAgentSkill(agent_id, id, domain_id, options) {
        return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(agent_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary AgentSkill item
     * @param {string} agent_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    readAgentSkill(agent_id, id, domain_id, options) {
        return AgentSkillServiceApiFp(this.configuration).readAgentSkill(agent_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agent_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    searchAgentSkill(agent_id, page, size, domain_id, options) {
        return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(agent_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agent_id
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentSkillServiceApi
     */
    updateAgentSkill(agent_id, id, body, options) {
        return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(agent_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * AgentTeamServiceApi - axios parameter creator
 * @export
 */
const AgentTeamServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAgentTeam.');
            }
            const localVarPath = `/call_center/teams`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove AgentTeam
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary AgentTeam item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of AgentTeam
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/teams`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update AgentTeam
         * @param {string} id
         * @param {EngineUpdateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateAgentTeam.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAgentTeam.');
            }
            const localVarPath = `/call_center/teams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AgentTeamServiceApi - functional programming interface
 * @export
 */
const AgentTeamServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body, options) {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).createAgentTeam(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove AgentTeam
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id, domain_id, options) {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).deleteAgentTeam(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary AgentTeam item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id, domain_id, options) {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).readAgentTeam(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of AgentTeam
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(page, size, q, domain_id, options) {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).searchAgentTeam(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update AgentTeam
         * @param {string} id
         * @param {EngineUpdateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(id, body, options) {
            const localVarAxiosArgs = AgentTeamServiceApiAxiosParamCreator(configuration).updateAgentTeam(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AgentTeamServiceApi - factory interface
 * @export
 */
const AgentTeamServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create AgentTeam
         * @param {EngineCreateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentTeam(body, options) {
            return AgentTeamServiceApiFp(configuration).createAgentTeam(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove AgentTeam
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentTeam(id, domain_id, options) {
            return AgentTeamServiceApiFp(configuration).deleteAgentTeam(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary AgentTeam item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAgentTeam(id, domain_id, options) {
            return AgentTeamServiceApiFp(configuration).readAgentTeam(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of AgentTeam
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAgentTeam(page, size, q, domain_id, options) {
            return AgentTeamServiceApiFp(configuration).searchAgentTeam(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update AgentTeam
         * @param {string} id
         * @param {EngineUpdateAgentTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentTeam(id, body, options) {
            return AgentTeamServiceApiFp(configuration).updateAgentTeam(id, body, options)(axios, basePath);
        },
    };
};
/**
 * AgentTeamServiceApi - object-oriented interface
 * @export
 * @class AgentTeamServiceApi
 * @extends {BaseAPI}
 */
class AgentTeamServiceApi extends BaseAPI {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    createAgentTeam(body, options) {
        return AgentTeamServiceApiFp(this.configuration).createAgentTeam(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    deleteAgentTeam(id, domain_id, options) {
        return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    readAgentTeam(id, domain_id, options) {
        return AgentTeamServiceApiFp(this.configuration).readAgentTeam(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    searchAgentTeam(page, size, q, domain_id, options) {
        return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentTeamServiceApi
     */
    updateAgentTeam(id, body, options) {
        return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * BackendProfileServiceApi - axios parameter creator
 * @export
 */
const BackendProfileServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create BackendProfile
         * @param {StorageCreateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackendProfile(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createBackendProfile.');
            }
            const localVarPath = `/storage/backend_profiles`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove BackendProfile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackendProfile(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteBackendProfile.');
            }
            const localVarPath = `/storage/backend_profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch BackendProfile
         * @param {string} id
         * @param {StoragePatchBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBackendProfile(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchBackendProfile.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchBackendProfile.');
            }
            const localVarPath = `/storage/backend_profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary BackendProfile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBackendProfile(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readBackendProfile.');
            }
            const localVarPath = `/storage/backend_profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of BackendProfile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBackendProfile(page, size, q, domain_id, options = {}) {
            const localVarPath = `/storage/backend_profiles`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update BackendProfile
         * @param {string} id
         * @param {StorageUpdateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackendProfile(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateBackendProfile.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateBackendProfile.');
            }
            const localVarPath = `/storage/backend_profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BackendProfileServiceApi - functional programming interface
 * @export
 */
const BackendProfileServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create BackendProfile
         * @param {StorageCreateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackendProfile(body, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).createBackendProfile(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove BackendProfile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackendProfile(id, domain_id, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).deleteBackendProfile(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Patch BackendProfile
         * @param {string} id
         * @param {StoragePatchBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBackendProfile(id, body, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).patchBackendProfile(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary BackendProfile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBackendProfile(id, domain_id, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).readBackendProfile(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of BackendProfile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBackendProfile(page, size, q, domain_id, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).searchBackendProfile(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update BackendProfile
         * @param {string} id
         * @param {StorageUpdateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackendProfile(id, body, options) {
            const localVarAxiosArgs = BackendProfileServiceApiAxiosParamCreator(configuration).updateBackendProfile(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BackendProfileServiceApi - factory interface
 * @export
 */
const BackendProfileServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create BackendProfile
         * @param {StorageCreateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackendProfile(body, options) {
            return BackendProfileServiceApiFp(configuration).createBackendProfile(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove BackendProfile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackendProfile(id, domain_id, options) {
            return BackendProfileServiceApiFp(configuration).deleteBackendProfile(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Patch BackendProfile
         * @param {string} id
         * @param {StoragePatchBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBackendProfile(id, body, options) {
            return BackendProfileServiceApiFp(configuration).patchBackendProfile(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary BackendProfile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBackendProfile(id, domain_id, options) {
            return BackendProfileServiceApiFp(configuration).readBackendProfile(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of BackendProfile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBackendProfile(page, size, q, domain_id, options) {
            return BackendProfileServiceApiFp(configuration).searchBackendProfile(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update BackendProfile
         * @param {string} id
         * @param {StorageUpdateBackendProfileRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackendProfile(id, body, options) {
            return BackendProfileServiceApiFp(configuration).updateBackendProfile(id, body, options)(axios, basePath);
        },
    };
};
/**
 * BackendProfileServiceApi - object-oriented interface
 * @export
 * @class BackendProfileServiceApi
 * @extends {BaseAPI}
 */
class BackendProfileServiceApi extends BaseAPI {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    createBackendProfile(body, options) {
        return BackendProfileServiceApiFp(this.configuration).createBackendProfile(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    deleteBackendProfile(id, domain_id, options) {
        return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    patchBackendProfile(id, body, options) {
        return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    readBackendProfile(id, domain_id, options) {
        return BackendProfileServiceApiFp(this.configuration).readBackendProfile(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    searchBackendProfile(page, size, q, domain_id, options) {
        return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendProfileServiceApi
     */
    updateBackendProfile(id, body, options) {
        return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * BucketServiceApi - axios parameter creator
 * @export
 */
const BucketServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Bucket
         * @param {EngineCreateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createBucket.');
            }
            const localVarPath = `/call_center/buckets`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Bucket
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteBucket.');
            }
            const localVarPath = `/call_center/buckets/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bucket item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBucket(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readBucket.');
            }
            const localVarPath = `/call_center/buckets/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Bucket
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBucket(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/buckets`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Bucket
         * @param {string} id
         * @param {EngineUpdateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBucket(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateBucket.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateBucket.');
            }
            const localVarPath = `/call_center/buckets/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BucketServiceApi - functional programming interface
 * @export
 */
const BucketServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create Bucket
         * @param {EngineCreateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(body, options) {
            const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).createBucket(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove Bucket
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(id, domain_id, options) {
            const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).deleteBucket(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Bucket item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBucket(id, domain_id, options) {
            const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).readBucket(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Bucket
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBucket(page, size, q, domain_id, options) {
            const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).searchBucket(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update Bucket
         * @param {string} id
         * @param {EngineUpdateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBucket(id, body, options) {
            const localVarAxiosArgs = BucketServiceApiAxiosParamCreator(configuration).updateBucket(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BucketServiceApi - factory interface
 * @export
 */
const BucketServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create Bucket
         * @param {EngineCreateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(body, options) {
            return BucketServiceApiFp(configuration).createBucket(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove Bucket
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(id, domain_id, options) {
            return BucketServiceApiFp(configuration).deleteBucket(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Bucket item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBucket(id, domain_id, options) {
            return BucketServiceApiFp(configuration).readBucket(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Bucket
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBucket(page, size, q, domain_id, options) {
            return BucketServiceApiFp(configuration).searchBucket(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update Bucket
         * @param {string} id
         * @param {EngineUpdateBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBucket(id, body, options) {
            return BucketServiceApiFp(configuration).updateBucket(id, body, options)(axios, basePath);
        },
    };
};
/**
 * BucketServiceApi - object-oriented interface
 * @export
 * @class BucketServiceApi
 * @extends {BaseAPI}
 */
class BucketServiceApi extends BaseAPI {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketServiceApi
     */
    createBucket(body, options) {
        return BucketServiceApiFp(this.configuration).createBucket(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketServiceApi
     */
    deleteBucket(id, domain_id, options) {
        return BucketServiceApiFp(this.configuration).deleteBucket(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketServiceApi
     */
    readBucket(id, domain_id, options) {
        return BucketServiceApiFp(this.configuration).readBucket(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketServiceApi
     */
    searchBucket(page, size, q, domain_id, options) {
        return BucketServiceApiFp(this.configuration).searchBucket(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketServiceApi
     */
    updateBucket(id, body, options) {
        return BucketServiceApiFp(this.configuration).updateBucket(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * CalendarServiceApi - axios parameter creator
 * @export
 */
const CalendarServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCalendar.');
            }
            const localVarPath = `/calendars`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove calendar
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteCalendar.');
            }
            const localVarPath = `/calendars/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Calendar item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readCalendar.');
            }
            const localVarPath = `/calendars/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of calendar
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(page, size, q, domain_id, options = {}) {
            const localVarPath = `/calendars`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List timezones
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(page, size, q, options = {}) {
            const localVarPath = `/calendars/timezones`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update calendar
         * @param {string} id
         * @param {EngineUpdateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCalendar.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCalendar.');
            }
            const localVarPath = `/calendars/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CalendarServiceApi - functional programming interface
 * @export
 */
const CalendarServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).createCalendar(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove calendar
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id, domain_id, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).deleteCalendar(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Calendar item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id, domain_id, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).readCalendar(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of calendar
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(page, size, q, domain_id, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchCalendar(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List timezones
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(page, size, q, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).searchTimezones(page, size, q, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update calendar
         * @param {string} id
         * @param {EngineUpdateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(id, body, options) {
            const localVarAxiosArgs = CalendarServiceApiAxiosParamCreator(configuration).updateCalendar(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CalendarServiceApi - factory interface
 * @export
 */
const CalendarServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create calendar
         * @param {EngineCreateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(body, options) {
            return CalendarServiceApiFp(configuration).createCalendar(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove calendar
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(id, domain_id, options) {
            return CalendarServiceApiFp(configuration).deleteCalendar(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Calendar item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCalendar(id, domain_id, options) {
            return CalendarServiceApiFp(configuration).readCalendar(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of calendar
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCalendar(page, size, q, domain_id, options) {
            return CalendarServiceApiFp(configuration).searchCalendar(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List timezones
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTimezones(page, size, q, options) {
            return CalendarServiceApiFp(configuration).searchTimezones(page, size, q, options)(axios, basePath);
        },
        /**
         *
         * @summary Update calendar
         * @param {string} id
         * @param {EngineUpdateCalendarRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(id, body, options) {
            return CalendarServiceApiFp(configuration).updateCalendar(id, body, options)(axios, basePath);
        },
    };
};
/**
 * CalendarServiceApi - object-oriented interface
 * @export
 * @class CalendarServiceApi
 * @extends {BaseAPI}
 */
class CalendarServiceApi extends BaseAPI {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    createCalendar(body, options) {
        return CalendarServiceApiFp(this.configuration).createCalendar(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    deleteCalendar(id, domain_id, options) {
        return CalendarServiceApiFp(this.configuration).deleteCalendar(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    readCalendar(id, domain_id, options) {
        return CalendarServiceApiFp(this.configuration).readCalendar(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    searchCalendar(page, size, q, domain_id, options) {
        return CalendarServiceApiFp(this.configuration).searchCalendar(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    searchTimezones(page, size, q, options) {
        return CalendarServiceApiFp(this.configuration).searchTimezones(page, size, q, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarServiceApi
     */
    updateCalendar(id, body, options) {
        return CalendarServiceApiFp(this.configuration).updateCalendar(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * CommunicationTypeServiceApi - axios parameter creator
 * @export
 */
const CommunicationTypeServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create CommunicationType
         * @param {EngineCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommunicationType(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCommunicationType.');
            }
            const localVarPath = `/call_center/communication_type`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove CommunicationType
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommunicationType(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteCommunicationType.');
            }
            const localVarPath = `/call_center/communication_type/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary CommunicationType item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCommunicationType(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readCommunicationType.');
            }
            const localVarPath = `/call_center/communication_type/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of CommunicationType
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCommunicationType(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/communication_type`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update CommunicationType
         * @param {string} id
         * @param {EngineUpdateCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommunicationType(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCommunicationType.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCommunicationType.');
            }
            const localVarPath = `/call_center/communication_type/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CommunicationTypeServiceApi - functional programming interface
 * @export
 */
const CommunicationTypeServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create CommunicationType
         * @param {EngineCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommunicationType(body, options) {
            const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).createCommunicationType(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove CommunicationType
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommunicationType(id, domain_id, options) {
            const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).deleteCommunicationType(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary CommunicationType item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCommunicationType(id, domain_id, options) {
            const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).readCommunicationType(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of CommunicationType
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCommunicationType(page, size, q, domain_id, options) {
            const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).searchCommunicationType(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update CommunicationType
         * @param {string} id
         * @param {EngineUpdateCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommunicationType(id, body, options) {
            const localVarAxiosArgs = CommunicationTypeServiceApiAxiosParamCreator(configuration).updateCommunicationType(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CommunicationTypeServiceApi - factory interface
 * @export
 */
const CommunicationTypeServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create CommunicationType
         * @param {EngineCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommunicationType(body, options) {
            return CommunicationTypeServiceApiFp(configuration).createCommunicationType(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove CommunicationType
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommunicationType(id, domain_id, options) {
            return CommunicationTypeServiceApiFp(configuration).deleteCommunicationType(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary CommunicationType item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCommunicationType(id, domain_id, options) {
            return CommunicationTypeServiceApiFp(configuration).readCommunicationType(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of CommunicationType
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCommunicationType(page, size, q, domain_id, options) {
            return CommunicationTypeServiceApiFp(configuration).searchCommunicationType(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update CommunicationType
         * @param {string} id
         * @param {EngineUpdateCommunicationTypeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommunicationType(id, body, options) {
            return CommunicationTypeServiceApiFp(configuration).updateCommunicationType(id, body, options)(axios, basePath);
        },
    };
};
/**
 * CommunicationTypeServiceApi - object-oriented interface
 * @export
 * @class CommunicationTypeServiceApi
 * @extends {BaseAPI}
 */
class CommunicationTypeServiceApi extends BaseAPI {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationTypeServiceApi
     */
    createCommunicationType(body, options) {
        return CommunicationTypeServiceApiFp(this.configuration).createCommunicationType(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationTypeServiceApi
     */
    deleteCommunicationType(id, domain_id, options) {
        return CommunicationTypeServiceApiFp(this.configuration).deleteCommunicationType(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationTypeServiceApi
     */
    readCommunicationType(id, domain_id, options) {
        return CommunicationTypeServiceApiFp(this.configuration).readCommunicationType(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationTypeServiceApi
     */
    searchCommunicationType(page, size, q, domain_id, options) {
        return CommunicationTypeServiceApiFp(this.configuration).searchCommunicationType(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationTypeServiceApi
     */
    updateCommunicationType(id, body, options) {
        return CommunicationTypeServiceApiFp(this.configuration).updateCommunicationType(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * ListServiceApi - axios parameter creator
 * @export
 */
const ListServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create List
         * @param {EngineCreateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createList.');
            }
            const localVarPath = `/call_center/list`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create ListCommunication
         * @param {string} list_id
         * @param {EngineCreateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createListCommunication(list_id, body, options = {}) {
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling createListCommunication.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createListCommunication.');
            }
            const localVarPath = `/call_center/list/{list_id}/communication`.replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove list
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteList.');
            }
            const localVarPath = `/call_center/list/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListCommunication(list_id, id, domain_id, options = {}) {
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling deleteListCommunication.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteListCommunication.');
            }
            const localVarPath = `/call_center/list/{list_id}/communication/{id}`
                .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readList(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readList.');
            }
            const localVarPath = `/call_center/list/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List item
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readListCommunication(list_id, id, domain_id, options = {}) {
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling readListCommunication.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readListCommunication.');
            }
            const localVarPath = `/call_center/list/{list_id}/communication/{id}`
                .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of List
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchList(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/list`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of List
         * @param {string} list_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchListCommunication(list_id, page, size, q, domain_id, options = {}) {
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling searchListCommunication.');
            }
            const localVarPath = `/call_center/list/{list_id}/communication`.replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update list
         * @param {string} id
         * @param {EngineUpdateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateList.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateList.');
            }
            const localVarPath = `/call_center/list/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {EngineUpdateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListCommunication(list_id, id, body, options = {}) {
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling updateListCommunication.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateListCommunication.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateListCommunication.');
            }
            const localVarPath = `/call_center/list/{list_id}/communication/{id}`
                .replace(`{${'list_id'}}`, encodeURIComponent(String(list_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ListServiceApi - functional programming interface
 * @export
 */
const ListServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create List
         * @param {EngineCreateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).createList(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create ListCommunication
         * @param {string} list_id
         * @param {EngineCreateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createListCommunication(list_id, body, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).createListCommunication(list_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove list
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList(id, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).deleteList(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListCommunication(list_id, id, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).deleteListCommunication(list_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readList(id, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).readList(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List item
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readListCommunication(list_id, id, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).readListCommunication(list_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of List
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchList(page, size, q, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).searchList(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of List
         * @param {string} list_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchListCommunication(list_id, page, size, q, domain_id, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).searchListCommunication(list_id, page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update list
         * @param {string} id
         * @param {EngineUpdateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList(id, body, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).updateList(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {EngineUpdateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListCommunication(list_id, id, body, options) {
            const localVarAxiosArgs = ListServiceApiAxiosParamCreator(configuration).updateListCommunication(list_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ListServiceApi - factory interface
 * @export
 */
const ListServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create List
         * @param {EngineCreateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body, options) {
            return ListServiceApiFp(configuration).createList(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create ListCommunication
         * @param {string} list_id
         * @param {EngineCreateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createListCommunication(list_id, body, options) {
            return ListServiceApiFp(configuration).createListCommunication(list_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove list
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList(id, domain_id, options) {
            return ListServiceApiFp(configuration).deleteList(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListCommunication(list_id, id, domain_id, options) {
            return ListServiceApiFp(configuration).deleteListCommunication(list_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readList(id, domain_id, options) {
            return ListServiceApiFp(configuration).readList(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List item
         * @param {string} list_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readListCommunication(list_id, id, domain_id, options) {
            return ListServiceApiFp(configuration).readListCommunication(list_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of List
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchList(page, size, q, domain_id, options) {
            return ListServiceApiFp(configuration).searchList(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of List
         * @param {string} list_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchListCommunication(list_id, page, size, q, domain_id, options) {
            return ListServiceApiFp(configuration).searchListCommunication(list_id, page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update list
         * @param {string} id
         * @param {EngineUpdateListRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList(id, body, options) {
            return ListServiceApiFp(configuration).updateList(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Update ListCommunication
         * @param {string} list_id
         * @param {string} id
         * @param {EngineUpdateListCommunicationRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListCommunication(list_id, id, body, options) {
            return ListServiceApiFp(configuration).updateListCommunication(list_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * ListServiceApi - object-oriented interface
 * @export
 * @class ListServiceApi
 * @extends {BaseAPI}
 */
class ListServiceApi extends BaseAPI {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    createList(body, options) {
        return ListServiceApiFp(this.configuration).createList(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Create ListCommunication
     * @param {string} list_id
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    createListCommunication(list_id, body, options) {
        return ListServiceApiFp(this.configuration).createListCommunication(list_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    deleteList(id, domain_id, options) {
        return ListServiceApiFp(this.configuration).deleteList(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    deleteListCommunication(list_id, id, domain_id, options) {
        return ListServiceApiFp(this.configuration).deleteListCommunication(list_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    readList(id, domain_id, options) {
        return ListServiceApiFp(this.configuration).readList(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List item
     * @param {string} list_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    readListCommunication(list_id, id, domain_id, options) {
        return ListServiceApiFp(this.configuration).readListCommunication(list_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    searchList(page, size, q, domain_id, options) {
        return ListServiceApiFp(this.configuration).searchList(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of List
     * @param {string} list_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    searchListCommunication(list_id, page, size, q, domain_id, options) {
        return ListServiceApiFp(this.configuration).searchListCommunication(list_id, page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    updateList(id, body, options) {
        return ListServiceApiFp(this.configuration).updateList(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update ListCommunication
     * @param {string} list_id
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceApi
     */
    updateListCommunication(list_id, id, body, options) {
        return ListServiceApiFp(this.configuration).updateListCommunication(list_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * MediaFileServiceApi - axios parameter creator
 * @export
 */
const MediaFileServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Remove MediaFile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteMediaFile.');
            }
            const localVarPath = `/storage/media/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary MediaFile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMediaFile(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readMediaFile.');
            }
            const localVarPath = `/storage/media/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search MediaFile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMediaFile(page, size, q, domain_id, options = {}) {
            const localVarPath = `/storage/media`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MediaFileServiceApi - functional programming interface
 * @export
 */
const MediaFileServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Remove MediaFile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id, domain_id, options) {
            const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).deleteMediaFile(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary MediaFile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMediaFile(id, domain_id, options) {
            const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).readMediaFile(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Search MediaFile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMediaFile(page, size, q, domain_id, options) {
            const localVarAxiosArgs = MediaFileServiceApiAxiosParamCreator(configuration).searchMediaFile(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MediaFileServiceApi - factory interface
 * @export
 */
const MediaFileServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Remove MediaFile
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id, domain_id, options) {
            return MediaFileServiceApiFp(configuration).deleteMediaFile(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary MediaFile item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMediaFile(id, domain_id, options) {
            return MediaFileServiceApiFp(configuration).readMediaFile(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Search MediaFile
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMediaFile(page, size, q, domain_id, options) {
            return MediaFileServiceApiFp(configuration).searchMediaFile(page, size, q, domain_id, options)(axios, basePath);
        },
    };
};
/**
 * MediaFileServiceApi - object-oriented interface
 * @export
 * @class MediaFileServiceApi
 * @extends {BaseAPI}
 */
class MediaFileServiceApi extends BaseAPI {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaFileServiceApi
     */
    deleteMediaFile(id, domain_id, options) {
        return MediaFileServiceApiFp(this.configuration).deleteMediaFile(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaFileServiceApi
     */
    readMediaFile(id, domain_id, options) {
        return MediaFileServiceApiFp(this.configuration).readMediaFile(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaFileServiceApi
     */
    searchMediaFile(page, size, q, domain_id, options) {
        return MediaFileServiceApiFp(this.configuration).searchMediaFile(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
}
/**
 * MemberServiceApi - axios parameter creator
 * @export
 */
const MemberServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createMember.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createMember.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberBulkRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberBulk(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createMemberBulk.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createMemberBulk.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members/bulk`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DeleteMember
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteMember.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteMember.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DeleteMembers
         * @param {string} queue_id
         * @param {EngineDeleteMembersRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembers(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteMembers.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling deleteMembers.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readMember.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readMember.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Member
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMember(queue_id, page, size, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchMember.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SearchMemberAttempts
         * @param {string} queue_id
         * @param {string} member_id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberAttempts(queue_id, member_id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchMemberAttempts.');
            }
            // verify required parameter 'member_id' is not null or undefined
            if (member_id === null || member_id === undefined) {
                throw new RequiredError('member_id', 'Required parameter member_id was null or undefined when calling searchMemberAttempts.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'member_id'}}`, encodeURIComponent(String(member_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UpdateMember
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(queue_id, id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateMember.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateMember.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateMember.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MemberServiceApi - functional programming interface
 * @export
 */
const MemberServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(queue_id, body, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).createMember(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberBulkRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberBulk(queue_id, body, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).createMemberBulk(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary DeleteMember
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).deleteMember(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary DeleteMembers
         * @param {string} queue_id
         * @param {EngineDeleteMembersRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembers(queue_id, body, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).deleteMembers(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).readMember(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Member
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMember(queue_id, page, size, domain_id, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).searchMember(queue_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SearchMemberAttempts
         * @param {string} queue_id
         * @param {string} member_id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberAttempts(queue_id, member_id, domain_id, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).searchMemberAttempts(queue_id, member_id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary UpdateMember
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(queue_id, id, body, options) {
            const localVarAxiosArgs = MemberServiceApiAxiosParamCreator(configuration).updateMember(queue_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MemberServiceApi - factory interface
 * @export
 */
const MemberServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(queue_id, body, options) {
            return MemberServiceApiFp(configuration).createMember(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create Member
         * @param {string} queue_id
         * @param {EngineCreateMemberBulkRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberBulk(queue_id, body, options) {
            return MemberServiceApiFp(configuration).createMemberBulk(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary DeleteMember
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(queue_id, id, domain_id, options) {
            return MemberServiceApiFp(configuration).deleteMember(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary DeleteMembers
         * @param {string} queue_id
         * @param {EngineDeleteMembersRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembers(queue_id, body, options) {
            return MemberServiceApiFp(configuration).deleteMembers(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember(queue_id, id, domain_id, options) {
            return MemberServiceApiFp(configuration).readMember(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Member
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMember(queue_id, page, size, domain_id, options) {
            return MemberServiceApiFp(configuration).searchMember(queue_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary SearchMemberAttempts
         * @param {string} queue_id
         * @param {string} member_id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberAttempts(queue_id, member_id, domain_id, options) {
            return MemberServiceApiFp(configuration).searchMemberAttempts(queue_id, member_id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary UpdateMember
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateMemberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(queue_id, id, body, options) {
            return MemberServiceApiFp(configuration).updateMember(queue_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * MemberServiceApi - object-oriented interface
 * @export
 * @class MemberServiceApi
 * @extends {BaseAPI}
 */
class MemberServiceApi extends BaseAPI {
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    createMember(queue_id, body, options) {
        return MemberServiceApiFp(this.configuration).createMember(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Create Member
     * @param {string} queue_id
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    createMemberBulk(queue_id, body, options) {
        return MemberServiceApiFp(this.configuration).createMemberBulk(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary DeleteMember
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    deleteMember(queue_id, id, domain_id, options) {
        return MemberServiceApiFp(this.configuration).deleteMember(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary DeleteMembers
     * @param {string} queue_id
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    deleteMembers(queue_id, body, options) {
        return MemberServiceApiFp(this.configuration).deleteMembers(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    readMember(queue_id, id, domain_id, options) {
        return MemberServiceApiFp(this.configuration).readMember(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Member
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    searchMember(queue_id, page, size, domain_id, options) {
        return MemberServiceApiFp(this.configuration).searchMember(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queue_id
     * @param {string} member_id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    searchMemberAttempts(queue_id, member_id, domain_id, options) {
        return MemberServiceApiFp(this.configuration).searchMemberAttempts(queue_id, member_id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary UpdateMember
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberServiceApi
     */
    updateMember(queue_id, id, body, options) {
        return MemberServiceApiFp(this.configuration).updateMember(queue_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * OutboundResourceGroupServiceApi - axios parameter creator
 * @export
 */
const OutboundResourceGroupServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {EngineCreateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceGroup(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceGroup.');
            }
            const localVarPath = `/call_center/resource_group`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {string} group_id
         * @param {EngineCreateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceInGroup(group_id, body, options = {}) {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling createOutboundResourceInGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceInGroup.');
            }
            const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove OutboundResourceGroup
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceGroup(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceGroup.');
            }
            const localVarPath = `/call_center/resource_group/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceInGroup(group_id, id, domain_id, options = {}) {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling deleteOutboundResourceInGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.');
            }
            const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
                .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary OutboundResourceGroup item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceGroup(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceGroup.');
            }
            const localVarPath = `/call_center/resource_group/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary OutboundResourceInGroup item
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceInGroup(group_id, id, domain_id, options = {}) {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling readOutboundResourceInGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceInGroup.');
            }
            const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
                .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of OutboundResourceGroup
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceGroup(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/resource_group`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of OutboundResourceInGroup
         * @param {string} group_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceInGroup(group_id, page, size, domain_id, options = {}) {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling searchOutboundResourceInGroup.');
            }
            const localVarPath = `/call_center/resource_group/{group_id}/resource`.replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update OutboundResourceGroup
         * @param {string} id
         * @param {EngineUpdateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceGroup(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceGroup.');
            }
            const localVarPath = `/call_center/resource_group/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceInGroup(group_id, id, body, options = {}) {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling updateOutboundResourceInGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceInGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceInGroup.');
            }
            const localVarPath = `/call_center/resource_group/{group_id}/resource/{id}`
                .replace(`{${'group_id'}}`, encodeURIComponent(String(group_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OutboundResourceGroupServiceApi - functional programming interface
 * @export
 */
const OutboundResourceGroupServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {EngineCreateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceGroup(body, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceGroup(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {string} group_id
         * @param {EngineCreateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceInGroup(group_id, body, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceInGroup(group_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove OutboundResourceGroup
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceGroup(id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceGroup(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceInGroup(group_id, id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary OutboundResourceGroup item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceGroup(id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceGroup(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary OutboundResourceInGroup item
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceInGroup(group_id, id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceInGroup(group_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of OutboundResourceGroup
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceGroup(page, size, q, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceGroup(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of OutboundResourceInGroup
         * @param {string} group_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceInGroup(group_id, page, size, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update OutboundResourceGroup
         * @param {string} id
         * @param {EngineUpdateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceGroup(id, body, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceGroup(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceInGroup(group_id, id, body, options) {
            const localVarAxiosArgs = OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceInGroup(group_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * OutboundResourceGroupServiceApi - factory interface
 * @export
 */
const OutboundResourceGroupServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {EngineCreateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceGroup(body, options) {
            return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceGroup(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create OutboundResourceGroup
         * @param {string} group_id
         * @param {EngineCreateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceInGroup(group_id, body, options) {
            return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceInGroup(group_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove OutboundResourceGroup
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceGroup(id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceGroup(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceInGroup(group_id, id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary OutboundResourceGroup item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceGroup(id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceGroup(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary OutboundResourceInGroup item
         * @param {string} group_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceInGroup(group_id, id, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceInGroup(group_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of OutboundResourceGroup
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceGroup(page, size, q, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceGroup(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of OutboundResourceInGroup
         * @param {string} group_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceInGroup(group_id, page, size, domain_id, options) {
            return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update OutboundResourceGroup
         * @param {string} id
         * @param {EngineUpdateOutboundResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceGroup(id, body, options) {
            return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceGroup(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Update OutboundResourceInGroup
         * @param {string} group_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceInGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceInGroup(group_id, id, body, options) {
            return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceInGroup(group_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * OutboundResourceGroupServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceGroupServiceApi
 * @extends {BaseAPI}
 */
class OutboundResourceGroupServiceApi extends BaseAPI {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    createOutboundResourceGroup(body, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceGroup(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} group_id
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    createOutboundResourceInGroup(group_id, body, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceInGroup(group_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    deleteOutboundResourceGroup(id, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceGroup(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    deleteOutboundResourceInGroup(group_id, id, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceInGroup(group_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    readOutboundResourceGroup(id, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceGroup(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} group_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    readOutboundResourceInGroup(group_id, id, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceInGroup(group_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    searchOutboundResourceGroup(page, size, q, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceGroup(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} group_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    searchOutboundResourceInGroup(group_id, page, size, domain_id, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceInGroup(group_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    updateOutboundResourceGroup(id, body, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceGroup(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} group_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceGroupServiceApi
     */
    updateOutboundResourceInGroup(group_id, id, body, options) {
        return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceInGroup(group_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
const OutboundResourceServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResource.');
            }
            const localVarPath = `/call_center/resources`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create CreateOutboundResourceDisplay
         * @param {string} resource_id
         * @param {EngineCreateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceDisplay(resource_id, body, options = {}) {
            // verify required parameter 'resource_id' is not null or undefined
            if (resource_id === null || resource_id === undefined) {
                throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling createOutboundResourceDisplay.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createOutboundResourceDisplay.');
            }
            const localVarPath = `/call_center/resources/{resource_id}/display`.replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove OutboundResource
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceDisplay(resource_id, id, domain_id, options = {}) {
            // verify required parameter 'resource_id' is not null or undefined
            if (resource_id === null || resource_id === undefined) {
                throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling deleteOutboundResourceDisplay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.');
            }
            const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch OutboundResource
         * @param {string} id
         * @param {EnginePatchOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOutboundResource(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchOutboundResource.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary OutboundResource item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ResourceDisplay item
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceDisplay(resource_id, id, domain_id, options = {}) {
            // verify required parameter 'resource_id' is not null or undefined
            if (resource_id === null || resource_id === undefined) {
                throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling readOutboundResourceDisplay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readOutboundResourceDisplay.');
            }
            const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of OutboundResource
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/resources`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of ResourceDisplay
         * @param {string} resource_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceDisplay(resource_id, page, size, domain_id, options = {}) {
            // verify required parameter 'resource_id' is not null or undefined
            if (resource_id === null || resource_id === undefined) {
                throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling searchOutboundResourceDisplay.');
            }
            const localVarPath = `/call_center/resources/{resource_id}/display`.replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update OutboundResource
         * @param {string} id
         * @param {EngineUpdateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResource.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResource.');
            }
            const localVarPath = `/call_center/resources/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceDisplay(resource_id, id, body, options = {}) {
            // verify required parameter 'resource_id' is not null or undefined
            if (resource_id === null || resource_id === undefined) {
                throw new RequiredError('resource_id', 'Required parameter resource_id was null or undefined when calling updateOutboundResourceDisplay.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOutboundResourceDisplay.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateOutboundResourceDisplay.');
            }
            const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resource_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
const OutboundResourceServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResource(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create CreateOutboundResourceDisplay
         * @param {string} resource_id
         * @param {EngineCreateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceDisplay(resource_id, body, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResourceDisplay(resource_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove OutboundResource
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResource(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceDisplay(resource_id, id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Patch OutboundResource
         * @param {string} id
         * @param {EnginePatchOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOutboundResource(id, body, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).patchOutboundResource(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary OutboundResource item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResource(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ResourceDisplay item
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceDisplay(resource_id, id, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of OutboundResource
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(page, size, q, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResource(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of ResourceDisplay
         * @param {string} resource_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceDisplay(resource_id, page, size, domain_id, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update OutboundResource
         * @param {string} id
         * @param {EngineUpdateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(id, body, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResource(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceDisplay(resource_id, id, body, options) {
            const localVarAxiosArgs = OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResourceDisplay(resource_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
const OutboundResourceServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create OutboundResource
         * @param {EngineCreateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResource(body, options) {
            return OutboundResourceServiceApiFp(configuration).createOutboundResource(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create CreateOutboundResourceDisplay
         * @param {string} resource_id
         * @param {EngineCreateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundResourceDisplay(resource_id, body, options) {
            return OutboundResourceServiceApiFp(configuration).createOutboundResourceDisplay(resource_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove OutboundResource
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResource(id, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutboundResourceDisplay(resource_id, id, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Patch OutboundResource
         * @param {string} id
         * @param {EnginePatchOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOutboundResource(id, body, options) {
            return OutboundResourceServiceApiFp(configuration).patchOutboundResource(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary OutboundResource item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResource(id, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).readOutboundResource(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ResourceDisplay item
         * @param {string} resource_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOutboundResourceDisplay(resource_id, id, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of OutboundResource
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResource(page, size, q, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).searchOutboundResource(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of ResourceDisplay
         * @param {string} resource_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundResourceDisplay(resource_id, page, size, domain_id, options) {
            return OutboundResourceServiceApiFp(configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update OutboundResource
         * @param {string} id
         * @param {EngineUpdateOutboundResourceRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResource(id, body, options) {
            return OutboundResourceServiceApiFp(configuration).updateOutboundResource(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Update ResourceDisplay
         * @param {string} resource_id
         * @param {string} id
         * @param {EngineUpdateOutboundResourceDisplayRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutboundResourceDisplay(resource_id, id, body, options) {
            return OutboundResourceServiceApiFp(configuration).updateOutboundResourceDisplay(resource_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
class OutboundResourceServiceApi extends BaseAPI {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    createOutboundResource(body, options) {
        return OutboundResourceServiceApiFp(this.configuration).createOutboundResource(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resource_id
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    createOutboundResourceDisplay(resource_id, body, options) {
        return OutboundResourceServiceApiFp(this.configuration).createOutboundResourceDisplay(resource_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    deleteOutboundResource(id, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResource(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    deleteOutboundResourceDisplay(resource_id, id, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResourceDisplay(resource_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    patchOutboundResource(id, body, options) {
        return OutboundResourceServiceApiFp(this.configuration).patchOutboundResource(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    readOutboundResource(id, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).readOutboundResource(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resource_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    readOutboundResourceDisplay(resource_id, id, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).readOutboundResourceDisplay(resource_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    searchOutboundResource(page, size, q, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).searchOutboundResource(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resource_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    searchOutboundResourceDisplay(resource_id, page, size, domain_id, options) {
        return OutboundResourceServiceApiFp(this.configuration).searchOutboundResourceDisplay(resource_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    updateOutboundResource(id, body, options) {
        return OutboundResourceServiceApiFp(this.configuration).updateOutboundResource(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resource_id
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundResourceServiceApi
     */
    updateOutboundResourceDisplay(resource_id, id, body, options) {
        return OutboundResourceServiceApiFp(this.configuration).updateOutboundResourceDisplay(resource_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * QueueBucketServiceApi - axios parameter creator
 * @export
 */
const QueueBucketServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create QueueBucket
         * @param {string} queue_id
         * @param {EngineCreateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueBucket(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueBucket.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueBucket.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueBucket(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueBucket.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueBucket.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueBucket(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueBucket.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueBucket.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueBucket(queue_id, page, size, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueBucket.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/buckets`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UpdateQueueBucket
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueBucket(queue_id, id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueBucket.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueBucket.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueBucket.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/buckets/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueueBucketServiceApi - functional programming interface
 * @export
 */
const QueueBucketServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create QueueBucket
         * @param {string} queue_id
         * @param {EngineCreateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueBucket(queue_id, body, options) {
            const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).createQueueBucket(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueBucket(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).deleteQueueBucket(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueBucket(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).readQueueBucket(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueBucket(queue_id, page, size, domain_id, options) {
            const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).searchQueueBucket(queue_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary UpdateQueueBucket
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueBucket(queue_id, id, body, options) {
            const localVarAxiosArgs = QueueBucketServiceApiAxiosParamCreator(configuration).updateQueueBucket(queue_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QueueBucketServiceApi - factory interface
 * @export
 */
const QueueBucketServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create QueueBucket
         * @param {string} queue_id
         * @param {EngineCreateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueBucket(queue_id, body, options) {
            return QueueBucketServiceApiFp(configuration).createQueueBucket(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueBucket(queue_id, id, domain_id, options) {
            return QueueBucketServiceApiFp(configuration).deleteQueueBucket(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueBucket(queue_id, id, domain_id, options) {
            return QueueBucketServiceApiFp(configuration).readQueueBucket(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueBucket(queue_id, page, size, domain_id, options) {
            return QueueBucketServiceApiFp(configuration).searchQueueBucket(queue_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary UpdateQueueBucket
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueBucketRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueBucket(queue_id, id, body, options) {
            return QueueBucketServiceApiFp(configuration).updateQueueBucket(queue_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * QueueBucketServiceApi - object-oriented interface
 * @export
 * @class QueueBucketServiceApi
 * @extends {BaseAPI}
 */
class QueueBucketServiceApi extends BaseAPI {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queue_id
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueBucketServiceApi
     */
    createQueueBucket(queue_id, body, options) {
        return QueueBucketServiceApiFp(this.configuration).createQueueBucket(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueBucketServiceApi
     */
    deleteQueueBucket(queue_id, id, domain_id, options) {
        return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueBucketServiceApi
     */
    readQueueBucket(queue_id, id, domain_id, options) {
        return QueueBucketServiceApiFp(this.configuration).readQueueBucket(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueBucketServiceApi
     */
    searchQueueBucket(queue_id, page, size, domain_id, options) {
        return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueBucketServiceApi
     */
    updateQueueBucket(queue_id, id, body, options) {
        return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(queue_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * QueueResourcesServiceApi - axios parameter creator
 * @export
 */
const QueueResourcesServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary CreateQueueResourceGroup
         * @param {string} queue_id
         * @param {EngineCreateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueResourceGroup(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueResourceGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueResourceGroup.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DeleteQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueResourceGroup(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueResourceGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueResourceGroup.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ReadQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueResourceGroup(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueResourceGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueResourceGroup.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SearchQueueResourceGroup
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueResourceGroup(queue_id, page, size, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueResourceGroup.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/resource_groups`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UpdateQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueResourceGroup(queue_id, id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueResourceGroup.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueResourceGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueResourceGroup.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/resource_groups/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueueResourcesServiceApi - functional programming interface
 * @export
 */
const QueueResourcesServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary CreateQueueResourceGroup
         * @param {string} queue_id
         * @param {EngineCreateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueResourceGroup(queue_id, body, options) {
            const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).createQueueResourceGroup(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary DeleteQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueResourceGroup(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ReadQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueResourceGroup(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).readQueueResourceGroup(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SearchQueueResourceGroup
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueResourceGroup(queue_id, page, size, domain_id, options) {
            const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary UpdateQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueResourceGroup(queue_id, id, body, options) {
            const localVarAxiosArgs = QueueResourcesServiceApiAxiosParamCreator(configuration).updateQueueResourceGroup(queue_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QueueResourcesServiceApi - factory interface
 * @export
 */
const QueueResourcesServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary CreateQueueResourceGroup
         * @param {string} queue_id
         * @param {EngineCreateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueResourceGroup(queue_id, body, options) {
            return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary DeleteQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueResourceGroup(queue_id, id, domain_id, options) {
            return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ReadQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueResourceGroup(queue_id, id, domain_id, options) {
            return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary SearchQueueResourceGroup
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueResourceGroup(queue_id, page, size, domain_id, options) {
            return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary UpdateQueueResourceGroup
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueResourceGroupRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueResourceGroup(queue_id, id, body, options) {
            return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(queue_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * QueueResourcesServiceApi - object-oriented interface
 * @export
 * @class QueueResourcesServiceApi
 * @extends {BaseAPI}
 */
class QueueResourcesServiceApi extends BaseAPI {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queue_id
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueResourcesServiceApi
     */
    createQueueResourceGroup(queue_id, body, options) {
        return QueueResourcesServiceApiFp(this.configuration).createQueueResourceGroup(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueResourcesServiceApi
     */
    deleteQueueResourceGroup(queue_id, id, domain_id, options) {
        return QueueResourcesServiceApiFp(this.configuration).deleteQueueResourceGroup(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueResourcesServiceApi
     */
    readQueueResourceGroup(queue_id, id, domain_id, options) {
        return QueueResourcesServiceApiFp(this.configuration).readQueueResourceGroup(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueResourcesServiceApi
     */
    searchQueueResourceGroup(queue_id, page, size, domain_id, options) {
        return QueueResourcesServiceApiFp(this.configuration).searchQueueResourceGroup(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueResourcesServiceApi
     */
    updateQueueResourceGroup(queue_id, id, body, options) {
        return QueueResourcesServiceApiFp(this.configuration).updateQueueResourceGroup(queue_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * QueueRoutingServiceApi - axios parameter creator
 * @export
 */
const QueueRoutingServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary CreateQueueRouting
         * @param {string} queue_id
         * @param {EngineCreateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(queue_id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling createQueueRouting.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueRouting(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling deleteQueueRouting.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueRouting(queue_id, id, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling readQueueRouting.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueRouting(queue_id, page, size, domain_id, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling searchQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings`.replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UpdateQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueRouting(queue_id, id, body, options = {}) {
            // verify required parameter 'queue_id' is not null or undefined
            if (queue_id === null || queue_id === undefined) {
                throw new RequiredError('queue_id', 'Required parameter queue_id was null or undefined when calling updateQueueRouting.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueueRouting.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueueRouting.');
            }
            const localVarPath = `/call_center/queues/{queue_id}/routings/{id}`
                .replace(`{${'queue_id'}}`, encodeURIComponent(String(queue_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueueRoutingServiceApi - functional programming interface
 * @export
 */
const QueueRoutingServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary CreateQueueRouting
         * @param {string} queue_id
         * @param {EngineCreateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(queue_id, body, options) {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).createQueueRouting(queue_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueRouting(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).deleteQueueRouting(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueRouting(queue_id, id, domain_id, options) {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).readQueueRouting(queue_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueRouting(queue_id, page, size, domain_id, options) {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).searchQueueRouting(queue_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary UpdateQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueRouting(queue_id, id, body, options) {
            const localVarAxiosArgs = QueueRoutingServiceApiAxiosParamCreator(configuration).updateQueueRouting(queue_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QueueRoutingServiceApi - factory interface
 * @export
 */
const QueueRoutingServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary CreateQueueRouting
         * @param {string} queue_id
         * @param {EngineCreateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueueRouting(queue_id, body, options) {
            return QueueRoutingServiceApiFp(configuration).createQueueRouting(queue_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary DeleteQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueueRouting(queue_id, id, domain_id, options) {
            return QueueRoutingServiceApiFp(configuration).deleteQueueRouting(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ReadQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueueRouting(queue_id, id, domain_id, options) {
            return QueueRoutingServiceApiFp(configuration).readQueueRouting(queue_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary SearchQueueRouting
         * @param {string} queue_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueueRouting(queue_id, page, size, domain_id, options) {
            return QueueRoutingServiceApiFp(configuration).searchQueueRouting(queue_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary UpdateQueueRouting
         * @param {string} queue_id
         * @param {string} id
         * @param {EngineUpdateQueueRoutingRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueueRouting(queue_id, id, body, options) {
            return QueueRoutingServiceApiFp(configuration).updateQueueRouting(queue_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * QueueRoutingServiceApi - object-oriented interface
 * @export
 * @class QueueRoutingServiceApi
 * @extends {BaseAPI}
 */
class QueueRoutingServiceApi extends BaseAPI {
    /**
     *
     * @summary CreateQueueRouting
     * @param {string} queue_id
     * @param {EngineCreateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    createQueueRouting(queue_id, body, options) {
        return QueueRoutingServiceApiFp(this.configuration).createQueueRouting(queue_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    deleteQueueRouting(queue_id, id, domain_id, options) {
        return QueueRoutingServiceApiFp(this.configuration).deleteQueueRouting(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    readQueueRouting(queue_id, id, domain_id, options) {
        return QueueRoutingServiceApiFp(this.configuration).readQueueRouting(queue_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queue_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    searchQueueRouting(queue_id, page, size, domain_id, options) {
        return QueueRoutingServiceApiFp(this.configuration).searchQueueRouting(queue_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary UpdateQueueRouting
     * @param {string} queue_id
     * @param {string} id
     * @param {EngineUpdateQueueRoutingRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueRoutingServiceApi
     */
    updateQueueRouting(queue_id, id, body, options) {
        return QueueRoutingServiceApiFp(this.configuration).updateQueueRouting(queue_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * QueueServiceApi - axios parameter creator
 * @export
 */
const QueueServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueue.');
            }
            const localVarPath = `/call_center/queues`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Queue
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch Queue
         * @param {string} id
         * @param {EnginePatchQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchQueue(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchQueue.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Queue item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Queue
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/queues`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Queue
         * @param {string} id
         * @param {EngineUpdateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateQueue.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueue.');
            }
            const localVarPath = `/call_center/queues/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueueServiceApi - functional programming interface
 * @export
 */
const QueueServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).createQueue(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove Queue
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id, domain_id, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).deleteQueue(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Patch Queue
         * @param {string} id
         * @param {EnginePatchQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchQueue(id, body, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).patchQueue(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Queue item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id, domain_id, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).readQueue(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Queue
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(page, size, q, domain_id, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).searchQueue(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update Queue
         * @param {string} id
         * @param {EngineUpdateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(id, body, options) {
            const localVarAxiosArgs = QueueServiceApiAxiosParamCreator(configuration).updateQueue(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QueueServiceApi - factory interface
 * @export
 */
const QueueServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create Queue
         * @param {EngineCreateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueue(body, options) {
            return QueueServiceApiFp(configuration).createQueue(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove Queue
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueue(id, domain_id, options) {
            return QueueServiceApiFp(configuration).deleteQueue(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Patch Queue
         * @param {string} id
         * @param {EnginePatchQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchQueue(id, body, options) {
            return QueueServiceApiFp(configuration).patchQueue(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Queue item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQueue(id, domain_id, options) {
            return QueueServiceApiFp(configuration).readQueue(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Queue
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQueue(page, size, q, domain_id, options) {
            return QueueServiceApiFp(configuration).searchQueue(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update Queue
         * @param {string} id
         * @param {EngineUpdateQueueRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueue(id, body, options) {
            return QueueServiceApiFp(configuration).updateQueue(id, body, options)(axios, basePath);
        },
    };
};
/**
 * QueueServiceApi - object-oriented interface
 * @export
 * @class QueueServiceApi
 * @extends {BaseAPI}
 */
class QueueServiceApi extends BaseAPI {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    createQueue(body, options) {
        return QueueServiceApiFp(this.configuration).createQueue(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    deleteQueue(id, domain_id, options) {
        return QueueServiceApiFp(this.configuration).deleteQueue(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    patchQueue(id, body, options) {
        return QueueServiceApiFp(this.configuration).patchQueue(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    readQueue(id, domain_id, options) {
        return QueueServiceApiFp(this.configuration).readQueue(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    searchQueue(page, size, q, domain_id, options) {
        return QueueServiceApiFp(this.configuration).searchQueue(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueServiceApi
     */
    updateQueue(id, body, options) {
        return QueueServiceApiFp(this.configuration).updateQueue(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * ResourceTeamServiceApi - axios parameter creator
 * @export
 */
const ResourceTeamServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create ResourceTeamAgent
         * @param {string} team_id
         * @param {EngineCreateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamAgent(team_id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createResourceTeamAgent.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createResourceTeamAgent.');
            }
            const localVarPath = `/call_center/teams/{team_id}/agents`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SKill Create ResourceTeamSkill
         * @param {string} team_id
         * @param {EngineCreateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamSkill(team_id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createResourceTeamSkill.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createResourceTeamSkill.');
            }
            const localVarPath = `/call_center/teams/{team_id}/skills`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamAgent(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteResourceTeamAgent.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteResourceTeamAgent.');
            }
            const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamSkill(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteResourceTeamSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteResourceTeamSkill.');
            }
            const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ResourceTeamAgent item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamAgent(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readResourceTeamAgent.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readResourceTeamAgent.');
            }
            const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ResourceTeamSkill item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamSkill(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readResourceTeamSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readResourceTeamSkill.');
            }
            const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of ResourceTeamAgent
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamAgent(team_id, page, size, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchResourceTeamAgent.');
            }
            const localVarPath = `/call_center/teams/{team_id}/agents`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of ResourceTeamSkill
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamSkill(team_id, page, size, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchResourceTeamSkill.');
            }
            const localVarPath = `/call_center/teams/{team_id}/skills`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamAgent(team_id, id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateResourceTeamAgent.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateResourceTeamAgent.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateResourceTeamAgent.');
            }
            const localVarPath = `/call_center/teams/{team_id}/agents/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamSkill(team_id, id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateResourceTeamSkill.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateResourceTeamSkill.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateResourceTeamSkill.');
            }
            const localVarPath = `/call_center/teams/{team_id}/skills/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceTeamServiceApi - functional programming interface
 * @export
 */
const ResourceTeamServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create ResourceTeamAgent
         * @param {string} team_id
         * @param {EngineCreateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamAgent(team_id, body, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).createResourceTeamAgent(team_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SKill Create ResourceTeamSkill
         * @param {string} team_id
         * @param {EngineCreateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamSkill(team_id, body, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).createResourceTeamSkill(team_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamAgent(team_id, id, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).deleteResourceTeamAgent(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamSkill(team_id, id, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).deleteResourceTeamSkill(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ResourceTeamAgent item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamAgent(team_id, id, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).readResourceTeamAgent(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ResourceTeamSkill item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamSkill(team_id, id, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).readResourceTeamSkill(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of ResourceTeamAgent
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamAgent(team_id, page, size, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of ResourceTeamSkill
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamSkill(team_id, page, size, domain_id, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamAgent(team_id, id, body, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).updateResourceTeamAgent(team_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamSkill(team_id, id, body, options) {
            const localVarAxiosArgs = ResourceTeamServiceApiAxiosParamCreator(configuration).updateResourceTeamSkill(team_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ResourceTeamServiceApi - factory interface
 * @export
 */
const ResourceTeamServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create ResourceTeamAgent
         * @param {string} team_id
         * @param {EngineCreateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamAgent(team_id, body, options) {
            return ResourceTeamServiceApiFp(configuration).createResourceTeamAgent(team_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary SKill Create ResourceTeamSkill
         * @param {string} team_id
         * @param {EngineCreateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceTeamSkill(team_id, body, options) {
            return ResourceTeamServiceApiFp(configuration).createResourceTeamSkill(team_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamAgent(team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).deleteResourceTeamAgent(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceTeamSkill(team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).deleteResourceTeamSkill(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ResourceTeamAgent item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamAgent(team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).readResourceTeamAgent(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ResourceTeamSkill item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readResourceTeamSkill(team_id, id, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).readResourceTeamSkill(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of ResourceTeamAgent
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamAgent(team_id, page, size, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of ResourceTeamSkill
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchResourceTeamSkill(team_id, page, size, domain_id, options) {
            return ResourceTeamServiceApiFp(configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update ResourceTeamAgent
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamAgent(team_id, id, body, options) {
            return ResourceTeamServiceApiFp(configuration).updateResourceTeamAgent(team_id, id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Update ResourceTeamSkill
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateResourceTeamSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceTeamSkill(team_id, id, body, options) {
            return ResourceTeamServiceApiFp(configuration).updateResourceTeamSkill(team_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * ResourceTeamServiceApi - object-oriented interface
 * @export
 * @class ResourceTeamServiceApi
 * @extends {BaseAPI}
 */
class ResourceTeamServiceApi extends BaseAPI {
    /**
     *
     * @summary Create ResourceTeamAgent
     * @param {string} team_id
     * @param {EngineCreateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    createResourceTeamAgent(team_id, body, options) {
        return ResourceTeamServiceApiFp(this.configuration).createResourceTeamAgent(team_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SKill Create ResourceTeamSkill
     * @param {string} team_id
     * @param {EngineCreateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    createResourceTeamSkill(team_id, body, options) {
        return ResourceTeamServiceApiFp(this.configuration).createResourceTeamSkill(team_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    deleteResourceTeamAgent(team_id, id, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamAgent(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    deleteResourceTeamSkill(team_id, id, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).deleteResourceTeamSkill(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ResourceTeamAgent item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    readResourceTeamAgent(team_id, id, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).readResourceTeamAgent(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ResourceTeamSkill item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    readResourceTeamSkill(team_id, id, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).readResourceTeamSkill(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of ResourceTeamAgent
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    searchResourceTeamAgent(team_id, page, size, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamAgent(team_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of ResourceTeamSkill
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    searchResourceTeamSkill(team_id, page, size, domain_id, options) {
        return ResourceTeamServiceApiFp(this.configuration).searchResourceTeamSkill(team_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update ResourceTeamAgent
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    updateResourceTeamAgent(team_id, id, body, options) {
        return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamAgent(team_id, id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update ResourceTeamSkill
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateResourceTeamSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceTeamServiceApi
     */
    updateResourceTeamSkill(team_id, id, body, options) {
        return ResourceTeamServiceApiFp(this.configuration).updateResourceTeamSkill(team_id, id, body, options)(this.axios, this.basePath);
    }
}
/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
const RoutingOutboundCallServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove RoutingOutboundCall
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Move RoutingOutboundCall
         * @param {string} from_id
         * @param {string} to_id
         * @param {EngineMovePositionRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePositionRoutingOutboundCall(from_id, to_id, body, options = {}) {
            // verify required parameter 'from_id' is not null or undefined
            if (from_id === null || from_id === undefined) {
                throw new RequiredError('from_id', 'Required parameter from_id was null or undefined when calling movePositionRoutingOutboundCall.');
            }
            // verify required parameter 'to_id' is not null or undefined
            if (to_id === null || to_id === undefined) {
                throw new RequiredError('to_id', 'Required parameter to_id was null or undefined when calling movePositionRoutingOutboundCall.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{from_id}/to/{to_id}`
                .replace(`{${'from_id'}}`, encodeURIComponent(String(from_id)))
                .replace(`{${'to_id'}}`, encodeURIComponent(String(to_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch RoutingOutboundCall
         * @param {string} id
         * @param {EnginePatchRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingOutboundCall(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchRoutingOutboundCall.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary RoutingOutboundCall item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of RoutingOutboundCall
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(page, size, q, domain_id, options = {}) {
            const localVarPath = `/routing/outbound/calls`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update RoutingOutboundCall
         * @param {string} id
         * @param {EngineUpdateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingOutboundCall.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingOutboundCall.');
            }
            const localVarPath = `/routing/outbound/calls/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
const RoutingOutboundCallServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).createRoutingOutboundCall(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove RoutingOutboundCall
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id, domain_id, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).deleteRoutingOutboundCall(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Move RoutingOutboundCall
         * @param {string} from_id
         * @param {string} to_id
         * @param {EngineMovePositionRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePositionRoutingOutboundCall(from_id, to_id, body, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Patch RoutingOutboundCall
         * @param {string} id
         * @param {EnginePatchRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingOutboundCall(id, body, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).patchRoutingOutboundCall(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary RoutingOutboundCall item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id, domain_id, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).readRoutingOutboundCall(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of RoutingOutboundCall
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(page, size, q, domain_id, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).searchRoutingOutboundCall(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update RoutingOutboundCall
         * @param {string} id
         * @param {EngineUpdateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(id, body, options) {
            const localVarAxiosArgs = RoutingOutboundCallServiceApiAxiosParamCreator(configuration).updateRoutingOutboundCall(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
const RoutingOutboundCallServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create RoutingOutboundCall
         * @param {EngineCreateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingOutboundCall(body, options) {
            return RoutingOutboundCallServiceApiFp(configuration).createRoutingOutboundCall(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove RoutingOutboundCall
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingOutboundCall(id, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(configuration).deleteRoutingOutboundCall(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Move RoutingOutboundCall
         * @param {string} from_id
         * @param {string} to_id
         * @param {EngineMovePositionRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePositionRoutingOutboundCall(from_id, to_id, body, options) {
            return RoutingOutboundCallServiceApiFp(configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Patch RoutingOutboundCall
         * @param {string} id
         * @param {EnginePatchRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingOutboundCall(id, body, options) {
            return RoutingOutboundCallServiceApiFp(configuration).patchRoutingOutboundCall(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary RoutingOutboundCall item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingOutboundCall(id, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(configuration).readRoutingOutboundCall(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of RoutingOutboundCall
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingOutboundCall(page, size, q, domain_id, options) {
            return RoutingOutboundCallServiceApiFp(configuration).searchRoutingOutboundCall(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update RoutingOutboundCall
         * @param {string} id
         * @param {EngineUpdateRoutingOutboundCallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingOutboundCall(id, body, options) {
            return RoutingOutboundCallServiceApiFp(configuration).updateRoutingOutboundCall(id, body, options)(axios, basePath);
        },
    };
};
/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
class RoutingOutboundCallServiceApi extends BaseAPI {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    createRoutingOutboundCall(body, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).createRoutingOutboundCall(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    deleteRoutingOutboundCall(id, domain_id, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).deleteRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} from_id
     * @param {string} to_id
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    movePositionRoutingOutboundCall(from_id, to_id, body, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).movePositionRoutingOutboundCall(from_id, to_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    patchRoutingOutboundCall(id, body, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).patchRoutingOutboundCall(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    readRoutingOutboundCall(id, domain_id, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).readRoutingOutboundCall(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    searchRoutingOutboundCall(page, size, q, domain_id, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).searchRoutingOutboundCall(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingOutboundCallServiceApi
     */
    updateRoutingOutboundCall(id, body, options) {
        return RoutingOutboundCallServiceApiFp(this.configuration).updateRoutingOutboundCall(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * RoutingSchemaServiceApi - axios parameter creator
 * @export
 */
const RoutingSchemaServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingSchema
         * @param {EngineCreateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingSchema(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingSchema.');
            }
            const localVarPath = `/routing/schema`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove RoutingSchema
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingSchema(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingSchema.');
            }
            const localVarPath = `/routing/schema/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch RoutingSchema
         * @param {string} id
         * @param {EnginePatchRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingSchema(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchRoutingSchema.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchRoutingSchema.');
            }
            const localVarPath = `/routing/schema/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PATCH',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary RoutingSchema item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingSchema(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingSchema.');
            }
            const localVarPath = `/routing/schema/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List RoutingSchema
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingSchema(page, size, q, domain_id, options = {}) {
            const localVarPath = `/routing/schema`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update RoutingSchema
         * @param {string} id
         * @param {EngineUpdateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingSchema(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingSchema.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingSchema.');
            }
            const localVarPath = `/routing/schema/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoutingSchemaServiceApi - functional programming interface
 * @export
 */
const RoutingSchemaServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingSchema
         * @param {EngineCreateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingSchema(body, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).createRoutingSchema(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove RoutingSchema
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingSchema(id, domain_id, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).deleteRoutingSchema(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Patch RoutingSchema
         * @param {string} id
         * @param {EnginePatchRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingSchema(id, body, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).patchRoutingSchema(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary RoutingSchema item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingSchema(id, domain_id, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).readRoutingSchema(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List RoutingSchema
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingSchema(page, size, q, domain_id, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).searchRoutingSchema(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update RoutingSchema
         * @param {string} id
         * @param {EngineUpdateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingSchema(id, body, options) {
            const localVarAxiosArgs = RoutingSchemaServiceApiAxiosParamCreator(configuration).updateRoutingSchema(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * RoutingSchemaServiceApi - factory interface
 * @export
 */
const RoutingSchemaServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create RoutingSchema
         * @param {EngineCreateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingSchema(body, options) {
            return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove RoutingSchema
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingSchema(id, domain_id, options) {
            return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Patch RoutingSchema
         * @param {string} id
         * @param {EnginePatchRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoutingSchema(id, body, options) {
            return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary RoutingSchema item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingSchema(id, domain_id, options) {
            return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List RoutingSchema
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingSchema(page, size, q, domain_id, options) {
            return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update RoutingSchema
         * @param {string} id
         * @param {EngineUpdateRoutingSchemaRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingSchema(id, body, options) {
            return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(id, body, options)(axios, basePath);
        },
    };
};
/**
 * RoutingSchemaServiceApi - object-oriented interface
 * @export
 * @class RoutingSchemaServiceApi
 * @extends {BaseAPI}
 */
class RoutingSchemaServiceApi extends BaseAPI {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    createRoutingSchema(body, options) {
        return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    deleteRoutingSchema(id, domain_id, options) {
        return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    patchRoutingSchema(id, body, options) {
        return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    readRoutingSchema(id, domain_id, options) {
        return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    searchRoutingSchema(page, size, q, domain_id, options) {
        return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingSchemaServiceApi
     */
    updateRoutingSchema(id, body, options) {
        return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * RoutingVariableServiceApi - axios parameter creator
 * @export
 */
const RoutingVariableServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRoutingVariable.');
            }
            const localVarPath = `/routing/variables`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove RoutingVariable
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary RoutingVariable item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of RoutingVariable
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(page, size, domain_id, options = {}) {
            const localVarPath = `/routing/variables`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update RoutingVariable
         * @param {string} id
         * @param {EngineUpdateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRoutingVariable.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRoutingVariable.');
            }
            const localVarPath = `/routing/variables/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoutingVariableServiceApi - functional programming interface
 * @export
 */
const RoutingVariableServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body, options) {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).createRoutingVariable(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove RoutingVariable
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id, domain_id, options) {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).deleteRoutingVariable(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary RoutingVariable item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id, domain_id, options) {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).readRoutingVariable(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of RoutingVariable
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(page, size, domain_id, options) {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).searchRoutingVariable(page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update RoutingVariable
         * @param {string} id
         * @param {EngineUpdateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(id, body, options) {
            const localVarAxiosArgs = RoutingVariableServiceApiAxiosParamCreator(configuration).updateRoutingVariable(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * RoutingVariableServiceApi - factory interface
 * @export
 */
const RoutingVariableServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create RoutingVariable
         * @param {EngineCreateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoutingVariable(body, options) {
            return RoutingVariableServiceApiFp(configuration).createRoutingVariable(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove RoutingVariable
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoutingVariable(id, domain_id, options) {
            return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary RoutingVariable item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRoutingVariable(id, domain_id, options) {
            return RoutingVariableServiceApiFp(configuration).readRoutingVariable(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of RoutingVariable
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingVariable(page, size, domain_id, options) {
            return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update RoutingVariable
         * @param {string} id
         * @param {EngineUpdateRoutingVariableRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoutingVariable(id, body, options) {
            return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(id, body, options)(axios, basePath);
        },
    };
};
/**
 * RoutingVariableServiceApi - object-oriented interface
 * @export
 * @class RoutingVariableServiceApi
 * @extends {BaseAPI}
 */
class RoutingVariableServiceApi extends BaseAPI {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    createRoutingVariable(body, options) {
        return RoutingVariableServiceApiFp(this.configuration).createRoutingVariable(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    deleteRoutingVariable(id, domain_id, options) {
        return RoutingVariableServiceApiFp(this.configuration).deleteRoutingVariable(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    readRoutingVariable(id, domain_id, options) {
        return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    searchRoutingVariable(page, size, domain_id, options) {
        return RoutingVariableServiceApiFp(this.configuration).searchRoutingVariable(page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutingVariableServiceApi
     */
    updateRoutingVariable(id, body, options) {
        return RoutingVariableServiceApiFp(this.configuration).updateRoutingVariable(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * SkillServiceApi - axios parameter creator
 * @export
 */
const SkillServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSkill.');
            }
            const localVarPath = `/call_center/skills`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Skill
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Skill item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id, domain_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Skill
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(page, size, q, domain_id, options = {}) {
            const localVarPath = `/call_center/skills`;
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Skill
         * @param {string} id
         * @param {EngineUpdateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSkill.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSkill.');
            }
            const localVarPath = `/call_center/skills/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SkillServiceApi - functional programming interface
 * @export
 */
const SkillServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body, options) {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).createSkill(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove Skill
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id, domain_id, options) {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).deleteSkill(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Skill item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id, domain_id, options) {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).readSkill(id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of Skill
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(page, size, q, domain_id, options) {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).searchSkill(page, size, q, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update Skill
         * @param {string} id
         * @param {EngineUpdateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(id, body, options) {
            const localVarAxiosArgs = SkillServiceApiAxiosParamCreator(configuration).updateSkill(id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SkillServiceApi - factory interface
 * @export
 */
const SkillServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create Skill
         * @param {EngineCreateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkill(body, options) {
            return SkillServiceApiFp(configuration).createSkill(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove Skill
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSkill(id, domain_id, options) {
            return SkillServiceApiFp(configuration).deleteSkill(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Skill item
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSkill(id, domain_id, options) {
            return SkillServiceApiFp(configuration).readSkill(id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of Skill
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [q]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSkill(page, size, q, domain_id, options) {
            return SkillServiceApiFp(configuration).searchSkill(page, size, q, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update Skill
         * @param {string} id
         * @param {EngineUpdateSkillRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkill(id, body, options) {
            return SkillServiceApiFp(configuration).updateSkill(id, body, options)(axios, basePath);
        },
    };
};
/**
 * SkillServiceApi - object-oriented interface
 * @export
 * @class SkillServiceApi
 * @extends {BaseAPI}
 */
class SkillServiceApi extends BaseAPI {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    createSkill(body, options) {
        return SkillServiceApiFp(this.configuration).createSkill(body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    deleteSkill(id, domain_id, options) {
        return SkillServiceApiFp(this.configuration).deleteSkill(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    readSkill(id, domain_id, options) {
        return SkillServiceApiFp(this.configuration).readSkill(id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    searchSkill(page, size, q, domain_id, options) {
        return SkillServiceApiFp(this.configuration).searchSkill(page, size, q, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillServiceApi
     */
    updateSkill(id, body, options) {
        return SkillServiceApiFp(this.configuration).updateSkill(id, body, options)(this.axios, this.basePath);
    }
}
/**
 * SupervisorInTeamServiceApi - axios parameter creator
 * @export
 */
const SupervisorInTeamServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create SupervisorInTeam
         * @param {string} team_id
         * @param {EngineCreateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(team_id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling createSupervisorInTeam.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling deleteSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'DELETE',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SupervisorInTeam item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(team_id, id, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling readSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling readSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of SupervisorInTeam
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(team_id, page, size, domain_id, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling searchSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors`.replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (domain_id !== undefined) {
                localVarQueryParameter['domain_id'] = domain_id;
            }
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(team_id, id, body, options = {}) {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling updateSupervisorInTeam.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSupervisorInTeam.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSupervisorInTeam.');
            }
            const localVarPath = `/call_center/teams/{team_id}/supervisors/{id}`
                .replace(`{${'team_id'}}`, encodeURIComponent(String(team_id)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'PUT',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('X-Webitel-Access')
                    : configuration.apiKey;
                localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = {
                ...localVarUrlObj.query,
                ...localVarQueryParameter,
                ...options.query,
            };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...options.headers,
            };
            localVarRequestOptions.data = JSON.stringify(body !== undefined ? body : {});
            return {
                url: format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SupervisorInTeamServiceApi - functional programming interface
 * @export
 */
const SupervisorInTeamServiceApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create SupervisorInTeam
         * @param {string} team_id
         * @param {EngineCreateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(team_id, body, options) {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).createSupervisorInTeam(team_id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Remove SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(team_id, id, domain_id, options) {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).deleteSupervisorInTeam(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary SupervisorInTeam item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(team_id, id, domain_id, options) {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).readSupervisorInTeam(team_id, id, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List of SupervisorInTeam
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(team_id, page, size, domain_id, options) {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(team_id, id, body, options) {
            const localVarAxiosArgs = SupervisorInTeamServiceApiAxiosParamCreator(configuration).updateSupervisorInTeam(team_id, id, body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SupervisorInTeamServiceApi - factory interface
 * @export
 */
const SupervisorInTeamServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create SupervisorInTeam
         * @param {string} team_id
         * @param {EngineCreateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupervisorInTeam(team_id, body, options) {
            return SupervisorInTeamServiceApiFp(configuration).createSupervisorInTeam(team_id, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Remove SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupervisorInTeam(team_id, id, domain_id, options) {
            return SupervisorInTeamServiceApiFp(configuration).deleteSupervisorInTeam(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary SupervisorInTeam item
         * @param {string} team_id
         * @param {string} id
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSupervisorInTeam(team_id, id, domain_id, options) {
            return SupervisorInTeamServiceApiFp(configuration).readSupervisorInTeam(team_id, id, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary List of SupervisorInTeam
         * @param {string} team_id
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [domain_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSupervisorInTeam(team_id, page, size, domain_id, options) {
            return SupervisorInTeamServiceApiFp(configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options)(axios, basePath);
        },
        /**
         *
         * @summary Update SupervisorInTeam
         * @param {string} team_id
         * @param {string} id
         * @param {EngineUpdateSupervisorInTeamRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupervisorInTeam(team_id, id, body, options) {
            return SupervisorInTeamServiceApiFp(configuration).updateSupervisorInTeam(team_id, id, body, options)(axios, basePath);
        },
    };
};
/**
 * SupervisorInTeamServiceApi - object-oriented interface
 * @export
 * @class SupervisorInTeamServiceApi
 * @extends {BaseAPI}
 */
class SupervisorInTeamServiceApi extends BaseAPI {
    /**
     *
     * @summary Create SupervisorInTeam
     * @param {string} team_id
     * @param {EngineCreateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    createSupervisorInTeam(team_id, body, options) {
        return SupervisorInTeamServiceApiFp(this.configuration).createSupervisorInTeam(team_id, body, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Remove SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    deleteSupervisorInTeam(team_id, id, domain_id, options) {
        return SupervisorInTeamServiceApiFp(this.configuration).deleteSupervisorInTeam(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary SupervisorInTeam item
     * @param {string} team_id
     * @param {string} id
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    readSupervisorInTeam(team_id, id, domain_id, options) {
        return SupervisorInTeamServiceApiFp(this.configuration).readSupervisorInTeam(team_id, id, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List of SupervisorInTeam
     * @param {string} team_id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domain_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    searchSupervisorInTeam(team_id, page, size, domain_id, options) {
        return SupervisorInTeamServiceApiFp(this.configuration).searchSupervisorInTeam(team_id, page, size, domain_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update SupervisorInTeam
     * @param {string} team_id
     * @param {string} id
     * @param {EngineUpdateSupervisorInTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorInTeamServiceApi
     */
    updateSupervisorInTeam(team_id, id, body, options) {
        return SupervisorInTeamServiceApiFp(this.configuration).updateSupervisorInTeam(team_id, id, body, options)(this.axios, this.basePath);
    }
}

// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019.0.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class Configuration {
    constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
    }
}

// tslint:disable

var CallActions;
(function (CallActions) {
    CallActions["Ringing"] = "ringing";
    CallActions["Active"] = "active";
    CallActions["Bridge"] = "bridge";
    CallActions["Hold"] = "hold";
    CallActions["DTMF"] = "dtmf";
    CallActions["Voice"] = "voice";
    CallActions["Silence"] = "silence";
    CallActions["Execute"] = "execute";
    CallActions["Update"] = "update";
    CallActions["Hangup"] = "hangup";
    CallActions["PeerStream"] = "peerStream";
})(CallActions || (CallActions = {}));
var CallDirection;
(function (CallDirection) {
    CallDirection["Inbound"] = "inbound";
    CallDirection["Outbound"] = "outbound";
    CallDirection["Internal"] = "internal";
})(CallDirection || (CallDirection = {}));
class Call {
    constructor(client, e, peerStreams) {
        this.client = client;
        this.voice = true;
        this.createdAt = Date.now();
        this.answeredAt = 0;
        this.hangupAt = 0;
        this.peerStreams = peerStreams;
        this.id = e.id;
        this.digits = [];
        this.applications = [];
        this.nodeName = e.node_name;
        this.setState(e);
        this.setInfo(e);
    }
    setActive(e) {
        if (!this.answeredAt) {
            this.answeredAt = Date.now();
        }
        this.setState(e);
    }
    get display() {
        return `${this.displayNumber} (${this.displayName})`;
    }
    get muted() {
        return this._muted;
    }
    get allowInboundVideo() {
        if (this.videoFlow) {
            return this.videoFlow.indexOf('send') > -1;
        }
        return false;
    }
    get allowOutboundVideo() {
        if (this.videoFlow) {
            return this.videoFlow.indexOf('recv') > -1;
        }
        return false;
    }
    setInfo(s) {
        this.ownerCallId = s.owner_id;
        this.parentCallId = s.parent_id;
        this.destination = s.destination;
        this.direction = s.direction;
        this.fromNumber = s.from_number;
        this.fromName = s.from_name;
        this.toName = s.to_name;
        this.toNumber = s.to_number;
        this.payload = s.payload;
        if (s.gateway_id) {
            this._gatewayId = s.gateway_id;
        }
        else {
            this._gatewayId = null; // ?
        }
        if (s.video_flow) {
            this.videoFlow = s.video_flow;
        }
        else {
            this.videoFlow = null;
        }
        this.screenRequest = s.screen_request === 'true';
        this.videoRequest = s.video_request === 'true'; //
        this.setState(s);
    }
    get gatewayId() {
        return this._gatewayId;
    }
    setState(s) {
        this.state = s.action;
    }
    get active() {
        return this.hangupAt === 0;
    }
    setPeerStreams(streams) {
        this.peerStreams = streams;
    }
    setHangup(s) {
        this.hangupAt = Date.now();
        this.hangupCause = s.cause;
        this.voice = false;
        this.peerStreams = null;
        this.setState(s);
    }
    setVoice(s) {
        this.voice = true;
    }
    setSilence(s) {
        this.voice = false;
    }
    setExecute(s) {
        this.applications.push(s.application);
    }
    addDigit(s) {
        this.digits.push(s.digit);
    }
    get displayNumber() {
        if (this.direction === 'inbound') {
            return this.fromNumber;
        }
        else {
            return this.toNumber;
        }
    }
    get displayName() {
        if (this.direction === 'inbound') {
            return this.fromName;
        }
        else {
            return this.toName;
        }
    }
    /* Call control */
    answer(req) {
        let sessionId = null;
        if (this.client.phone.hasSession(this.id)) {
            sessionId = this.id;
        }
        else if (this.client.phone.hasSession(this.parentCallId)) {
            sessionId = this.parentCallId;
        }
        if (sessionId) {
            return this.client.phone.answer(sessionId, req);
        }
        return false;
    }
    async hangup(cause) {
        let _cause = cause;
        if (this.answeredAt === 0 && !cause) {
            _cause =
                this.direction === CallDirection.Inbound
                    ? 'USER_BUSY'
                    : 'ORIGINATOR_CANCEL';
        }
        return this.client.request('call_hangup', {
            id: this.id,
            node_id: this.nodeName,
            cause: _cause,
        });
    }
    async toggleHold() {
        if (this.state === CallActions.Hold) {
            return this.unHold();
        }
        else {
            return this.hold();
        }
    }
    async hold() {
        if (this.state === CallActions.Hold) {
            throw new Error('Call is hold');
        }
        return this.client.request('call_hold', {
            id: this.id,
            node_id: this.nodeName,
        });
    }
    async unHold() {
        if (this.state !== CallActions.Hold) {
            throw new Error('Call is active');
        }
        return this.client.request('call_unhold', {
            id: this.id,
            node_id: this.nodeName,
        });
    }
    async sendDTMF(dtmf) {
        return this.client.request('call_dtmf', {
            id: this.id,
            node_id: this.nodeName,
            dtmf,
        });
    }
    async blindTransfer(destination) {
        if (!this.parentCallId) {
            throw new Error('Not allow one leg');
        }
        return this.client.request('call_blind_transfer', {
            id: this.parentCallId,
            node_id: this.nodeName,
            destination,
        });
    }
    async mute(mute = false) {
        const res = await this.client.request('call_mute', {
            id: this.id,
            node_id: this.nodeName,
            mute,
        });
        this._muted = mute;
        return res;
    }
    async bridgeTo(call) {
        return this.client.request('call_bridge', {
            id: this.id,
            node_id: this.nodeName,
            parent_id: call.id,
            parent_node_id: call.nodeName,
        });
    }
    async callToUser(req) {
        req.nodeId = this.nodeName;
        req.parentCallId = this.id || null;
        req.sendToCallId = this.parentCallId || null;
        return this.client.inviteToUser(req);
    }
}

class Log {
    debug(msg, ...supportingDetails) {
        this.emitLogMessage('debug', msg, supportingDetails);
    }
    info(msg, ...supportingDetails) {
        this.emitLogMessage('info', msg, supportingDetails);
    }
    warn(msg, ...supportingDetails) {
        this.emitLogMessage('warn', msg, supportingDetails);
    }
    error(msg, ...supportingDetails) {
        this.emitLogMessage('error', msg, supportingDetails);
    }
    emitLogMessage(msgType, msg, supportingDetails) {
        if (supportingDetails.length > 0) {
            console[msgType](msg, ...supportingDetails);
        }
        else {
            console[msgType](msg);
        }
    }
}

class SipPhone extends EventEmitter {
    constructor(instanceId) {
        super();
        this.instanceId = instanceId;
        this.sessionCache = new Map();
        debug.enable('*');
        this.log = new Log();
        this.on('unregistered', () => {
            this.ua.removeAllListeners();
            delete this.ua;
            this.sessionCache.clear();
        });
    }
    getMediaConstraints(req) {
        if (req.useScreen) {
            return {
                video: false,
                audio: false,
                screen: true,
            };
        }
        return {
            video: req.useVideo || false,
            audio: req.useAudio || true,
        };
    }
    callOption(req) {
        return {
            sessionTimersExpires: 120,
            pcConfig: {
                iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }],
            },
            rtcOfferConstraints: {
                offerToReceiveAudio: req.useAudio || true,
                offerToReceiveVideo: req.useVideo,
            },
            mediaConstraints: this.getMediaConstraints(req),
        };
    }
    getSession(id) {
        if (this.sessionCache.has(id)) {
            return this.sessionCache.get(id);
        }
        return null;
    }
    hasSession(id) {
        return this.sessionCache.has(id);
    }
    getPeerStream(id) {
        const session = this.getSession(id);
        if (session && session.sip.connection) {
            // @ts-ignore
            const streams = session.sip.connection.getRemoteStreams();
            if (streams && streams.length) {
                return streams;
            }
        }
        return null;
    }
    answer(id, req) {
        if (this.sessionCache.has(id)) {
            const session = this.sessionCache.get(id);
            session.sip.answer(this.callOption(req));
            return true;
        }
        return false;
    }
    async register(sipConf) {
        const socket = new WebSocketInterface(sipConf.server);
        const configuration = {
            realm: sipConf.realm,
            uri: sipConf.uri,
            authorization_user: sipConf.authorization_user,
            ha1: sipConf.ha1,
            user_agent: SipPhone.userAgent,
            sockets: [socket],
            session_timers: true,
            // use_preloaded_route: true,
            register_expires: 300,
            connection_recovery_min_interval: 5,
            connection_recovery_max_interval: 60,
        };
        const ua = (this.ua = new UA(configuration));
        ua.on('connected', (e) => {
            this.log.error('connected', e);
        });
        ua.on('newRTCSession', (e) => {
            const session = e.session;
            const id = e.request.getHeader('X-Webitel-Uuid') || session.id;
            const callSession = {
                sip: session,
                incoming: session.direction === 'incoming',
                instance_id: e.request.getHeader('X-Webitel-Sock-Id'),
            };
            this.storeSession(id, callSession);
            session.on('peerconnection', (peer) => {
                peer.peerconnection.addEventListener('addstream', async (evt) => {
                    // set remote audio stream
                    this.emit('peerStreams', id, new Array(evt.stream));
                });
            });
            session.on('ended', () => {
                // this handler will be called for incoming calls too
                this.removeSession(id);
            });
            session.on('failed', () => {
                // this handler will be called for incoming calls too
                this.removeSession(id);
            });
            session.on('accepted', () => {
                // the call has answered
                if (!this.isOutboundCall(id)) {
                    this.emit('peerStreams', id, this.getPeerStream(id));
                }
            });
            session.on('confirmed', () => {
                // this handler will be called for incoming calls too
            });
            this.emit('newSession', id, callSession);
        });
        ua.on('disconnected', (e) => {
            this.log.error('disconnected', e);
            this.emit('unregistered');
        });
        ua.on('registered', (e) => {
            this.log.error('registered', e);
        });
        ua.on('unregistered', (e) => {
            this.log.error('unregistered', e);
            this.emit('unregistered');
        });
        ua.on('registrationFailed', (e) => {
            this.log.error('registrationFailed', e);
        });
        ua.on('error', (e) => {
            this.emit('error', e);
            this.log.error('error', e);
        });
        ua.start();
    }
    isOutboundCall(id) {
        const session = this.getSession(id);
        if (session) {
            return session.incoming && session.instance_id === this.instanceId;
        }
        return false;
    }
    async unregister() {
        if (this.ua) {
            this.ua.unregister();
        }
    }
    get allSession() {
        return Array.from(this.sessionCache.values());
    }
    removeSession(id) {
        if (this.sessionCache.has(id)) {
            this.sessionCache.delete(id);
            return true;
        }
        return false;
    }
    storeSession(id, session) {
        if (this.sessionCache.has(id)) {
            throw new Error('Session already store');
        }
        this.sessionCache.set(id, session);
    }
}
SipPhone.userAgent = 'Webitel-Phone/0.0.1';

function formatWebSocketUri(host) {
    return host.replace(/^http/, 'ws');
}

const SOCKET_URL_SUFFIX = 'websocket';
class Socket extends EventEmitter {
    constructor(host) {
        super();
        this.host = host;
    }
    connect(token) {
        this.socket = new WebSocket(`${formatWebSocketUri(this.host)}/${SOCKET_URL_SUFFIX}?access_token=${token}`);
        this.socket.onclose = (e) => this.onClose(e.code);
        this.socket.onmessage = (e) => this.onMessage(e.data);
        this.socket.onopen = () => this.onOpen();
    }
    send(request) {
        this.socket.send(JSON.stringify(request));
        return null;
    }
    close(code) {
        this.socket.close(code);
        delete this.socket;
    }
    onOpen() {
        this.emit('open');
    }
    onClose(code) {
        this.emit('close', code);
    }
    onMessage(data) {
        const message = JSON.parse(data);
        this.emit('message', message);
    }
}

const WEBSOCKET_AUTHENTICATION_CHALLENGE = 'authentication_challenge';
const WEBSOCKET_DEFAULT_DEVICE_CONFIG = 'user_default_device';
const WEBSOCKET_MAKE_OUTBOUND_CALL = 'call_invite';
const WEBSOCKET_MAKE_USER_CALL = 'call_user';
const WEBSOCKET_EVENT_HELLO = 'hello';
const WEBSOCKET_EVENT_CALL = 'call';
const WEBSOCKET_EVENT_SIP = 'sip';
var Response;
(function (Response) {
    Response["STATUS_FAIL"] = "FAIL";
    Response["STATUS_OK"] = "OK";
})(Response || (Response = {}));
class Client {
    constructor(_config) {
        this._config = _config;
        this.reqSeq = 0;
        this.queueRequest = new Map();
        this.log = new Log();
        this.eventHandler = new EventEmitter();
        this.callStore = new Map();
    }
    async connect() {
        await this.connectToSocket();
    }
    async disconnect() {
        this.socket.close();
    }
    async subscribeCall(handler, data) {
        const res = await this.request(`subscribe_call`, data);
        this.eventHandler.on(WEBSOCKET_EVENT_CALL, handler);
        return res;
    }
    async unSubscribe(action, handler, data) {
        const res = await this.request(`un_subscribe_${action}`, data);
        // this.eventHandler.listeners(action)
        // this.eventHandler.removeListener(action, handler)
        // this.eventHandler.off(action, handler)
        return res;
    }
    allCall() {
        return Array.from(this.callStore.values());
    }
    callById(id) {
        if (this.callStore.has(id)) {
            return this.callStore.get(id);
        }
        return undefined;
    }
    async auth() {
        return this.request(WEBSOCKET_AUTHENTICATION_CHALLENGE, {
            token: this._config.token,
        });
    }
    sessionInfo() {
        return this.connectionInfo.session;
    }
    get version() {
        return this.connectionInfo.server_version;
    }
    get instanceId() {
        return this.connectionInfo.sock_id;
    }
    invite(req) {
        return this.request(WEBSOCKET_MAKE_OUTBOUND_CALL, req);
    }
    inviteToUser(req) {
        return this.request(WEBSOCKET_MAKE_USER_CALL, req);
    }
    answer(id, req) {
        return this.phone.answer(id, req);
    }
    request(action, data) {
        return new Promise((resolve, reject) => {
            this.queueRequest.set(++this.reqSeq, { resolve, reject });
            this.socket.send({
                seq: this.reqSeq,
                action,
                data,
            });
        });
    }
    useWebPhone() {
        return this._config.registerWebDevice || false;
    }
    async deviceConfig() {
        return this.request(WEBSOCKET_DEFAULT_DEVICE_CONFIG, {});
    }
    async onMessage(message) {
        this.log.debug('receive message: ', message);
        if (message.seq_reply > 0) {
            if (this.queueRequest.has(message.seq_reply)) {
                const promise = this.queueRequest.get(message.seq_reply);
                this.queueRequest.delete(message.seq_reply);
                if (message.status === Response.STATUS_OK) {
                    promise.resolve(message.data);
                }
                else {
                    promise.reject(message.error);
                }
            }
        }
        else {
            switch (message.event) {
                case WEBSOCKET_EVENT_HELLO:
                    await this.connected(message.data);
                    this.log.debug(`opened session ${this.connectionInfo.sock_id} for userId=${this.connectionInfo.session.user_id}`);
                    break;
                case WEBSOCKET_EVENT_CALL:
                    this.handleCallEvents(message.data.call);
                    break;
                case WEBSOCKET_EVENT_SIP:
                    this.eventHandler.emit(WEBSOCKET_EVENT_SIP, message.data);
                    break;
                default:
                    this.log.error(`event ${message.event} not handler`);
            }
        }
    }
    async connected(info) {
        this.connectionInfo = info;
        this.phone = new SipPhone(this.instanceId);
        this.phone.on('peerStreams', (id, streams) => {
            const call = this.callById(id);
            if (call && call.peerStreams === null) {
                call.setPeerStreams(streams);
                this.eventHandler.emit(WEBSOCKET_EVENT_CALL, CallActions.PeerStream, call);
            }
        });
        this.phone.on('newSession', this.onNewCallSession.bind(this));
        if (this.useWebPhone()) {
            try {
                const conf = await this.deviceConfig();
                await this.phone.register(conf);
            }
            catch (e) {
                // FIXME add handle error
                this.log.error(e);
            }
        }
    }
    onNewCallSession(id, session) {
        this.checkAutoAnswer(id);
    }
    checkAutoAnswer(id) {
        const call = this.callById(id);
        if (call && this.phone.isOutboundCall(id)) {
            call.answer({
                useVideo: call.videoRequest,
                useScreen: call.screenRequest,
            });
        }
    }
    connectToSocket() {
        return new Promise((resolve, reject) => {
            try {
                this.socket = new Socket(this._config.endpoint);
                this.socket.connect(this._config.token);
            }
            catch (e) {
                reject(e);
                return;
            }
            this.socket.on('message', this.onMessage.bind(this));
            this.socket.on('close', (code) => {
                this.log.error('socket close code: ', code);
                reject(new Error(`close socket code: ${code}`));
            });
            this.socket.on('open', () => {
                resolve(null);
            });
        });
    }
    handleCallEvents(event) {
        let call;
        switch (event.action) {
            case CallActions.Ringing:
                call = new Call(this, event, this.phone.getPeerStream(event.id));
                this.callStore.set(call.id, call);
                this.checkAutoAnswer(event.id);
                break;
            case CallActions.Active:
                call = this.callById(event.id);
                if (call) {
                    call.setActive(event);
                }
                break;
            case CallActions.Bridge:
                call = this.callById(event.id);
                if (call) {
                    // const session = this.phone.getSession(event.id);
                    // if (session) {
                    //   debugger
                    // }
                    call.setInfo(event);
                }
                break;
            case CallActions.Execute:
                call = this.callById(event.id);
                if (call) {
                    call.setExecute(event);
                }
                break;
            case CallActions.DTMF:
                call = this.callById(event.id);
                if (call) {
                    call.addDigit(event);
                }
                break;
            case CallActions.Voice:
                call = this.callById(event.id);
                if (call) {
                    call.setVoice(event);
                }
                break;
            case CallActions.Silence:
                call = this.callById(event.id);
                if (call) {
                    call.setSilence(event);
                }
                break;
            case CallActions.Hold:
                call = this.callById(event.id);
                if (call) {
                    call.setState(event);
                }
                break;
            case CallActions.Hangup:
                call = this.callById(event.id);
                if (call) {
                    call.setHangup(event);
                    this.callStore.delete(call.id);
                }
                break;
            default:
                throw new Error('Unhandled action');
        }
        if (call) {
            this.eventHandler.emit(WEBSOCKET_EVENT_CALL, event.action, call);
        }
    }
}

export { ProtobufNullValue, AgentServiceApiAxiosParamCreator, AgentServiceApiFp, AgentServiceApiFactory, AgentServiceApi, AgentSkillServiceApiAxiosParamCreator, AgentSkillServiceApiFp, AgentSkillServiceApiFactory, AgentSkillServiceApi, AgentTeamServiceApiAxiosParamCreator, AgentTeamServiceApiFp, AgentTeamServiceApiFactory, AgentTeamServiceApi, BackendProfileServiceApiAxiosParamCreator, BackendProfileServiceApiFp, BackendProfileServiceApiFactory, BackendProfileServiceApi, BucketServiceApiAxiosParamCreator, BucketServiceApiFp, BucketServiceApiFactory, BucketServiceApi, CalendarServiceApiAxiosParamCreator, CalendarServiceApiFp, CalendarServiceApiFactory, CalendarServiceApi, CommunicationTypeServiceApiAxiosParamCreator, CommunicationTypeServiceApiFp, CommunicationTypeServiceApiFactory, CommunicationTypeServiceApi, ListServiceApiAxiosParamCreator, ListServiceApiFp, ListServiceApiFactory, ListServiceApi, MediaFileServiceApiAxiosParamCreator, MediaFileServiceApiFp, MediaFileServiceApiFactory, MediaFileServiceApi, MemberServiceApiAxiosParamCreator, MemberServiceApiFp, MemberServiceApiFactory, MemberServiceApi, OutboundResourceGroupServiceApiAxiosParamCreator, OutboundResourceGroupServiceApiFp, OutboundResourceGroupServiceApiFactory, OutboundResourceGroupServiceApi, OutboundResourceServiceApiAxiosParamCreator, OutboundResourceServiceApiFp, OutboundResourceServiceApiFactory, OutboundResourceServiceApi, QueueBucketServiceApiAxiosParamCreator, QueueBucketServiceApiFp, QueueBucketServiceApiFactory, QueueBucketServiceApi, QueueResourcesServiceApiAxiosParamCreator, QueueResourcesServiceApiFp, QueueResourcesServiceApiFactory, QueueResourcesServiceApi, QueueRoutingServiceApiAxiosParamCreator, QueueRoutingServiceApiFp, QueueRoutingServiceApiFactory, QueueRoutingServiceApi, QueueServiceApiAxiosParamCreator, QueueServiceApiFp, QueueServiceApiFactory, QueueServiceApi, ResourceTeamServiceApiAxiosParamCreator, ResourceTeamServiceApiFp, ResourceTeamServiceApiFactory, ResourceTeamServiceApi, RoutingOutboundCallServiceApiAxiosParamCreator, RoutingOutboundCallServiceApiFp, RoutingOutboundCallServiceApiFactory, RoutingOutboundCallServiceApi, RoutingSchemaServiceApiAxiosParamCreator, RoutingSchemaServiceApiFp, RoutingSchemaServiceApiFactory, RoutingSchemaServiceApi, RoutingVariableServiceApiAxiosParamCreator, RoutingVariableServiceApiFp, RoutingVariableServiceApiFactory, RoutingVariableServiceApi, SkillServiceApiAxiosParamCreator, SkillServiceApiFp, SkillServiceApiFactory, SkillServiceApi, SupervisorInTeamServiceApiAxiosParamCreator, SupervisorInTeamServiceApiFp, SupervisorInTeamServiceApiFactory, SupervisorInTeamServiceApi, Configuration, Response, Client, CallActions, CallDirection, Call };
//# sourceMappingURL=index.esm.js.map
