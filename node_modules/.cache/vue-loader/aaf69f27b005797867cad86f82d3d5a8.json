{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/contact-center/queues/opened-queue-resources-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/contact-center/queues/opened-queue-resources-popup.vue","mtime":1578993936383},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport popup from '@/components/utils/popup';\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport {required} from 'vuelidate/lib/validators';\nimport {mapActions, mapState} from \"vuex\";\nimport {getResGroupList} from \"../../../api/contact-center/resourceGroups/resourceGroups\";\n\nexport default {\n    name: \"opened-queue-buckets-popup\",\n    mixins: [editComponentMixin],\n    components: {\n        popup,\n    },\n    data() {\n        return {}\n    },\n\n    validations: {\n        itemInstance: {\n            resourceGroup: {\n                required,\n            },\n        }\n    },\n\n    mounted() {\n        this.loadItem();\n        this.loadDropdownOptionsList();\n    },\n\n    computed: {\n        ...mapState('ccenter/queues/resGroups', {\n            id: state => state.itemId,\n            itemInstance: state => state.itemInstance\n        }),\n        resourceGroup: {\n            get() {\n                return this.$store.state.ccenter.queues.resGroups.itemInstance.resourceGroup\n            },\n            set(value) {\n                this.setItemProp({prop: 'resourceGroup', value})\n            }\n        },\n    },\n\n    methods: {\n        async save() {\n            const invalid = this.checkValidations();\n            if (!invalid) {\n                try {\n                    !this.id ? await this.addItem() : await this.updateItem();\n                    this.$emit('close');\n                } catch {\n                }\n            }\n        },\n\n        async loadDropdownOptionsList(search) {\n            const response = await getResGroupList(0, 10, search);\n            this.dropdownOptionsList = response.map(item => {\n                return {\n                    name: item.name,\n                    id: item.id,\n                }\n            });\n        },\n\n        ...mapActions('ccenter/queues/resGroups', {\n            setItemProp: 'SET_ITEM_PROPERTY',\n            addItem: 'ADD_ITEM',\n            updateItem: 'UPDATE_ITEM',\n            loadItem: 'LOAD_ITEM',\n        }),\n    }\n}\n",{"version":3,"sources":["opened-queue-resources-popup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opened-queue-resources-popup.vue","sourceRoot":"src/components/contact-center/queues","sourcesContent":["<template>\n    <popup\n            :title=\"$t('objects.ccenter.resGroups.addResGroup')\"\n            :primaryAction=\"save\"\n            :primaryText=\"computePrimaryText\"\n            :primaryDisabled=\"computeDisabled\"\n            @close=\"$emit('close')\"\n            overflow\n    >\n        <form>\n            <dropdown-select\n                    v-model=\"resourceGroup\"\n                    :v=\"$v.itemInstance.resourceGroup\"\n                    :options=\"dropdownOptionsList\"\n                    :label=\"$tc('objects.ccenter.resGroups.resGroups', 1)\"\n                    @search=\"loadDropdownOptionsList\"\n                    required\n            ></dropdown-select>\n        </form>\n    </popup>\n</template>\n\n<script>\n    import popup from '@/components/utils/popup';\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {required} from 'vuelidate/lib/validators';\n    import {mapActions, mapState} from \"vuex\";\n    import {getResGroupList} from \"../../../api/contact-center/resourceGroups/resourceGroups\";\n\n    export default {\n        name: \"opened-queue-buckets-popup\",\n        mixins: [editComponentMixin],\n        components: {\n            popup,\n        },\n        data() {\n            return {}\n        },\n\n        validations: {\n            itemInstance: {\n                resourceGroup: {\n                    required,\n                },\n            }\n        },\n\n        mounted() {\n            this.loadItem();\n            this.loadDropdownOptionsList();\n        },\n\n        computed: {\n            ...mapState('ccenter/queues/resGroups', {\n                id: state => state.itemId,\n                itemInstance: state => state.itemInstance\n            }),\n            resourceGroup: {\n                get() {\n                    return this.$store.state.ccenter.queues.resGroups.itemInstance.resourceGroup\n                },\n                set(value) {\n                    this.setItemProp({prop: 'resourceGroup', value})\n                }\n            },\n        },\n\n        methods: {\n            async save() {\n                const invalid = this.checkValidations();\n                if (!invalid) {\n                    try {\n                        !this.id ? await this.addItem() : await this.updateItem();\n                        this.$emit('close');\n                    } catch {\n                    }\n                }\n            },\n\n            async loadDropdownOptionsList(search) {\n                const response = await getResGroupList(0, 10, search);\n                this.dropdownOptionsList = response.map(item => {\n                    return {\n                        name: item.name,\n                        id: item.id,\n                    }\n                });\n            },\n\n            ...mapActions('ccenter/queues/resGroups', {\n                setItemProp: 'SET_ITEM_PROPERTY',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n                loadItem: 'LOAD_ITEM',\n            }),\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}