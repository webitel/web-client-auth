{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/routing/dialplan/the-dialplan.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/routing/dialplan/the-dialplan.vue","mtime":1581514601003},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport tableComponentMixin from '../../../mixins/tableComponentMixin';\nimport {_checkboxTableField, _actionsTableField_3, _switcherWidth} from \"../../../utils/tableFieldPresets\";\nimport {mapActions, mapState} from \"vuex\";\nimport Sortable, {Swap} from 'sortablejs';\n\nSortable.mount(new Swap());\nconst isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nconst sortableConfig = {\n    swap: true, // Enable swap mode\n    swapClass: \"sortable-swap-highlight\", // Class name for swap item (if swap mode is enabled)\n    animation: 150,  // ms, animation speed moving items when sorting, `0` â€” without animation\n    easing: \"cubic-bezier(1, 0, 0, 1)\", // Easing for animation. Defaults to null. See https://easings.net/ for examples.\n    ghostClass: \"sortable-ghost\",  // Class name for the drop placeholder\n    chosenClass: \"sortable-chosen\",  // Class name for the chosen item\n    dragClass: \"sortable-drag\",  // Class name for the dragging item\n\n    direction: 'vertical', // Direction of Sortable (will be detected automatically if not given)\n\n    forceFallback: isFirefox,  // ignore the HTML5 DnD behaviour and force the fallback to kick in\n    fallbackClass: \"sortable-fallback\",  // Class name for the cloned DOM Element when using forceFallback\n\n    setData: (dataTransfer, draggedElement) => {\n        dataTransfer.setData('foo', 'bar'); // required by Firefox in order to DnD work: https://stackoverflow.com/a/19055350/1411105\n    },\n};\n\nexport default {\n    name: \"the-dialplan\",\n    mixins: [tableComponentMixin],\n    data() {\n        return {\n            sortableInstance: null,\n            fields: [\n                _checkboxTableField,\n                {name: 'name', title: this.$t('objects.name')},\n                {name: 'pattern', title: this.$t('objects.routing.dialplan.pattern')},\n                {name: 'schema', title: this.$tc('objects.routing.schema', 1)},\n                {name: 'enabled', title: this.$t('objects.enabled'), width: _switcherWidth},\n                _actionsTableField_3,\n            ],\n        };\n    },\n\n    watch: {\n        dataList() {\n            this.initSortable();\n        }\n    },\n\n    computed: {\n        ...mapState('routing/dialplan', {\n            dataList: state => state.dataList,\n            page: state => state.page, // acts like a boolean: if page is 0, there's no back page\n            isNextPage: state => state.isNextPage,\n        }),\n\n        size: {\n            get() {\n                return this.$store.state.routing.dialplan.size\n            },\n            set(value) {\n                this.setSize(value)\n            }\n        },\n\n        search: {\n            get() {\n                return this.$store.state.routing.dialplan.search\n            },\n            set(value) {\n                this.setSearch(value)\n            }\n        }\n    },\n\n    methods: {\n        initSortable() {\n            if (this.sortableInstance) this.sortableInstance.destroy();\n\n            // https://github.com/SortableJS/Sortable#options\n            const vuetableBody = document.querySelector('.vuetable-body');\n            this.sortableInstance = Sortable.create(vuetableBody, {\n                ...sortableConfig,\n\n                // Element dragging ended\n                onEnd: async (event) => {\n                    if(event.oldIndex === event.newIndex) return;\n                    const fromId = this.dataList[event.oldIndex].id;\n                    const toId = this.dataList[event.newIndex].id;\n                    await this.swapRows({fromId, toId});\n                },\n            });\n\n        },\n\n        create() {\n            this.$router.push('/routing/dialplan/new');\n        },\n\n        edit(rowId) {\n            this.$router.push({\n                name: 'dialplan-edit',\n                params: {id: this.dataList[rowId].id},\n            });\n        },\n\n        ...mapActions('routing/dialplan', {\n            loadDataList: 'LOAD_DATA_LIST',\n            setSize: 'SET_SIZE',\n            setSearch: 'SET_SEARCH',\n            toggleSwitchProperty: 'TOGGLE_ITEM_PROPERTY',\n            swapRows: 'SWAP_ROWS',\n            nextPage: 'NEXT_PAGE',\n            prevPage: 'PREV_PAGE',\n            removeItem: 'REMOVE_ITEM',\n        }),\n    }\n}\n",{"version":3,"sources":["the-dialplan.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"the-dialplan.vue","sourceRoot":"src/components/routing/dialplan","sourcesContent":["<template>\n    <div class=\"content-wrap\">\n        <object-header\n                :primaryAction=\"create\"\n        >\n            {{$t('objects.routing.routing')}} |\n            {{$t('objects.routing.dialplan.dialplan')}}\n        </object-header>\n\n        <section class=\"object-content dialplan\">\n            <header class=\"content-header\">\n                <h3 class=\"content-title\">{{$t('objects.routing.dialplan.dialplanRules')}}</h3>\n                <div class=\"content-header__actions-wrap\">\n                    <search\n                            v-model=\"search\"\n                            @filterData=\"loadList\"\n                    ></search>\n                    <i\n                            class=\"icon-icon_delete icon-action\"\n                            :class=\"{'hidden': anySelected}\"\n                            :title=\"$t('iconHints.deleteSelected')\"\n                            @click=\"deleteSelected\"\n                    ></i>\n                    <i\n                            class=\"icon-icon_reload icon-action\"\n                            :title=\"$t('iconHints.reload')\"\n                            @click=\"loadList\"\n                    ></i>\n                </div>\n            </header>\n\n            <loader v-show=\"!isLoaded\"></loader>\n\n            <vuetable\n                    v-show=\"isLoaded\"\n                    ref=\"vuetable\"\n                    :api-mode=\"false\"\n                    :fields=\"fields\"\n                    :data=\"dataList\"\n            >\n                <template slot=\"name\" slot-scope=\"props\">\n                    <div class=\"tt-capitalize\">\n                        <span class=\"nameLink\" @click=\"edit(props.rowIndex)\">\n                        {{dataList[props.rowIndex].name}}\n                        </span>\n                    </div>\n                </template>\n\n                <template slot=\"pattern\" slot-scope=\"props\">\n                    <div>\n                        {{dataList[props.rowIndex].pattern}}\n                    </div>\n                </template>\n\n                <template slot=\"schema\" slot-scope=\"props\">\n                    <div>\n                        {{dataList[props.rowIndex].schema.name || 'schema IS EMPTY'}}\n                    </div>\n                </template>\n\n                <template slot=\"enabled\" slot-scope=\"props\">\n                    <switcher\n                            :value=\"!dataList[props.rowIndex].disabled\"\n                            @input=\"toggleSwitchProperty(props.rowIndex)\"\n                    ></switcher>\n                </template>\n\n                <template slot=\"actions\" slot-scope=\"props\">\n                    <i class=\"vuetable-action icon-icon_draggable\"\n                       :title=\"$t('iconHints.draggable')\"\n                    ></i>\n                    <i class=\"vuetable-action icon-icon_edit\"\n                       :title=\"$t('iconHints.edit')\"\n                       @click=\"edit(props.rowIndex)\"\n                    ></i>\n                    <i class=\"vuetable-action icon-icon_delete\"\n                       :title=\"$t('iconHints.delete')\"\n                       @click=\"remove(props.rowIndex)\"\n                    ></i>\n                </template>\n            </vuetable>\n            <pagination\n                    v-show=\"isLoaded\"\n                    v-model=\"size\"\n                    @loadDataList=\"loadList\"\n                    @next=\"nextPage\"\n                    @prev=\"prevPage\"\n                    :isNext=\"isNextPage\"\n                    :isPrev=\"!!page\"\n            ></pagination>\n        </section>\n    </div>\n</template>\n\n<script>\n    import tableComponentMixin from '../../../mixins/tableComponentMixin';\n    import {_checkboxTableField, _actionsTableField_3, _switcherWidth} from \"../../../utils/tableFieldPresets\";\n    import {mapActions, mapState} from \"vuex\";\n    import Sortable, {Swap} from 'sortablejs';\n\n    Sortable.mount(new Swap());\n    const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n    const sortableConfig = {\n        swap: true, // Enable swap mode\n        swapClass: \"sortable-swap-highlight\", // Class name for swap item (if swap mode is enabled)\n        animation: 150,  // ms, animation speed moving items when sorting, `0` â€” without animation\n        easing: \"cubic-bezier(1, 0, 0, 1)\", // Easing for animation. Defaults to null. See https://easings.net/ for examples.\n        ghostClass: \"sortable-ghost\",  // Class name for the drop placeholder\n        chosenClass: \"sortable-chosen\",  // Class name for the chosen item\n        dragClass: \"sortable-drag\",  // Class name for the dragging item\n\n        direction: 'vertical', // Direction of Sortable (will be detected automatically if not given)\n\n        forceFallback: isFirefox,  // ignore the HTML5 DnD behaviour and force the fallback to kick in\n        fallbackClass: \"sortable-fallback\",  // Class name for the cloned DOM Element when using forceFallback\n\n        setData: (dataTransfer, draggedElement) => {\n            dataTransfer.setData('foo', 'bar'); // required by Firefox in order to DnD work: https://stackoverflow.com/a/19055350/1411105\n        },\n    };\n\n    export default {\n        name: \"the-dialplan\",\n        mixins: [tableComponentMixin],\n        data() {\n            return {\n                sortableInstance: null,\n                fields: [\n                    _checkboxTableField,\n                    {name: 'name', title: this.$t('objects.name')},\n                    {name: 'pattern', title: this.$t('objects.routing.dialplan.pattern')},\n                    {name: 'schema', title: this.$tc('objects.routing.schema', 1)},\n                    {name: 'enabled', title: this.$t('objects.enabled'), width: _switcherWidth},\n                    _actionsTableField_3,\n                ],\n            };\n        },\n\n        watch: {\n            dataList() {\n                this.initSortable();\n            }\n        },\n\n        computed: {\n            ...mapState('routing/dialplan', {\n                dataList: state => state.dataList,\n                page: state => state.page, // acts like a boolean: if page is 0, there's no back page\n                isNextPage: state => state.isNextPage,\n            }),\n\n            size: {\n                get() {\n                    return this.$store.state.routing.dialplan.size\n                },\n                set(value) {\n                    this.setSize(value)\n                }\n            },\n\n            search: {\n                get() {\n                    return this.$store.state.routing.dialplan.search\n                },\n                set(value) {\n                    this.setSearch(value)\n                }\n            }\n        },\n\n        methods: {\n            initSortable() {\n                if (this.sortableInstance) this.sortableInstance.destroy();\n\n                // https://github.com/SortableJS/Sortable#options\n                const vuetableBody = document.querySelector('.vuetable-body');\n                this.sortableInstance = Sortable.create(vuetableBody, {\n                    ...sortableConfig,\n\n                    // Element dragging ended\n                    onEnd: async (event) => {\n                        if(event.oldIndex === event.newIndex) return;\n                        const fromId = this.dataList[event.oldIndex].id;\n                        const toId = this.dataList[event.newIndex].id;\n                        await this.swapRows({fromId, toId});\n                    },\n                });\n\n            },\n\n            create() {\n                this.$router.push('/routing/dialplan/new');\n            },\n\n            edit(rowId) {\n                this.$router.push({\n                    name: 'dialplan-edit',\n                    params: {id: this.dataList[rowId].id},\n                });\n            },\n\n            ...mapActions('routing/dialplan', {\n                loadDataList: 'LOAD_DATA_LIST',\n                setSize: 'SET_SIZE',\n                setSearch: 'SET_SEARCH',\n                toggleSwitchProperty: 'TOGGLE_ITEM_PROPERTY',\n                swapRows: 'SWAP_ROWS',\n                nextPage: 'NEXT_PAGE',\n                prevPage: 'PREV_PAGE',\n                removeItem: 'REMOVE_ITEM',\n            }),\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .dialplan .vuetable {\n        .sortable-chosen {\n            .icon-icon_draggable:before {\n                color: #000;\n            }\n        }\n        \n        .icon-action.icon-icon_draggable {\n            cursor: grab;\n        }\n        \n        .sortable-drag {\n            position: relative;\n            border-radius: $border-radius;\n        }\n\n        // Firefox fallback\n        .sortable-fallback {\n            display: grid;\n            grid-template-columns: 42px 1fr 1fr 1fr 10% 240px;\n            grid-column-gap: 10px;\n            align-items: center;\n        }\n\n        .sortable-swap-highlight {\n            background: $accent-color;\n        }\n    }\n</style>"]}]}