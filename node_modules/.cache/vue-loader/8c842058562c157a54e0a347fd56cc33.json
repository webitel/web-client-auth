{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/routing/sip-gateways/opened-register-sip-gateway.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/routing/sip-gateways/opened-register-sip-gateway.vue","mtime":1578657456694},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport openedRegisterSipGatewayGeneral from './opened-register-sip-gateway-general';\nimport openedRegisterSipGatewayConfiguration from './opened-register-sip-gateway-configuration';\n\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport {gatewayHostValidator} from '@/utils/validators';\nimport {required, minValue, maxValue, numeric} from 'vuelidate/lib/validators';\n\nimport {mapActions, mapState} from \"vuex\";\n\nexport default {\n    name: 'opened-register-sip-gateway',\n    mixins: [editComponentMixin],\n    components: {\n        openedRegisterSipGatewayGeneral,\n        openedRegisterSipGatewayConfiguration\n    },\n    data() {\n        return {\n            tabs: [\n                {\n                    text: this.$t('objects.general'),\n                    value: 'general',\n                },\n                {\n                    text: this.$tc('objects.routing.configuration'),\n                    value: 'configuration',\n                },\n            ],\n        };\n    },\n\n    // by vuelidate\n    validations: {\n        itemInstance: {\n            name: {\n                required\n            },\n            registrar: {\n                gatewayHostValidator,\n                required\n            },\n            domain: {\n                gatewayHostValidator\n            },\n            proxy: {\n                gatewayHostValidator\n            },\n            accountName: {\n                required\n            },\n            expires: {\n                numeric,\n                minValue: minValue(32),\n                maxValue: maxValue(3600),\n                required\n            },\n            password: {\n                required\n            },\n        }\n    },\n\n    mounted() {\n        this.id = this.$route.params.id;\n        this.loadItem();\n    },\n\n    computed: {\n        ...mapState('routing/gateways', {\n            itemInstance: state => state.itemInstance,\n        }),\n        id: {\n            get() {return this.$store.state.routing.gateways.itemId},\n            set(value) {this.setId(value)}\n        }\n    },\n\n    methods: {\n        ...mapActions('routing/gateways', {\n            setId: 'SET_ITEM_ID',\n            loadItem: 'LOAD_REGISTER_ITEM',\n            addItem: 'ADD_ITEM',\n            updateItem: 'UPDATE_ITEM',\n        }),\n    },\n};\n",{"version":3,"sources":["opened-register-sip-gateway.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opened-register-sip-gateway.vue","sourceRoot":"src/components/routing/sip-gateways","sourcesContent":["<template>\n    <div>\n        <object-header\n                :primaryText=\"computePrimaryText\"\n                :primaryAction=\"save\"\n                :primaryDisabled=\"computeDisabled\"\n                close\n        > {{$t('objects.routing.gateways.registerGateway')}} |\n            {{computeTitle}}\n        </object-header>\n\n        <tabs-component\n                :tabs=\"tabs\"\n                :root=\"$options.name\"\n        >\n            <template slot=\"component\" slot-scope=\"props\">\n                <component\n                        class=\"tabs-inner-component\"\n                        :is=\"props.currentTab\"\n                        :v=\"$v\"\n                ></component>\n            </template>\n        </tabs-component>\n    </div>\n</template>\n\n<script>\n    import openedRegisterSipGatewayGeneral from './opened-register-sip-gateway-general';\n    import openedRegisterSipGatewayConfiguration from './opened-register-sip-gateway-configuration';\n\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {gatewayHostValidator} from '@/utils/validators';\n    import {required, minValue, maxValue, numeric} from 'vuelidate/lib/validators';\n\n    import {mapActions, mapState} from \"vuex\";\n\n    export default {\n        name: 'opened-register-sip-gateway',\n        mixins: [editComponentMixin],\n        components: {\n            openedRegisterSipGatewayGeneral,\n            openedRegisterSipGatewayConfiguration\n        },\n        data() {\n            return {\n                tabs: [\n                    {\n                        text: this.$t('objects.general'),\n                        value: 'general',\n                    },\n                    {\n                        text: this.$tc('objects.routing.configuration'),\n                        value: 'configuration',\n                    },\n                ],\n            };\n        },\n\n        // by vuelidate\n        validations: {\n            itemInstance: {\n                name: {\n                    required\n                },\n                registrar: {\n                    gatewayHostValidator,\n                    required\n                },\n                domain: {\n                    gatewayHostValidator\n                },\n                proxy: {\n                    gatewayHostValidator\n                },\n                accountName: {\n                    required\n                },\n                expires: {\n                    numeric,\n                    minValue: minValue(32),\n                    maxValue: maxValue(3600),\n                    required\n                },\n                password: {\n                    required\n                },\n            }\n        },\n\n        mounted() {\n            this.id = this.$route.params.id;\n            this.loadItem();\n        },\n\n        computed: {\n            ...mapState('routing/gateways', {\n                itemInstance: state => state.itemInstance,\n            }),\n            id: {\n                get() {return this.$store.state.routing.gateways.itemId},\n                set(value) {this.setId(value)}\n            }\n        },\n\n        methods: {\n            ...mapActions('routing/gateways', {\n                setId: 'SET_ITEM_ID',\n                loadItem: 'LOAD_REGISTER_ITEM',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n            }),\n        },\n    };\n</script>"]}]}