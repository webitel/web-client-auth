{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/contact-center/members/upload-members-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/contact-center/members/upload-members-popup.vue","mtime":1579614125629},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport tagsInput from '../../utils/tags-input';\nimport uploadCSVMixin from '../../../mixins/uploadCSVMixin';\nimport {addMember, addMembersList} from \"../../../api/contact-center/queues/queueMembers\";\nimport {mapState} from \"vuex\";\n\nexport default {\n    name: \"upload-members-popup\",\n    mixins: [uploadCSVMixin],\n    components: {tagsInput},\n    data() {\n        return {\n            bulk: [],\n            mappingFields: [\n                {\n                    name: 'name',\n                    required: true,\n                    csv: {}\n                },\n                {\n                    name: 'timezoneId',\n                    required: true,\n                    csv: {}\n                },\n                {\n                    name: 'priority',\n                    required: false,\n                    csv: {}\n                },\n                {\n                    text: 'Expire',\n                    name: 'expireAt',\n                    required: false,\n                    csv: {}\n                },\n                {\n                    name: 'bucketId',\n                    required: false,\n                    csv: {}\n                },\n                {\n                    name: 'variables',\n                    required: false,\n                    tags: true,\n                    csvArr: []\n                },\n                {\n                    text: 'Communication destination',\n                    name: 'destination',\n                    required: true,\n                    tags: true,\n                    csvArr: []\n                },\n                {\n                    text: 'Communication priority',\n                    name: 'priority',\n                    required: false,\n                    tags: true,\n                    csvArr: []\n                },\n                {\n                    text: 'Communication typeId',\n                    name: 'typeId',\n                    required: true,\n                    tags: true,\n                    csvArr: []\n                },\n                {\n                    text: 'Communication description',\n                    name: 'description',\n                    required: false,\n                    tags: true,\n                    csvArr: []\n                },\n            ],\n        }\n    },\n\n    computed: {\n        ...mapState('ccenter/queues/members', {\n            parentId: state => state.parentId,\n        }),\n\n        computeDisabledSave() {\n            // find all required fields\n            let required = this.mappingFields.filter(field => field.required);\n            // check if some of them are empty\n            return required.some(item => {\n                return item.tags ? !item.csvArr.length : !Object.entries(item.csv).length;\n            });\n        },\n    },\n\n    methods: {\n        async save() {\n            try {\n                // entries() need to get index of iteration\n                for (const [index, row] of this.csvArr.entries()) {\n                    // skip 0 index if it is headers\n                    if (!this.skipHeaders || (this.skipHeaders && index)) {\n                        let item = this.setFields(row, this.mappingFields);\n                        this.bulk.push(item);\n                    }\n                }\n                await addMembersList(this.parentId, this.bulk);\n                this.$emit('close');\n            } catch {\n            }\n        },\n\n        setFields(row, mappingFields) {\n            let item = {variables: {}, communications: []};\n            mappingFields.forEach(field => {\n                if (field.csv && Object.entries(field.csv).length) {\n                    let name = field.name;\n                    if (name.includes('Id')) {\n                        name = name.slice(0, -2);\n                        item[name] = {id: row[field.csv.id]};\n                    } else {\n                        item[name] = row[field.csv.id];\n                    }\n                }\n            });\n            let communications = mappingFields.filter(field => field.tags);\n            communications.forEach(field => {\n                field.csvArr.forEach((csvItem, index) => {\n                    let name = field.name;\n                    if (name === 'variables') {\n                        item.variables[csvItem.name] = row[csvItem.id];\n                    } else {\n                        item.communications[index] = item.communications[index] || {};\n                        if (name.includes('Id')) {\n                            name = name.slice(0, -2);\n                            item.communications[index][name] = {id: row[csvItem.id]};\n                        } else {\n                            item.communications[index][name] = row[csvItem.id];\n                        }\n                    }\n                });\n            });\n            return item;\n        },\n    }\n}\n",{"version":3,"sources":["upload-members-popup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"upload-members-popup.vue","sourceRoot":"src/components/contact-center/members","sourcesContent":["<template>\n    <popup\n            class=\"upload-popup\"\n            :title=\"$t('objects.importCSV')\"\n            :primaryAction=\"save\"\n            :primaryDisabled=\"computeDisabledSave\"\n            @close=\"$emit('close')\"\n    >\n        <section class=\"upload-popup__info\">\n            <checkbox\n                    class=\"upload-popup__info-headers\"\n                    v-model=\"skipHeaders\"\n                    :label=\"$t('objects.CSV.skipHeaders')\"\n            ></checkbox>\n            <form>\n                <dropdown-select\n                        v-model=\"charset\"\n                        :options=\"charsetOptions\"\n                        :label=\"$t('objects.CSV.charSet')\"\n                ></dropdown-select>\n\n                <form-input\n                        v-model=\"separator\"\n                        :label=\"$t('objects.CSV.separator')\"\n                ></form-input>\n            </form>\n        </section>\n\n        <section class=\"CSV-column-match\">\n            <header class=\"column-headers\">\n                <div>{{$t('objects.CSV.fieldName')}}</div>\n                <div>{{$t('objects.CSV.CSVColumn')}}</div>\n            </header>\n            <div class=\"column-rows\">\n                <ul>\n                    <li\n                            v-for=\"(field, key) in mappingFields\"\n                            :key=\"key\"\n                    >\n                        <div>{{field.text || field.name}}<span v-if=\"field.required\">*</span></div>\n                        <tags-input\n                                v-if=\"field.tags\"\n                                v-model=\"field.csvArr\"\n                                :placeholder=\"field.text || field.name\"\n                                :options=\"computeHeaders\"\n                                hide-label\n                                hide-details\n                        ></tags-input>\n                        <dropdown-select\n                                v-else\n                                v-model=\"field.csv\"\n                                :placeholder=\"field.text || field.name\"\n                                :options=\"computeHeaders\"\n                                hide-label\n                                hide-details\n                        ></dropdown-select>\n                    </li>\n                </ul>\n\n            </div>\n        </section>\n    </popup>\n</template>\n\n<script>\n    import tagsInput from '../../utils/tags-input';\n    import uploadCSVMixin from '../../../mixins/uploadCSVMixin';\n    import {addMember, addMembersList} from \"../../../api/contact-center/queues/queueMembers\";\n    import {mapState} from \"vuex\";\n\n    export default {\n        name: \"upload-members-popup\",\n        mixins: [uploadCSVMixin],\n        components: {tagsInput},\n        data() {\n            return {\n                bulk: [],\n                mappingFields: [\n                    {\n                        name: 'name',\n                        required: true,\n                        csv: {}\n                    },\n                    {\n                        name: 'timezoneId',\n                        required: true,\n                        csv: {}\n                    },\n                    {\n                        name: 'priority',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        text: 'Expire',\n                        name: 'expireAt',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        name: 'bucketId',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        name: 'variables',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication destination',\n                        name: 'destination',\n                        required: true,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication priority',\n                        name: 'priority',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication typeId',\n                        name: 'typeId',\n                        required: true,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication description',\n                        name: 'description',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                ],\n            }\n        },\n\n        computed: {\n            ...mapState('ccenter/queues/members', {\n                parentId: state => state.parentId,\n            }),\n\n            computeDisabledSave() {\n                // find all required fields\n                let required = this.mappingFields.filter(field => field.required);\n                // check if some of them are empty\n                return required.some(item => {\n                    return item.tags ? !item.csvArr.length : !Object.entries(item.csv).length;\n                });\n            },\n        },\n\n        methods: {\n            async save() {\n                try {\n                    // entries() need to get index of iteration\n                    for (const [index, row] of this.csvArr.entries()) {\n                        // skip 0 index if it is headers\n                        if (!this.skipHeaders || (this.skipHeaders && index)) {\n                            let item = this.setFields(row, this.mappingFields);\n                            this.bulk.push(item);\n                        }\n                    }\n                    await addMembersList(this.parentId, this.bulk);\n                    this.$emit('close');\n                } catch {\n                }\n            },\n\n            setFields(row, mappingFields) {\n                let item = {variables: {}, communications: []};\n                mappingFields.forEach(field => {\n                    if (field.csv && Object.entries(field.csv).length) {\n                        let name = field.name;\n                        if (name.includes('Id')) {\n                            name = name.slice(0, -2);\n                            item[name] = {id: row[field.csv.id]};\n                        } else {\n                            item[name] = row[field.csv.id];\n                        }\n                    }\n                });\n                let communications = mappingFields.filter(field => field.tags);\n                communications.forEach(field => {\n                    field.csvArr.forEach((csvItem, index) => {\n                        let name = field.name;\n                        if (name === 'variables') {\n                            item.variables[csvItem.name] = row[csvItem.id];\n                        } else {\n                            item.communications[index] = item.communications[index] || {};\n                            if (name.includes('Id')) {\n                                name = name.slice(0, -2);\n                                item.communications[index][name] = {id: row[csvItem.id]};\n                            } else {\n                                item.communications[index][name] = row[csvItem.id];\n                            }\n                        }\n                    });\n                });\n                return item;\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"../../../assets/css/objects/upload-popup\";\n</style>"]}]}