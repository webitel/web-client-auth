{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/lookups/media/the-media.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/lookups/media/the-media.vue","mtime":1581435762708},{"path":"/home/dev/work/client-auth/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dz-custom-message i:before {\n    color: $accent-color;\n}\n\n.new-file {\n    background: rgba(255, 193, 7, 0.1);\n}\n",{"version":3,"sources":["the-media.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoVA;AACA;AACA;;AAEA;AACA;AACA","file":"the-media.vue","sourceRoot":"src/components/lookups/media","sourcesContent":["<template>\n    <div class=\"content-wrap\">\n        <object-header\n                hide-primary-action\n        >\n            {{$t('objects.lookups.lookups')}} |\n            {{$tc('objects.lookups.media.mediaFiles', 2)}}\n        </object-header>\n\n        <!--        <textToSpeechPopup-->\n        <!--                v-if=\"popupTriggerIf\"-->\n        <!--                @close=\"popupTriggerIf = false\"-->\n        <!--        ></textToSpeechPopup>-->\n\n        <section class=\"object-content\" ref=\"object-content\">\n            <header class=\"content-header\">\n                <h3 class=\"content-title\">{{$t('objects.lookups.media.allMediaFiles')}}</h3>\n                <div class=\"content-header__actions-wrap\">\n                    <search\n                            v-model=\"search\"\n                            @filterData=\"loadList\"\n                    ></search>\n                    <i\n                            class=\"icon-icon_delete icon-action\"\n                            :class=\"{'hidden': anySelected}\"\n                            :title=\"$t('iconHints.deleteSelected')\"\n                            @click=\"deleteSelected\"\n                    ></i>\n                    <i\n                            class=\"icon-action icon-icon_download\"\n                            :title=\"$t('iconHints.downloadAll')\"\n                            @click=\"downloadAll\"\n                    ></i>\n                    <!--                    <i class=\"icon-action icon-icon_text-to-speech\" @click=\"openPopup\"></i>-->\n                    <i\n                            class=\"icon-icon_reload icon-action\"\n                            :title=\"$t('iconHints.reload')\"\n                            @click=\"loadList\"\n                    ></i>\n                </div>\n            </header>\n            <vue-dropzone\n                    id=\"dropzone\"\n                    :options=\"dropzoneOptions\"\n                    :destroy-dropzone=\"false\"\n                    use-custom-slot\n                    duplicate-check\n                    @vdropzone-files-added=\"onFilesAdded\"\n                    @vdropzone-success=\"onFileSuccess\"\n                    @vdropzone-error=\"onFileError\"\n                    @vdropzone-queue-complete=\"onComplete\"\n            >\n                <div v-show=\"isLoadingFiles\">\n                    <div class=\"progress-count\">\n                        <span>{{loadedCount}}</span>/<span>{{allLoadingCount}}</span>\n                    </div>\n                </div>\n                <div\n                        v-show=\"!isLoadingFiles\"\n                        class=\"dz-custom-message\"\n                        :title=\"$t('iconHints.upload')\"\n                >\n                    <i class=\"icon-icon_upload\"></i>\n                    <div class=\"dz-message-text\">\n                        <span class=\"dz-message-text__accent\">\n                            {{$t('objects.lookups.media.dragPlaceholder')}}\n                        </span>\n                        {{$t('objects.lookups.media.dragPlaceholderHere')}}\n                    </div>\n                </div>\n            </vue-dropzone>\n\n            <loader v-show=\"!isLoaded\"></loader>\n\n            <vuetable\n                    v-show=\"isLoaded\"\n                    :api-mode=\"false\"\n                    :fields=\"fields\"\n                    :data=\"dataList\"\n            >\n                <template slot=\"name\" slot-scope=\"props\">\n                    <div>\n                        {{dataList[props.rowIndex].name}}\n                    </div>\n                </template>\n\n                <template slot=\"createdAt\" slot-scope=\"props\">\n                    <div>\n                        {{computeDate(dataList[props.rowIndex].createdAt)}}\n                    </div>\n                </template>\n\n                <template slot=\"format\" slot-scope=\"props\">\n                    <div>\n                        {{computeFormat(dataList[props.rowIndex].mimeType)}}\n                    </div>\n                </template>\n\n                <template slot=\"size\" slot-scope=\"props\">\n                    <div>\n                        {{computeSize(dataList[props.rowIndex].size)}}\n                    </div>\n                </template>\n\n                <template slot=\"actions\" slot-scope=\"props\">\n                    <i\n                            class=\"vuetable-action icon-icon_download\"\n                            :title=\"$t('iconHints.download')\"\n                            @click=\"downloadFile(props.rowIndex)\"\n                    ></i>\n                    <div class=\"vuetable-action iframe-wrap\">\n                        <i\n                                class=\"icon-icon_play\"\n                                v-show=\"props.rowIndex !== playingIndex || !currentlyPlaying\"\n                                :title=\"$t('iconHints.play')\"\n                                @click=\"play(props.rowIndex)\"\n                        ></i>\n                        <iframe\n                                v-show=\"props.rowIndex === playingIndex && currentlyPlaying\"\n                                :src=\"`${baseUrl}animations/equalizer/eq.html`\"\n                        ></iframe>\n                    </div>\n                    <i\n                            class=\"vuetable-action icon-icon_delete\"\n                            :title=\"$t('iconHints.delete')\"\n                            @click=\"remove(props.rowIndex)\"\n                    ></i>\n                </template>\n            </vuetable>\n            <pagination\n                    v-show=\"isLoaded\"\n                    v-model=\"size\"\n                    @loadDataList=\"loadList\"\n                    @next=\"nextPage\"\n                    @prev=\"prevPage\"\n                    :isNext=\"isNextPage\"\n                    :isPrev=\"!!page\"\n            ></pagination>\n        </section>\n        <audio-player\n                v-show=\"playerTriggerShow\"\n                :file=\"audioLink\"\n                @play=\"currentlyPlaying = true\"\n                @pause=\"currentlyPlaying = false\"\n                @close=\"playerTriggerShow = false\"\n        ></audio-player>\n    </div>\n</template>\n\n<script>\n    import jszip from 'jszip';\n    import jszipUtils from 'jszip-utils';\n    import {saveAs} from 'file-saver';\n    import vueDropzone from 'vue2-dropzone';\n    import audioPlayer from '../../utils/audio-player';\n    import textToSpeechPopup from './media-text-to-speech-popup';\n    import tableComponentMixin from '../../../mixins/tableComponentMixin';\n    import {_checkboxTableField, _actionsTableField_3} from \"../../../utils/tableFieldPresets\";\n    import eventBus from \"../../../utils/eventBus\";\n    import {mapActions, mapState} from \"vuex\";\n    import {download} from \"../../../utils/download\";\n\n    const token = localStorage.getItem('access-token');\n    const BASE_URL = process.env.VUE_APP_API_URL;\n\n    export default {\n        name: \"the-media\",\n        mixins: [tableComponentMixin],\n        components: {\n            vueDropzone,\n            audioPlayer,\n            textToSpeechPopup\n        },\n        data() {\n            return {\n                baseUrl: process.env.BASE_URL, // to resolve iframe equalizer path after build\n\n                isLoadingFiles: false,\n                loadedCount: 0,\n                allLoadingCount: 0,\n                audioLink: '',\n                playerTriggerShow: false,\n                playingIndex: null,\n                currentlyPlaying: true,\n\n                dropzoneOptions: {\n                    url: `${BASE_URL}/storage/media?access_token=${token}`,\n                    thumbnailWidth: 150,\n                    // maxFilesize: 0.5,\n                    acceptedFiles: '.mp3, .wav, .mpeg',\n                    uploadMultiple: true,\n                },\n                fields: [\n                    _checkboxTableField,\n                    {name: 'name', title: this.$t('objects.name')},\n                    {name: 'createdAt', title: this.$t('objects.lookups.media.createdAt')},\n                    {name: 'format', title: this.$t('objects.lookups.media.format')},\n                    {name: 'size', title: this.$t('objects.lookups.media.size')},\n                    _actionsTableField_3,\n                ],\n            };\n        },\n\n        computed: {\n            ...mapState('lookups/media', {\n                dataList: state => state.dataList,\n                page: state => state.page, // acts like a boolean: if page is 0, there's no back page\n                isNextPage: state => state.isNextPage,\n            }),\n\n            size: {\n                get() {\n                    return this.$store.state.lookups.media.size\n                },\n                set(value) {\n                    this.setSize(value)\n                }\n            },\n\n            search: {\n                get() {\n                    return this.$store.state.lookups.media.search\n                },\n                set(value) {\n                    this.setSearch(value)\n                }\n            },\n        },\n\n        methods: {\n            async downloadFile(rowId) {\n                const item = this.dataList[rowId];\n                const id = item.id;\n                const url = `${BASE_URL}/storage/media/${id}/download?access_token=${token}`;\n                download(url, item.name);\n            },\n\n            async downloadAll() {\n                const zip = new jszip();\n                for (const item of this.dataList) {\n                    const id = item.id;\n                    const url = `${BASE_URL}/storage/media/${id}/stream?access_token=${token}`;\n                    await new Promise((resolve, reject) => jszipUtils.getBinaryContent(url, (err, data) => {\n                        if (err) {\n                            reject();\n                        } else {\n                            zip.file(item.name, data);\n                            resolve();\n                        }\n                    }));\n                }\n                const file = await zip.generateAsync({type: 'blob'});\n                saveAs(file, 'z.zip');\n            },\n\n            // dropzone event on loading start\n            // used for computing files number for UI and animation start\n            onFilesAdded(files) {\n                this.isLoadingFiles = true;\n                this.loadedCount = 0;\n                this.allLoadingCount = files.length;\n            },\n\n            // dropzone event firing on ech file loaded successfully\n            // used for updating loaded files number on UI\n            onFileSuccess(file, res) {\n                this.loadedCount++;\n            },\n\n            // dropzone event firing on ech file load\n            // used for updating loaded files number on UI\n            onFileError(file, message) {\n                this.loadedCount++;\n                eventBus.$emit('notificationError', message.message);\n            },\n\n            // dropzone event firing on all files loaded and sended\n            // used for animation end and list update\n            onComplete() {\n                this.isLoadingFiles = false;\n                this.loadList();\n            },\n\n            async play(rowId) {\n                const id = this.dataList[rowId].id;\n                this.playerTriggerShow = true;\n                this.playingIndex = rowId;\n                this.audioLink = `${BASE_URL}/storage/media/${id}/stream?access_token=${token}`;\n            },\n\n            computeDate(date) {\n                return new Date(+date).toLocaleDateString();\n            },\n\n            computeFormat(format) {\n                return format.split('/').pop();\n            },\n\n            ...mapActions('lookups/media', {\n                loadDataList: 'LOAD_DATA_LIST',\n                loadItem: 'GET_ITEM',\n                setSize: 'SET_SIZE',\n                setSearch: 'SET_SEARCH',\n                nextPage: 'NEXT_PAGE',\n                prevPage: 'PREV_PAGE',\n                removeItem: 'REMOVE_ITEM',\n            }),\n\n            computeSize(size, nospace, one) {\n                const sizes = ['Bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB'];\n                let resultSize, f;\n\n                sizes.forEach((f, id) => {\n                    if (one) {\n                        f = f.slice(0, 1);\n                    }\n                    let s = Math.pow(1024, id), fixed;\n                    if (size >= s) {\n                        fixed = String((size / s).toFixed(1));\n                        if (fixed.indexOf('.0') === fixed.length - 2) {\n                            fixed = fixed.slice(0, -2);\n                        }\n                        resultSize = fixed + (nospace ? '' : ' ') + f;\n                    }\n                });\n\n                // zero handling\n                // always prints in Bytes\n                if (!resultSize) {\n                    f = (one ? sizes[0].slice(0, 1) : sizes[0]);\n                    resultSize = '0' + (nospace ? '' : ' ') + f;\n                }\n\n                return resultSize;\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .dz-custom-message i:before {\n        color: $accent-color;\n    }\n\n    .new-file {\n        background: rgba(255, 193, 7, 0.1);\n    }\n</style>"]}]}