{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/integrations/storage/opened-storage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/integrations/storage/opened-storage.vue","mtime":1580907129872},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport openedStorageGeneral from './opened-storage-general';\nimport openedStorageLocal from './opened-storage-local';\nimport openedStorageS3 from './opened-storage-s3';\nimport openedStorageBackblaze from './opened-storage-backblaze';\nimport openedStorageDropbox from './opened-storage-dropbox';\nimport openedStorageDrive from './opened-storage-drive';\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport {required, email} from 'vuelidate/lib/validators';\nimport {mapActions, mapState} from \"vuex\";\n\nexport default {\n    name: \"opened-storage\",\n    mixins: [editComponentMixin],\n    components: {\n        openedStorageGeneral,\n        openedStorageLocal,\n        openedStorageS3,\n        openedStorageBackblaze,\n        openedStorageDropbox,\n        openedStorageDrive,\n    },\n    data() {\n        return {};\n    },\n\n    validations() {\n        switch (this.$route.params.type) {\n            case 'local':\n                return {\n                    itemInstance: {\n                        name: {required},\n                    }\n                };\n            case 's3':\n                return {\n                    itemInstance: {\n                        name: {required},\n                        properties: {\n                            keyId: {required},\n                            accessKey: {required},\n                            bucketName: {required},\n                            region: {required},\n                            endpoint: {required}\n                        },\n                    }\n                };\n            case 'backblaze':\n                return {\n                    itemInstance: {\n                        name: {required},\n                        account: {required},\n                        key: {required},\n                        bucket: {required},\n                        bucketId: {required},\n                    }\n                };\n            case 'dropbox':\n                return {\n                    itemInstance: {\n                        name: {required},\n                        properties: {\n                            token: {required},\n                        },\n                    }\n                };\n            case 'drive':\n                return {\n                    itemInstance: {\n                        name: {required},\n                        properties: {\n                            directory: {required},\n                            privateKey: {required},\n                            email: {required},\n                        },\n                    }\n                };\n        }\n    },\n\n    mounted() {\n        this.id = this.$route.params.id;\n        this.loadItem(this.$route.params.type);\n    },\n\n    computed: {\n        ...mapState('integrations/storage', {\n            itemInstance: state => state.itemInstance,\n        }),\n        id: {\n            get() {\n                return this.$store.state.integrations.storage.itemId\n            },\n            set(value) {\n                this.setId(value)\n            }\n        },\n        tabs() {\n            const tabs = [{text: this.$t('objects.general'), value: 'general'}];\n            switch (this.$route.params.type) {\n                case 'local':\n                    tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'local'});\n                    break;\n                case 's3':\n                    tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 's3'});\n                    break;\n                case 'backblaze':\n                    tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'backblaze'});\n                    break;\n                case 'dropbox':\n                    tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'dropbox'});\n                    break;\n                case 'drive':\n                    tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'drive'});\n                    break;\n            }\n            return tabs;\n        }\n    },\n\n    methods: {\n        ...mapActions('integrations/storage', {\n            setId: 'SET_ITEM_ID',\n            loadItem: 'LOAD_ITEM',\n            addItem: 'ADD_ITEM',\n            updateItem: 'UPDATE_ITEM',\n        }),\n    },\n}\n",{"version":3,"sources":["opened-storage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opened-storage.vue","sourceRoot":"src/components/integrations/storage","sourcesContent":["<template>\n    <div class=\"content-wrap\">\n        <object-header\n                :primaryText=\"computePrimaryText\"\n                :primaryAction=\"save\"\n                :primaryDisabled=\"computeDisabled\"\n                close\n        >\n            {{$t('objects.integrations.storage.storage')}} |\n            {{computeTitle}}\n        </object-header>\n        <tabs-component\n                :tabs=\"tabs\"\n                :root=\"$options.name\"\n        >\n            <template slot=\"component\" slot-scope=\"props\">\n                <component\n                        class=\"tabs-inner-component\"\n                        :is=\"props.currentTab\"\n                        :v=\"$v\"\n                ></component>\n            </template>\n        </tabs-component>\n    </div>\n</template>\n\n<script>\n    import openedStorageGeneral from './opened-storage-general';\n    import openedStorageLocal from './opened-storage-local';\n    import openedStorageS3 from './opened-storage-s3';\n    import openedStorageBackblaze from './opened-storage-backblaze';\n    import openedStorageDropbox from './opened-storage-dropbox';\n    import openedStorageDrive from './opened-storage-drive';\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {required, email} from 'vuelidate/lib/validators';\n    import {mapActions, mapState} from \"vuex\";\n\n    export default {\n        name: \"opened-storage\",\n        mixins: [editComponentMixin],\n        components: {\n            openedStorageGeneral,\n            openedStorageLocal,\n            openedStorageS3,\n            openedStorageBackblaze,\n            openedStorageDropbox,\n            openedStorageDrive,\n        },\n        data() {\n            return {};\n        },\n\n        validations() {\n            switch (this.$route.params.type) {\n                case 'local':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                        }\n                    };\n                case 's3':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                keyId: {required},\n                                accessKey: {required},\n                                bucketName: {required},\n                                region: {required},\n                                endpoint: {required}\n                            },\n                        }\n                    };\n                case 'backblaze':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            account: {required},\n                            key: {required},\n                            bucket: {required},\n                            bucketId: {required},\n                        }\n                    };\n                case 'dropbox':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                token: {required},\n                            },\n                        }\n                    };\n                case 'drive':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                directory: {required},\n                                privateKey: {required},\n                                email: {required},\n                            },\n                        }\n                    };\n            }\n        },\n\n        mounted() {\n            this.id = this.$route.params.id;\n            this.loadItem(this.$route.params.type);\n        },\n\n        computed: {\n            ...mapState('integrations/storage', {\n                itemInstance: state => state.itemInstance,\n            }),\n            id: {\n                get() {\n                    return this.$store.state.integrations.storage.itemId\n                },\n                set(value) {\n                    this.setId(value)\n                }\n            },\n            tabs() {\n                const tabs = [{text: this.$t('objects.general'), value: 'general'}];\n                switch (this.$route.params.type) {\n                    case 'local':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'local'});\n                        break;\n                    case 's3':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 's3'});\n                        break;\n                    case 'backblaze':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'backblaze'});\n                        break;\n                    case 'dropbox':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'dropbox'});\n                        break;\n                    case 'drive':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'drive'});\n                        break;\n                }\n                return tabs;\n            }\n        },\n\n        methods: {\n            ...mapActions('integrations/storage', {\n                setId: 'SET_ITEM_ID',\n                loadItem: 'LOAD_ITEM',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n            }),\n        },\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}