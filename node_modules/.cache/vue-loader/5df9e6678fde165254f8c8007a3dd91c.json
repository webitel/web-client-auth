{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/object-utils/utils/permissions-tab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/object-utils/utils/permissions-tab.vue","mtime":1579686918306},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport checkbox from '@/components/utils/checkbox';\n// import openedTabComponentMixin from '@/mixins/openedTabComponentMixin';\nimport vuetable from 'vuetable-2/src/components/Vuetable';\nimport {getObject, updateObjectPermissions, getObjectPermissions} from \"../../../api/permissions/objects/objects\";\nimport {getRoleList} from \"../../../api/permissions/roles/roles\";\nimport dropdownSelect from '@/components/utils/dropdown-select';\n\nexport default {\n    name: \"permissions-tab\",\n    // mixins: [openedTabComponentMixin],\n    components: {vuetable, checkbox, dropdownSelect},\n    data() {\n        return {\n            // vuetable prop\n            fields: [\n                {name: 'grantee', title: this.$t('objects.name')},\n                {name: 'read', title: this.$t('objects.read')},\n                {name: 'edit', title: this.$t('objects.edit')},\n                {name: 'delete', title: this.$t('objects.delete')},\n            ],\n            dataList: [], // list with all table data, contains user changes\n            initialDataList: [],  // list of initial table data, used for user changes segregation\n\n            changeAccessList: [], // contains id's of grantee`s changed permissions\n            roleList: [] // list of all roles to add new. retrieves from roles GET request\n\n        };\n    },\n    mounted() {\n        // get object permissions\n        this.loadDataList(this.id);\n\n        // get all roles to choose which to add\n        this.loadRoleList();\n    },\n\n    methods: {\n        setNewGrantee(newGrantee, rowIndex) {\n            this.dataList[rowIndex].grantee = newGrantee;\n            this.changeAccessList.push(newGrantee.id);\n        },\n\n        addTableItem() {\n            this.dataList.unshift({\n                grantee: {\n                    role: '',\n                },\n                access: {\n                    c: false,\n                    r: true,\n                    u: false,\n                    d: false,\n                },\n                new: true\n            });\n        },\n\n        toggleDataProperty(newValue, operation, rowId) {\n            // add grantee to changeList, if it have never changed\n            const isGranteeChanged = this.changeAccessList.includes(this.dataList[rowId].grantee.id);\n\n            if (!isGranteeChanged) {\n                this.changeAccessList.push(this.dataList[rowId].grantee.id);\n            }\n\n            // if 'read' checkbox switches to false, make all operations false\n            if (operation === 'r' && this.dataList[rowId].access.r) {\n                Object.keys(this.dataList[rowId].access).map(item => {\n                    this.dataList[rowId].access[item] = false\n                });\n                // else if another operation switches to true with unactive 'read', activate 'read' too\n            } else if (!this.dataList[rowId].access.r) {\n                this.dataList[rowId].access.r = true;\n            }\n\n            // finally, toggle the value\n            this.dataList[rowId].access[operation] = newValue;\n        },\n\n        async save() {\n            // if there are changes, process them\n            // if there aren't, or patch completed successfully, close page\n            if (this.changeAccessList.length !== 0) {\n\n                const granteesToSend = []; // object with changes to patch\n\n                this.filterChanges(granteesToSend);\n\n                // and send the array with changes\n                // catch statement prevents close()\n                try {\n                    await updateObjectPermissions(this.id, granteesToSend);\n                    this.close();\n                } catch (e) {\n                }\n\n            } else {\n                this.close();\n            }\n\n        },\n\n        filterChanges(granteesToSend) {\n            // for each change\n            this.changeAccessList.forEach(changedGranteeId => {\n\n                // find changed grantee (by id)\n                const newGrantee = this.findGrateeById(changedGranteeId);\n\n                // find initial grantee (by id)\n                const oldGrantee = this.findInitialGranteeById(changedGranteeId);\n\n                // collect really changed operations (operation can be changed twice)\n                const changedOperations = this.collectChangedOperations(newGrantee, oldGrantee);\n\n                // if there are any changes -- push them to array\n                if (changedOperations.length > 0) {\n                    granteesToSend.push({\n                        grantee_id: changedGranteeId,\n                        access: changedOperations.join('')\n                    });\n                }\n            });\n        },\n\n        findGrateeById(granteeId) {\n            return this.dataList.find(currentGrantee => {\n                return currentGrantee.grantee.id === granteeId;\n            });\n        },\n\n        findInitialGranteeById(granteeId) {\n            return this.initialDataList.find(oldGrantee => {\n                return oldGrantee.grantee.id === granteeId;\n            });\n        },\n\n        collectChangedOperations(newGrantee, oldGrantee) {\n            const operations = ['c', 'r', 'u', 'd']; // array for operations iterations iteration\n\n            const changedOperations = [];\n\n            // if there's old grantee\n            if (oldGrantee) {\n                operations.forEach(operation => {\n                    if (oldGrantee.access[operation] !== newGrantee.access[operation]) {\n                        changedOperations.push(operation);\n                    }\n                });\n                // if there's new grantee,\n                // and he wasn't changed\n            } else if (newGrantee) {\n                operations.forEach(operation => {\n                    if (newGrantee.access[operation]) {\n                        changedOperations.push(operation);\n                    }\n                });\n            }\n            return changedOperations;\n        },\n\n        // get all roles to choose which to add\n        async loadRoleList() {\n            const response = await getRoleList();\n            this.roleList = [...response];\n        },\n\n        // get object permissions\n        async loadDataList(id = 10055) {\n            const response = await getObjectPermissions(id);\n            this.dataList = [...response];\n            this.initialDataList = JSON.parse(JSON.stringify(response));\n        }\n    },\n\n    computed: {\n        computeAvailableGrantees() {\n            // filter available grantees:\n            return this.roleList.filter(grantee => {\n                return !this.dataList.some(usedGrantee => {\n                    return grantee.id === usedGrantee.grantee.id;\n                });\n            });\n        }\n    }\n}\n",{"version":3,"sources":["permissions-tab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"permissions-tab.vue","sourceRoot":"src/components/object-utils/utils","sourcesContent":["<template>\n    <section class=\"object-content\">\n        <header class=\"content-header\">\n            <h3 class=\"content-title\">{{$t('objects.permissions.object.operations')}}</h3>\n            <i class=\"icon-icon_plus icon-action\" @click=\"addTableItem\"></i>\n        </header>\n\n        <vuetable\n                :api-mode=\"false\"\n                :fields=\"fields\"\n                :data=\"dataList\"\n        >\n\n            <template slot=\"grantee\" slot-scope=\"props\">\n                <!--                    if not new-->\n                <div v-if=\"!dataList[props.rowIndex].new\">\n                    {{dataList[props.rowIndex].grantee.name}}\n                </div>\n\n                <dropdown-select\n                        v-else\n                        class=\"inline-dropdown inline-dropdown__options-left\"\n                        :value=\"dataList[props.rowIndex].grantee\"\n                        :placeholder=\"$tc('objects.permissions.permissionsRole', 1)\"\n                        :options=\"computeAvailableGrantees\"\n                        @input=\"setNewGrantee($event, props.rowIndex)\"\n                ></dropdown-select>\n            </template>\n\n            <template slot=\"read\" slot-scope=\"props\">\n                <checkbox\n                        class=\"test__permissions-checkbox__r\"\n                        :value=\"dataList[props.rowIndex].access.r\"\n                        :label=\"$t('objects.allow')\"\n                        @toggleCheckbox=\"toggleDataProperty($event, 'r', props.rowIndex)\"\n                ></checkbox>\n            </template>\n\n            <template slot=\"edit\" slot-scope=\"props\">\n                <checkbox\n                        class=\"test__permissions-checkbox__u\"\n                        :value=\"dataList[props.rowIndex].access.u\"\n                        :label=\"$t('objects.allow')\"\n                        @toggleCheckbox=\"toggleDataProperty($event, 'u', props.rowIndex)\"\n                ></checkbox>\n            </template>\n\n            <template slot=\"delete\" slot-scope=\"props\">\n                <checkbox\n                        class=\"test__permissions-checkbox__d\"\n                        :value=\"dataList[props.rowIndex].access.d\"\n                        :label=\"$t('objects.allow')\"\n                        @toggleCheckbox=\"toggleDataProperty($event, 'd', props.rowIndex)\"\n                ></checkbox>\n            </template>\n        </vuetable>\n    </section>\n</template>\n\n<script>\n    import checkbox from '@/components/utils/checkbox';\n    // import openedTabComponentMixin from '@/mixins/openedTabComponentMixin';\n    import vuetable from 'vuetable-2/src/components/Vuetable';\n    import {getObject, updateObjectPermissions, getObjectPermissions} from \"../../../api/permissions/objects/objects\";\n    import {getRoleList} from \"../../../api/permissions/roles/roles\";\n    import dropdownSelect from '@/components/utils/dropdown-select';\n\n    export default {\n        name: \"permissions-tab\",\n        // mixins: [openedTabComponentMixin],\n        components: {vuetable, checkbox, dropdownSelect},\n        data() {\n            return {\n                // vuetable prop\n                fields: [\n                    {name: 'grantee', title: this.$t('objects.name')},\n                    {name: 'read', title: this.$t('objects.read')},\n                    {name: 'edit', title: this.$t('objects.edit')},\n                    {name: 'delete', title: this.$t('objects.delete')},\n                ],\n                dataList: [], // list with all table data, contains user changes\n                initialDataList: [],  // list of initial table data, used for user changes segregation\n\n                changeAccessList: [], // contains id's of grantee`s changed permissions\n                roleList: [] // list of all roles to add new. retrieves from roles GET request\n\n            };\n        },\n        mounted() {\n            // get object permissions\n            this.loadDataList(this.id);\n\n            // get all roles to choose which to add\n            this.loadRoleList();\n        },\n\n        methods: {\n            setNewGrantee(newGrantee, rowIndex) {\n                this.dataList[rowIndex].grantee = newGrantee;\n                this.changeAccessList.push(newGrantee.id);\n            },\n\n            addTableItem() {\n                this.dataList.unshift({\n                    grantee: {\n                        role: '',\n                    },\n                    access: {\n                        c: false,\n                        r: true,\n                        u: false,\n                        d: false,\n                    },\n                    new: true\n                });\n            },\n\n            toggleDataProperty(newValue, operation, rowId) {\n                // add grantee to changeList, if it have never changed\n                const isGranteeChanged = this.changeAccessList.includes(this.dataList[rowId].grantee.id);\n\n                if (!isGranteeChanged) {\n                    this.changeAccessList.push(this.dataList[rowId].grantee.id);\n                }\n\n                // if 'read' checkbox switches to false, make all operations false\n                if (operation === 'r' && this.dataList[rowId].access.r) {\n                    Object.keys(this.dataList[rowId].access).map(item => {\n                        this.dataList[rowId].access[item] = false\n                    });\n                    // else if another operation switches to true with unactive 'read', activate 'read' too\n                } else if (!this.dataList[rowId].access.r) {\n                    this.dataList[rowId].access.r = true;\n                }\n\n                // finally, toggle the value\n                this.dataList[rowId].access[operation] = newValue;\n            },\n\n            async save() {\n                // if there are changes, process them\n                // if there aren't, or patch completed successfully, close page\n                if (this.changeAccessList.length !== 0) {\n\n                    const granteesToSend = []; // object with changes to patch\n\n                    this.filterChanges(granteesToSend);\n\n                    // and send the array with changes\n                    // catch statement prevents close()\n                    try {\n                        await updateObjectPermissions(this.id, granteesToSend);\n                        this.close();\n                    } catch (e) {\n                    }\n\n                } else {\n                    this.close();\n                }\n\n            },\n\n            filterChanges(granteesToSend) {\n                // for each change\n                this.changeAccessList.forEach(changedGranteeId => {\n\n                    // find changed grantee (by id)\n                    const newGrantee = this.findGrateeById(changedGranteeId);\n\n                    // find initial grantee (by id)\n                    const oldGrantee = this.findInitialGranteeById(changedGranteeId);\n\n                    // collect really changed operations (operation can be changed twice)\n                    const changedOperations = this.collectChangedOperations(newGrantee, oldGrantee);\n\n                    // if there are any changes -- push them to array\n                    if (changedOperations.length > 0) {\n                        granteesToSend.push({\n                            grantee_id: changedGranteeId,\n                            access: changedOperations.join('')\n                        });\n                    }\n                });\n            },\n\n            findGrateeById(granteeId) {\n                return this.dataList.find(currentGrantee => {\n                    return currentGrantee.grantee.id === granteeId;\n                });\n            },\n\n            findInitialGranteeById(granteeId) {\n                return this.initialDataList.find(oldGrantee => {\n                    return oldGrantee.grantee.id === granteeId;\n                });\n            },\n\n            collectChangedOperations(newGrantee, oldGrantee) {\n                const operations = ['c', 'r', 'u', 'd']; // array for operations iterations iteration\n\n                const changedOperations = [];\n\n                // if there's old grantee\n                if (oldGrantee) {\n                    operations.forEach(operation => {\n                        if (oldGrantee.access[operation] !== newGrantee.access[operation]) {\n                            changedOperations.push(operation);\n                        }\n                    });\n                    // if there's new grantee,\n                    // and he wasn't changed\n                } else if (newGrantee) {\n                    operations.forEach(operation => {\n                        if (newGrantee.access[operation]) {\n                            changedOperations.push(operation);\n                        }\n                    });\n                }\n                return changedOperations;\n            },\n\n            // get all roles to choose which to add\n            async loadRoleList() {\n                const response = await getRoleList();\n                this.roleList = [...response];\n            },\n\n            // get object permissions\n            async loadDataList(id = 10055) {\n                const response = await getObjectPermissions(id);\n                this.dataList = [...response];\n                this.initialDataList = JSON.parse(JSON.stringify(response));\n            }\n        },\n\n        computed: {\n            computeAvailableGrantees() {\n                // filter available grantees:\n                return this.roleList.filter(grantee => {\n                    return !this.dataList.some(usedGrantee => {\n                        return grantee.id === usedGrantee.grantee.id;\n                    });\n                });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    .vs__dropdown-toggle {\n        padding-left: 0 !important;\n    }\n</style>"]}]}