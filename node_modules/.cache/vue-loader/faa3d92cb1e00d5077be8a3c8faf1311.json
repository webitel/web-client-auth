{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/auth/the-register.vue?vue&type=style&index=0&id=3abf9ab4&lang=scss&scoped=true&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/auth/the-register.vue","mtime":1582712760906},{"path":"/home/dev/work/client-auth/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../../assets/css/auth/auth\";\n",{"version":3,"sources":["the-register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA","file":"the-register.vue","sourceRoot":"src/components/auth","sourcesContent":["<template>\n    <form\n            class=\"auth__form\"\n            @submit.prevent=\"submit\"\n    >\n        <form-input\n                v-model.trim=\"username\"\n                :label=\"$t('auth.user')\"\n                :v=\"v.username\"\n        ></form-input>\n\n        <form-input\n                class=\"form__input\"\n                v-model.trim=\"password\"\n                :label=\"$t('auth.password')\"\n                :v=\"v.password\"\n                :type=\"'password'\"\n        ></form-input>\n\n        <form-input\n                v-model.trim=\"confirmPassword\"\n                :label=\"$t('auth.confirmPassword')\"\n                :v=\"$v.confirmPassword\"\n                :type=\"'password'\"\n        ></form-input>\n\n        <form-input\n                v-model.trim=\"certificate\"\n                :label=\"$t('auth.key')\"\n                :v=\"v.certificate\"\n        ></form-input>\n\n        <btn\n                class=\"btn form__button\"\n                type=\"submit\"\n                :disabled=\"computeDisabled\"\n        >\n            {{computeButton}}\n        </btn>\n    </form>\n</template>\n\n<script>\n    import {sameAs} from 'vuelidate/lib/validators';\n    import formInput from '../utils/form-input';\n    import btn from '../utils/btn';\n    import {mapActions} from \"vuex\";\n\n    export default {\n        name: 'the-register',\n        components: {\n            formInput,\n            btn,\n        },\n\n        props: {\n            v: {\n                type: Object,\n            }\n        },\n\n        data() {\n            return {\n                confirmPassword: '12qwaszx',\n            };\n        },\n\n        validations: {\n            confirmPassword: {\n                sameAs: sameAs('password'),\n            },\n        },\n\n        mounted() {\n            this.resetState();\n        },\n\n        computed: {\n            username: {\n                get() {\n                    return this.$store.state.auth.username\n                },\n                set(value) {\n                    this.setProp({prop: 'username', value})\n                }\n            },\n            password: {\n                get() {\n                    return this.$store.state.auth.password\n                },\n                set(value) {\n                    this.setProp({prop: 'password', value})\n                }\n            },\n            certificate: {\n                get() {\n                    return this.$store.state.auth.certificate\n                },\n                set(value) {\n                    this.setProp({prop: 'certificate', value})\n                }\n            },\n\n            computeTitle() {\n                return this.$route.query.reset ? this.$t('auth.registerReset') : this.$t('auth.register');\n            },\n            computeButton() {\n                return this.$route.query.reset ? this.$t('auth.resetSubmit') : this.$t('auth.registerSubmit');\n            },\n            computeDisabled() {\n                return this.checkValidations();\n            }\n        },\n\n        methods: {\n            checkValidations() {\n                this.$v.$touch();\n                this.v.$touch();\n                // if its still pending or an error is returned do not submit\n                return this.$v.$pending || this.$v.$error ||\n                    this.v.$pending || this.v.$error;\n            },\n\n            submit() {\n                const invalid = this.checkValidations();\n                if(!invalid) this.register();\n\n            },\n\n            ...mapActions('auth', {\n                register: 'REGISTER',\n                setProp: 'SET_PROPERTY',\n                resetState: 'RESET_STATE',\n            }),\n        },\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"../../assets/css/auth/auth\";\n</style>\n"]}]}