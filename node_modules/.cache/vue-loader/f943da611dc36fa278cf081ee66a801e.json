{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/utils/audio-player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/utils/audio-player.vue","mtime":1581423279989},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport range from './range';\n\nexport default {\n    name: \"audio-player\",\n    components: {\n        range,\n    },\n    props: {\n        file: {\n            type: String,\n            default: null,\n        },\n        autoPlay: {\n            type: Boolean,\n            default: true\n        },\n        loop: {\n            type: Boolean,\n        },\n    },\n    data: () => ({\n        audio: null,\n        currentSeconds: 0,\n        durationSeconds: 0,\n        loaded: false,\n        playing: false,\n        volume: 50,\n        showVolume: false,\n        isFirstLoad: true,\n        hoverSeconds: 0,\n        showHoverTimer: false,\n    }),\n\n    computed: {\n        percentComplete() {\n            return parseInt(this.currentSeconds / this.durationSeconds * 100);\n        },\n        percentHover() {\n            return parseInt(this.hoverSeconds / this.durationSeconds * 100);\n        },\n        muted() {\n            return this.volume === 0;\n        },\n        convertTimeHHMMSS() {\n            const time = new Date(this.currentSeconds * 1000).toISOString().substr(11, 8);\n            return time.includes('00:0') ? time.substr(3) : time;\n        },\n        convertHoverTimeHHMMSS() {\n            const time = new Date(this.hoverSeconds * 1000).toISOString().substr(11, 8);\n            return time.includes('00:0') ? time.substr(3) : time;\n        },\n    },\n\n    watch: {\n        file(value) {\n            this.playing = true;\n        },\n\n        playing(value) {\n            value ? this.$emit('play') : this.$emit('pause');\n            return value ? this.audio.play() : this.audio.pause();\n        },\n\n        volume(value) {\n            // this.showVolume = false;\n            this.audio.volume = this.volume / 100;\n        },\n    },\n\n    mounted() {\n        this.audio = this.$el.querySelectorAll('audio')[0];\n        this.audio.addEventListener('timeupdate', this.update);\n        this.audio.addEventListener('loadeddata', this.load);\n        this.audio.addEventListener('pause', () => this.playing = false);\n        this.audio.addEventListener('play', () => this.playing = true);\n    },\n\n    beforeDestroy() {\n        this.audio.removeEventListener('timeupdate', this.update);\n        this.audio.removeEventListener('loadeddata', this.load);\n        this.audio.removeEventListener('pause', () => this.playing = false);\n        this.audio.removeEventListener('play', () => this.playing = true);\n    },\n\n    methods: {\n        load() {\n            if (this.audio.readyState >= 2) {\n                this.loaded = true;\n                this.durationSeconds = parseInt(this.audio.duration);\n                this.playing = (this.autoPlay && !this.isFirstLoad);\n                if(this.playing) this.audio.play();\n                this.isFirstLoad = false;\n            } else {\n                throw new Error('Failed to load sound file.');\n            }\n        },\n\n        seek(event) {\n            // if (!this.playing || event.target.tagName === 'SPAN') return;\n\n            this.playing = true;\n            const el = event.target.getBoundingClientRect();\n            const seekPos = (event.clientX - el.left) / el.width;\n            this.audio.currentTime = parseInt(this.audio.duration * seekPos);\n        },\n\n        seekbarLeave(event) {\n            this.showHoverTimer = false;\n            this.hoverSeconds = 0;\n         },\n\n        seekbarOver(event) {\n            this.showHoverTimer = true;\n        },\n\n        seekbarHover(event) {\n            const el = event.target.getBoundingClientRect();\n            const seekPos = (event.clientX - el.left) / el.width;\n            this.hoverSeconds = parseInt(this.audio.duration * seekPos);\n        },\n\n        stop() {\n            this.playing = false;\n            this.audio.currentTime = 0;\n        },\n\n        update(event) {\n            this.currentSeconds = parseInt(this.audio.currentTime);\n        },\n\n        close() {\n            this.stop();\n            this.$emit('close');\n        },\n    }\n}\n",{"version":3,"sources":["audio-player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"audio-player.vue","sourceRoot":"src/components/utils","sourcesContent":["<template>\n    <aside class=\"player\">\n        <div class=\"player-controls\">\n            <div @click.prevent=\"stop\" :title=\"$t('iconHints.stop')\">\n                <i class=\"icon-icon_stop\"></i>\n            </div>\n            <div @click.prevent=\"playing = !playing\">\n                <i\n                        class=\"icon-icon_play\"\n                        v-if=\"!playing\"\n                        :title=\"$t('iconHints.play')\"\n                ></i>\n                <i\n                        class=\"icon-icon_pause\"\n                        v-else\n                        :title=\"$t('iconHints.pause')\"\n                ></i>\n            </div>\n            <div class=\"player-time\">\n                <div class=\"player-time-current\">{{convertTimeHHMMSS}}</div>\n            </div>\n            <div\n                    class=\"player-progress\"\n                    @mouseleave=\"seekbarLeave\"\n                    @mouseover=\"seekbarOver\"\n                    @mousemove=\"seekbarHover\"\n                    @click=\"seek\"\n            >\n\n                <div\n                        class=\"player-seeker\"\n                        :style=\"{width: this.percentComplete+'%'}\"\n                ></div>\n                <div\n                        class=\"player-hover\"\n                        :style=\"{width: this.percentHover+'%'}\"\n                >\n                    <div\n                            class=\"player-timer\"\n                            v-show=\"showHoverTimer\"\n                    >{{convertHoverTimeHHMMSS}}</div>\n                </div>\n            </div>\n            <div class=\"range-wrap\" :class=\"{'hidden': !showVolume}\">\n                <range\n                        v-model=\"volume\"\n                        :min-range=\"0\"\n                ></range>\n            </div>\n            <div @click.prevent=\"showVolume = !showVolume\">\n                <i\n                        v-if=\"muted\"\n                        class=\"volume-icon icon-icon_mute\"\n                        :title=\"$t('iconHints.volume')\"\n                ></i>\n                <i\n                        v-else\n                        class=\"volume-icon icon-icon_volume\"\n                        :title=\"$t('iconHints.volume')\"\n                ></i>\n            </div>\n            <i\n                    class=\"icon-icon_close\"\n                    :title=\"$t('iconHints.close')\"\n                    @click=\"close\"\n            ></i>\n\n        </div>\n        <audio\n                class=\"audio\"\n                ref=\"audiofile\"\n                :src=\"file\"\n                :loop=\"loop\"\n                preload=\"auto\"\n        ></audio>\n    </aside>\n</template>\n\n<script>\n    import range from './range';\n\n    export default {\n        name: \"audio-player\",\n        components: {\n            range,\n        },\n        props: {\n            file: {\n                type: String,\n                default: null,\n            },\n            autoPlay: {\n                type: Boolean,\n                default: true\n            },\n            loop: {\n                type: Boolean,\n            },\n        },\n        data: () => ({\n            audio: null,\n            currentSeconds: 0,\n            durationSeconds: 0,\n            loaded: false,\n            playing: false,\n            volume: 50,\n            showVolume: false,\n            isFirstLoad: true,\n            hoverSeconds: 0,\n            showHoverTimer: false,\n        }),\n\n        computed: {\n            percentComplete() {\n                return parseInt(this.currentSeconds / this.durationSeconds * 100);\n            },\n            percentHover() {\n                return parseInt(this.hoverSeconds / this.durationSeconds * 100);\n            },\n            muted() {\n                return this.volume === 0;\n            },\n            convertTimeHHMMSS() {\n                const time = new Date(this.currentSeconds * 1000).toISOString().substr(11, 8);\n                return time.includes('00:0') ? time.substr(3) : time;\n            },\n            convertHoverTimeHHMMSS() {\n                const time = new Date(this.hoverSeconds * 1000).toISOString().substr(11, 8);\n                return time.includes('00:0') ? time.substr(3) : time;\n            },\n        },\n\n        watch: {\n            file(value) {\n                this.playing = true;\n            },\n\n            playing(value) {\n                value ? this.$emit('play') : this.$emit('pause');\n                return value ? this.audio.play() : this.audio.pause();\n            },\n\n            volume(value) {\n                // this.showVolume = false;\n                this.audio.volume = this.volume / 100;\n            },\n        },\n\n        mounted() {\n            this.audio = this.$el.querySelectorAll('audio')[0];\n            this.audio.addEventListener('timeupdate', this.update);\n            this.audio.addEventListener('loadeddata', this.load);\n            this.audio.addEventListener('pause', () => this.playing = false);\n            this.audio.addEventListener('play', () => this.playing = true);\n        },\n\n        beforeDestroy() {\n            this.audio.removeEventListener('timeupdate', this.update);\n            this.audio.removeEventListener('loadeddata', this.load);\n            this.audio.removeEventListener('pause', () => this.playing = false);\n            this.audio.removeEventListener('play', () => this.playing = true);\n        },\n\n        methods: {\n            load() {\n                if (this.audio.readyState >= 2) {\n                    this.loaded = true;\n                    this.durationSeconds = parseInt(this.audio.duration);\n                    this.playing = (this.autoPlay && !this.isFirstLoad);\n                    if(this.playing) this.audio.play();\n                    this.isFirstLoad = false;\n                } else {\n                    throw new Error('Failed to load sound file.');\n                }\n            },\n\n            seek(event) {\n                // if (!this.playing || event.target.tagName === 'SPAN') return;\n\n                this.playing = true;\n                const el = event.target.getBoundingClientRect();\n                const seekPos = (event.clientX - el.left) / el.width;\n                this.audio.currentTime = parseInt(this.audio.duration * seekPos);\n            },\n\n            seekbarLeave(event) {\n                this.showHoverTimer = false;\n                this.hoverSeconds = 0;\n             },\n\n            seekbarOver(event) {\n                this.showHoverTimer = true;\n            },\n\n            seekbarHover(event) {\n                const el = event.target.getBoundingClientRect();\n                const seekPos = (event.clientX - el.left) / el.width;\n                this.hoverSeconds = parseInt(this.audio.duration * seekPos);\n            },\n\n            stop() {\n                this.playing = false;\n                this.audio.currentTime = 0;\n            },\n\n            update(event) {\n                this.currentSeconds = parseInt(this.audio.currentTime);\n            },\n\n            close() {\n                this.stop();\n                this.$emit('close');\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    $player-bg: rgba(0, 0, 0, 0.6);\n    $player-border-color: darken($player-bg, 12%);\n    $player-link-color: darken($player-bg, 75%);\n    $player-progress-color: $player-border-color;\n    $player-seeker-color: $accent-color;\n    $player-seeker-hover-color: #92939A;\n    //$player-text-color: $player-link-color;\n\n    .player {\n        position: sticky;\n        bottom: 66px;\n        /*width: 100%;*/\n        padding: 7px 16px;\n        margin: 0 20px;\n        background-color: $player-bg;\n        box-shadow: $box-shadow;\n        border-radius: $border-radius;\n        z-index: 10000;\n    }\n\n    .player-controls {\n        display: flex;\n        align-items: center;\n\n        > div {\n            display: flex;\n            align-items: center;\n\n            &:first-child {\n                margin-right: 18px;\n            }\n        }\n\n        i {\n            transition: $transition;\n            cursor: pointer;\n\n            &:before {\n                color: #fff;\n            }\n\n            &:hover {\n                &:before {\n                    color: $accent-color;\n                }\n            }\n        }\n    }\n\n    .player-progress {\n        position: relative;\n        height: 5px;\n        /*height: 3px;*/\n        flex-grow: 1;\n        margin: auto 21px auto 78px;\n        background-color: $player-progress-color;\n        cursor: pointer;\n\n        &:after { // make clickable area bigger\n            content: '';\n            position: absolute;\n            top: -5px;\n            bottom: -5px;\n            left: 0;\n            right: 0;\n        }\n\n        .player-seeker {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            top: 0;\n            background-color: $player-seeker-color;\n            border-radius: $border-radius;\n            pointer-events: none;\n            z-index: 2;\n        }\n\n        .player-hover {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            top: 0;\n            background-color: $player-seeker-hover-color;\n            border-radius: $border-radius;\n            pointer-events: none;\n            z-index: 1;\n        }\n\n        .player-timer {\n            @extend .typo-body-md;\n            position: absolute;\n            right: 0;\n            bottom: 33px;\n            padding: 13px 17px 9px;\n            color: #fff;\n            transform: translateX(50%);\n            background: $player-bg;\n            border-radius: $border-radius;\n        }\n    }\n\n    .player-time {\n        display: flex;\n        justify-content: space-between;\n        width: 40px;\n        margin-left: 33px;\n        color: #fff;\n\n        .player-time-current {\n            @extend .typo-nav-item;\n        }\n    }\n\n\n    .range-wrap {\n        position: absolute;\n        bottom: 56px;\n        right: 0;\n        padding: 8px 16px 11px;\n        background: $player-bg;\n        border-radius: $border-radius;\n    }\n\n    .volume-icon {\n        margin-right: 33px;\n        cursor: pointer;\n    }\n\n    .audio {\n        display: none;\n    }\n</style>"]}]}