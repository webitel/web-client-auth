{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/utils/tags-input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/utils/tags-input.vue","mtime":1579601838845},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport vueTagsInput from '@johmun/vue-tags-input';\nimport debounce from \"../../utils/debounce\";\nexport default {\n    name: \"tags-input\",\n    components: {vueTagsInput},\n    props: {\n        value: {\n            type: Array,\n            required: true,\n        },\n\n        options: {\n          type: Array,\n        },\n\n        autocompleteMinLength: {\n            type: Number,\n            default: 0\n        },\n\n        addOnlyFromAutocomplete: {\n          type: Boolean,\n          default: true,\n        },\n\n        autocompleteFilterDuplicates: {\n            type: Boolean,\n            default: true,\n        },\n\n        label: {\n            type: String,\n        },\n\n        placeholder: {\n            type: String\n        },\n\n        hideLabel: {\n            type: Boolean,\n            default: false\n        },\n\n        hideDetails: {\n            type: Boolean,\n            default: false\n        },\n    },\n\n    data() {\n        return {\n            tagDraft: '',\n        }\n    },\n\n    created() {\n        this.debouncer = debounce(this.debouncer);\n    },\n\n    computed: {\n        computeTags() {\n            return this.value.map(item => {\n                item.text = item.name;\n                return item;\n            });\n        },\n\n        computeOptions() {\n            return this.options.map(item => {\n                item.text = item.name;\n                return item;\n            });\n        }\n    },\n\n    methods: {\n        debouncer() {\n            this.$emit('search', this.tagDraft);\n        },\n\n        changeTags(tags) {\n            const res = tags.map(i => {\n                return {\n                    name: i.name || i.text,\n                    id: i.id\n                }\n            });\n            this.$emit('input', res);\n        }\n    }\n}\n",{"version":3,"sources":["tags-input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tags-input.vue","sourceRoot":"src/components/utils","sourcesContent":["<template>\n    <div class=\"tags-input tags-input-wrap\" :class=\"{'mb-0': hideDetails}\">\n        <div v-if=\"!hideLabel\" class=\"label tags-input__label\">\n            {{label}}\n        </div>\n\n        <vue-tags-input\n                v-model=\"tagDraft\"\n                :tags=\"computeTags\"\n                :autocomplete-items=\"computeOptions\"\n                :autocomplete-min-length=\"autocompleteMinLength\"\n                :placeholder=\"placeholder || label\"\n                @input=\"debouncer.call(this)\"\n                @tags-changed=\"newTags => changeTags(newTags)\"\n                :add-only-from-autocomplete=\"addOnlyFromAutocomplete\"\n                :autocomplete-filter-duplicates=\"autocompleteFilterDuplicates\"\n        >\n        </vue-tags-input>\n    </div>\n</template>\n\n<script>\n    import vueTagsInput from '@johmun/vue-tags-input';\n    import debounce from \"../../utils/debounce\";\n    export default {\n        name: \"tags-input\",\n        components: {vueTagsInput},\n        props: {\n            value: {\n                type: Array,\n                required: true,\n            },\n\n            options: {\n              type: Array,\n            },\n\n            autocompleteMinLength: {\n                type: Number,\n                default: 0\n            },\n\n            addOnlyFromAutocomplete: {\n              type: Boolean,\n              default: true,\n            },\n\n            autocompleteFilterDuplicates: {\n                type: Boolean,\n                default: true,\n            },\n\n            label: {\n                type: String,\n            },\n\n            placeholder: {\n                type: String\n            },\n\n            hideLabel: {\n                type: Boolean,\n                default: false\n            },\n\n            hideDetails: {\n                type: Boolean,\n                default: false\n            },\n        },\n\n        data() {\n            return {\n                tagDraft: '',\n            }\n        },\n\n        created() {\n            this.debouncer = debounce(this.debouncer);\n        },\n\n        computed: {\n            computeTags() {\n                return this.value.map(item => {\n                    item.text = item.name;\n                    return item;\n                });\n            },\n\n            computeOptions() {\n                return this.options.map(item => {\n                    item.text = item.name;\n                    return item;\n                });\n            }\n        },\n\n        methods: {\n            debouncer() {\n                this.$emit('search', this.tagDraft);\n            },\n\n            changeTags(tags) {\n                const res = tags.map(i => {\n                    return {\n                        name: i.name || i.text,\n                        id: i.id\n                    }\n                });\n                this.$emit('input', res);\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>"]}]}