{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/utils/timepicker.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/utils/timepicker.vue","mtime":1578657456758},{"path":"/home/dev/work/client-auth/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.timepicker {\n    @extend .typo-input-label;\n    overflow: visible !important;\n}\n\n.timepicker__form {\n    display: flex;\n    align-items: center;\n\n    .delimiter {\n        margin: 0 7px;\n    }\n\n    .dropdown-select {\n        min-width: 90px;\n        width: 90px;\n\n        .label, .input__details {\n            display: none;\n        }\n\n        .vs--open .vs__selected {\n            display: none;\n        }\n    }\n\n    .vs__dropdown-menu {\n        min-width: 75px;\n    }\n}\n",{"version":3,"sources":["timepicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"timepicker.vue","sourceRoot":"src/components/utils","sourcesContent":["<template>\n    <div class=\"timepicker\">\n        <div class=\"label\"\n             v-if=\"label\"\n             :class=\"{'invalid': v && v.$error}\n        \">\n            {{computeRequiredLabel}}\n        </div>\n        <form class=\"timepicker__form\">\n            <dropdown-select\n                    v-if=\"timeVisibility.hour\"\n                    :value=\"computeHours\"\n                    :options=\"hourOptions || initHourList\"\n                    taggable\n                    @input=\"setHours\"\n            ></dropdown-select>\n            <span\n                    class=\"delimiter\"\n                    v-if=\"timeVisibility.hour\"\n            >:</span>\n            <dropdown-select\n                    v-if=\"timeVisibility.min\"\n                    :value=\"computeMins\"\n                    :options=\"minOptions\"\n                    taggable\n                    @input=\"setMins\"\n            ></dropdown-select>\n            <span\n                    class=\"delimiter\"\n                    v-if=\"timeVisibility.min && timeVisibility.sec\"\n            >:</span>\n            <dropdown-select\n                    v-if=\"timeVisibility.sec\"\n                    :value=\"computeSecs\"\n                    :options=\"secOptions\"\n                    taggable\n                    @input=\"setSecs\"\n            ></dropdown-select>\n        </form>\n        <validation-message\n                v-if=\"v\"\n                :v=\"v\"\n        />\n    </div>\n</template>\n\n<script>\n    import requiredLabelMixin from '@/mixins/requiredLabelMixin';\n    import dropdownSelect from './dropdown-select';\n    import validationMessage from './validation-message';\n\n    export default {\n        name: \"timepicker\",\n        mixins: [requiredLabelMixin],\n        components: {\n            dropdownSelect,\n            validationMessage\n        },\n\n        props: {\n            format: {\n                type: String,\n                default: 'hh:mm:ss'\n            },\n            label: {\n                type: String,\n            },\n            value: {\n                type: [Number, Object],\n                required: true\n            },\n            hourOptions: {\n                type: Array,\n            },\n            minOptions: {\n                type: Array,\n                default: () => ['00', '15', '30', '45']\n            },\n            secOptions: {\n                type: Array,\n                default: () => ['00', '15', '30', '45']\n            },\n            required: {\n                type: Boolean,\n                default: false\n            },\n            v: {\n                type: Object,\n            },\n        },\n\n        data() {\n            return {\n                time: {\n                    hour: 0,\n                    min: 0,\n                    sec: 0,\n                },\n                timeVisibility: {\n                    hour: false,\n                    min: false,\n                    sec: false,\n                }\n            }\n        },\n\n        watch: {\n            value: function () {\n                this.updateComponentTime();\n            }\n        },\n\n        mounted() {\n            this.setVisibleFormat();\n            this.updateComponentTime();\n        },\n\n        computed: {\n            computeHours() {\n                return this.addZero(this.time.hour);\n            },\n\n            computeMins() {\n                return this.addZero(this.time.min);\n            },\n\n            computeSecs() {\n                return this.addZero(this.time.sec);\n            },\n\n            initHourList() {\n                const hourList = [];\n                for (let i = 0; i < 24; i++) {\n                    hourList.push(this.addZero(i));\n                }\n                return hourList;\n            },\n        },\n\n        methods: {\n            updateComponentTime() {\n                let value = this.value;\n                if (!this.timeVisibility.sec) value = value * 60;\n                if (!this.timeVisibility.min) value = value * 60;\n                this.time.sec = value % 60;\n                this.time.min = Math.floor(value / 60 % 60);\n                this.time.hour = Math.floor(value / 3600);\n            },\n\n            setTime() {\n                let value = this.time.hour*3600 + this.time.min*60 + this.time.sec;\n                if (!this.format.includes('s')) value = value / 60;\n                if (!this.format.includes('m')) value = value / 60;\n                this.$emit('input', value);\n            },\n\n            setHours(value) {\n                this.time.hour = +value;\n                this.setTime();\n            },\n\n            setMins(value) {\n                this.time.min = +value;\n                this.setTime();\n            },\n\n            setSecs(value) {\n                this.time.sec = +value;\n                this.setTime();\n            },\n\n            setVisibleFormat() {\n                if (this.format.includes('h')) {\n                    this.timeVisibility.hour = true;\n                }\n                if (this.format.includes('m')) {\n                    this.timeVisibility.min = true;\n                }\n                if (this.format.includes('s')) {\n                    this.timeVisibility.sec = true;\n                }\n            },\n\n            addZero(value) {\n                return (value - 0 < 10) ? '0' + value : value + '';\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .timepicker {\n        @extend .typo-input-label;\n        overflow: visible !important;\n    }\n\n    .timepicker__form {\n        display: flex;\n        align-items: center;\n\n        .delimiter {\n            margin: 0 7px;\n        }\n\n        .dropdown-select {\n            min-width: 90px;\n            width: 90px;\n\n            .label, .input__details {\n                display: none;\n            }\n\n            .vs--open .vs__selected {\n                display: none;\n            }\n        }\n\n        .vs__dropdown-menu {\n            min-width: 75px;\n        }\n    }\n</style>"]}]}