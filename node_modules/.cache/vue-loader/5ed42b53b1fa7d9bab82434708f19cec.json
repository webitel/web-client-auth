{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/routing/flow/upload-flow-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/routing/flow/upload-flow-popup.vue","mtime":1579620192370},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport checkbox from '../../utils/checkbox';\nimport formInput from '../../utils/form-input';\nimport divider from '../../utils/divider';\nimport popup from '../../utils/popup';\nimport required from \"vuelidate/src/validators/required\";\nimport {addFlow, updateFlow} from \"../../../api/routing/flow/flow\";\n\nexport default {\n    name: \"upload-flow-popup\",\n    components: {\n        formInput,\n        checkbox,\n        divider,\n        popup\n    },\n    props: {\n        file: {\n            required: true,\n        }\n    },\n    data() {\n        return {\n            create: true,\n            flow: {name: 'file.name'},\n        }\n    },\n\n    validations: {\n        flow: {\n            name: {\n                required\n            }\n        }\n    },\n\n    mounted() {\n        this.processJSON();\n    },\n\n    computed: {\n        computeDisabledSave() {\n            this.$v.$touch();\n            // if its still pending or an error is returned do not submit\n            return this.$v.$pending ||\n                this.$v.$error;\n        }\n    },\n\n    methods: {\n        async save() {\n            if (this.create) {\n                try {\n                    delete this.flow.id;\n                    await addFlow(this.flow);\n                    this.$emit('close');\n                } catch {\n                }\n            } else {\n                try {\n                    await updateFlow(this.flow.id, this.flow);\n                    this.$emit('close');\n                } catch {\n                }\n            }\n        },\n\n        processJSON() {\n            const reader = new FileReader();\n            reader.addEventListener('load', (e) => {\n                    const file = e.target.result;\n                    if (file) this.flow = JSON.parse(file);\n                }\n            );\n            reader.readAsText(this.file);\n        },\n\n        async addItem(item) {\n        }\n    }\n}\n",{"version":3,"sources":["upload-flow-popup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"upload-flow-popup.vue","sourceRoot":"src/components/routing/flow","sourcesContent":["<template>\n    <popup\n            class=\"upload-popup\"\n            :title=\"$t('objects.importJSON')\"\n            :primaryAction=\"save\"\n            :primaryDisabled=\"computeDisabledSave\"\n            @close=\"$emit('close')\"\n    >\n        <section class=\"popup-content\">\n            <checkbox\n                    v-model=\"create\"\n                    :label=\"$t('objects.routing.flow.createNew')\"\n            ></checkbox>\n            <form>\n                <form-input\n                        v-model=\"flow.name\"\n                        :v=\"$v.flow.name\"\n                        :label=\"$t('objects.name')\"\n                        required\n                ></form-input>\n            </form>\n        </section>\n    </popup>\n</template>\n\n<script>\n    import checkbox from '../../utils/checkbox';\n    import formInput from '../../utils/form-input';\n    import divider from '../../utils/divider';\n    import popup from '../../utils/popup';\n    import required from \"vuelidate/src/validators/required\";\n    import {addFlow, updateFlow} from \"../../../api/routing/flow/flow\";\n\n    export default {\n        name: \"upload-flow-popup\",\n        components: {\n            formInput,\n            checkbox,\n            divider,\n            popup\n        },\n        props: {\n            file: {\n                required: true,\n            }\n        },\n        data() {\n            return {\n                create: true,\n                flow: {name: 'file.name'},\n            }\n        },\n\n        validations: {\n            flow: {\n                name: {\n                    required\n                }\n            }\n        },\n\n        mounted() {\n            this.processJSON();\n        },\n\n        computed: {\n            computeDisabledSave() {\n                this.$v.$touch();\n                // if its still pending or an error is returned do not submit\n                return this.$v.$pending ||\n                    this.$v.$error;\n            }\n        },\n\n        methods: {\n            async save() {\n                if (this.create) {\n                    try {\n                        delete this.flow.id;\n                        await addFlow(this.flow);\n                        this.$emit('close');\n                    } catch {\n                    }\n                } else {\n                    try {\n                        await updateFlow(this.flow.id, this.flow);\n                        this.$emit('close');\n                    } catch {\n                    }\n                }\n            },\n\n            processJSON() {\n                const reader = new FileReader();\n                reader.addEventListener('load', (e) => {\n                        const file = e.target.result;\n                        if (file) this.flow = JSON.parse(file);\n                    }\n                );\n                reader.readAsText(this.file);\n            },\n\n            async addItem(item) {\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"../../../assets/css/objects/upload-popup\";\n\n    .popup-content {\n        margin: 38px 0 18px;\n    }\n</style>"]}]}