{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/node_modules/vuetable-2/src/components/VuetableFieldCheckboxMixin.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/node_modules/vuetable-2/src/components/VuetableFieldCheckboxMixin.vue","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport VuetableFieldMixin from './VuetableFieldMixin.vue'\r\n\r\nexport default {\r\n  mixins: [VuetableFieldMixin],\r\n\r\n  methods: {\r\n    toggleCheckbox(dataItem, event) {\r\n      this.vuetable.onCheckboxToggled(event.target.checked, this.rowField.name, dataItem)\r\n    },\r\n\r\n    toggleAllCheckbox(event) {\r\n      this.vuetable.onCheckboxToggledAll(event.target.checked)\r\n    },\r\n\r\n    isSelected(rowData) {\r\n      return this.vuetable.isSelectedRow(rowData[this.vuetable.trackBy])\r\n    },\r\n\r\n    isAllItemsInCurrentPageSelected() {\r\n      if (! this.vuetable.tableData) return \r\n\r\n      let idColumn = this.vuetable.trackBy\r\n      let checkbox = this.$el.querySelector('input[type=checkbox]')\r\n      let selected = this.vuetable.tableData.filter( (item) => this.vuetable.isSelectedRow(item[idColumn]) )\r\n\r\n      // count == 0, clear the checkbox\r\n      if (selected.length <= 0) {\r\n        checkbox.indeterminate = false\r\n        return false\r\n      }\r\n      // count > 0 and count < perPage, set checkbox state to 'indeterminate'\r\n      else if (selected.length < this.vuetable.perPage) {\r\n        checkbox.indeterminate = true\r\n        return true\r\n      }\r\n      // count == perPage, set checkbox state to 'checked'\r\n      else {\r\n        checkbox.indeterminate = false\r\n        return true\r\n      }            \r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["VuetableFieldCheckboxMixin.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VuetableFieldCheckboxMixin.vue","sourceRoot":"node_modules/vuetable-2/src/components","sourcesContent":["<script>\r\nimport VuetableFieldMixin from './VuetableFieldMixin.vue'\r\n\r\nexport default {\r\n  mixins: [VuetableFieldMixin],\r\n\r\n  methods: {\r\n    toggleCheckbox(dataItem, event) {\r\n      this.vuetable.onCheckboxToggled(event.target.checked, this.rowField.name, dataItem)\r\n    },\r\n\r\n    toggleAllCheckbox(event) {\r\n      this.vuetable.onCheckboxToggledAll(event.target.checked)\r\n    },\r\n\r\n    isSelected(rowData) {\r\n      return this.vuetable.isSelectedRow(rowData[this.vuetable.trackBy])\r\n    },\r\n\r\n    isAllItemsInCurrentPageSelected() {\r\n      if (! this.vuetable.tableData) return \r\n\r\n      let idColumn = this.vuetable.trackBy\r\n      let checkbox = this.$el.querySelector('input[type=checkbox]')\r\n      let selected = this.vuetable.tableData.filter( (item) => this.vuetable.isSelectedRow(item[idColumn]) )\r\n\r\n      // count == 0, clear the checkbox\r\n      if (selected.length <= 0) {\r\n        checkbox.indeterminate = false\r\n        return false\r\n      }\r\n      // count > 0 and count < perPage, set checkbox state to 'indeterminate'\r\n      else if (selected.length < this.vuetable.perPage) {\r\n        checkbox.indeterminate = true\r\n        return true\r\n      }\r\n      // count == perPage, set checkbox state to 'checked'\r\n      else {\r\n        checkbox.indeterminate = false\r\n        return true\r\n      }            \r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}