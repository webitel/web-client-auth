{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/integrations/storage/opened-storage-s3.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/integrations/storage/opened-storage-s3.vue","mtime":1580975580542},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport openedTabComponentMixin from '@/mixins/openedTabComponentMixin';\nimport {mapActions, mapState} from \"vuex\";\nimport DropdownSelect from \"../../utils/dropdown-select\";\nimport {AWSRegions, DigitalOceanRegions} from \"../../../api/integrations/storage/storage\";\n\nexport default {\n    name: \"opened-storage-aws\",\n    components: {DropdownSelect},\n    mixins: [openedTabComponentMixin],\n    data() {\n        return {\n            service: {},\n            serviceOptions: [\n                {name: 'AWS S3 Bucket', value: 'aws'},\n                {name: 'Digital Ocean Spaces', value: 'do'},\n                {name: 'Custom', value: 'custom'}],\n            AWSRegions,\n            DigitalOceanRegions,\n        }\n    },\n\n    mounted() {\n        if(!this.id) this.setService({name: 'AWS S3 Bucket', value: 'aws'});\n    },\n\n    computed: {\n        ...mapState('integrations/storage', {\n            id: state => state.itemId,\n        }),\n\n        keyId: {\n            get() {\n                return this.$store.state.integrations.storage.itemInstance.properties.keyId\n            },\n            set(value) {\n                this.setItemProp({prop: 'keyId', value})\n            }\n        },\n        accessKey: {\n            get() {\n                return this.$store.state.integrations.storage.itemInstance.properties.accessKey\n            },\n            set(value) {\n                this.setItemProp({prop: 'accessKey', value})\n            }\n        },\n        bucketName: {\n            get() {\n                return this.$store.state.integrations.storage.itemInstance.properties.bucketName\n            },\n            set(value) {\n                this.setItemProp({prop: 'bucketName', value})\n            }\n        },\n        endpoint: {\n            get() {\n                return this.$store.state.integrations.storage.itemInstance.properties.endpoint\n            },\n            set(value) {\n                this.setItemProp({prop: 'endpoint', value})\n            }\n        },\n        region: {\n            get() {\n                return this.$store.state.integrations.storage.itemInstance.properties.region\n            },\n            set(value) {\n                this.setItemProp({prop: 'region', value})\n            }\n        },\n\n        computeRegionOptions() {\n            if (this.endpoint.includes('aws')) {\n                return this.AWSRegions;\n            } else if (this.endpoint.includes('digitalocean')) {\n                return this.DigitalOceanRegions;\n            }\n            return []\n        }\n    },\n\n    methods: {\n        ...mapActions('integrations/storage', {\n            setItemProp: 'SET_ITEM_PROPERTIES_PROPERTY',\n        }),\n\n        setService(value) {\n            this.service = value;\n            if (this.service.value === 'aws') {\n                this.endpoint = 'amazonaws.com';\n                this.region = {};\n            } else if (this.service.value === 'do') {\n                this.endpoint = 'digitaloceanspaces.com';\n                this.region = {};\n            } else {\n                this.endpoint = '';\n                this.region = '';\n            }\n        }\n    },\n}\n",{"version":3,"sources":["opened-storage-s3.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opened-storage-s3.vue","sourceRoot":"src/components/integrations/storage","sourcesContent":["<template>\n    <section>\n        <header class=\"content-header\">\n            <h3 class=\"content-title\">{{$t('objects.integrations.storage.s3')}}</h3>\n        </header>\n        <form class=\"object-input-grid\">\n            <form-input\n                    v-model=\"keyId\"\n                    :v=\"v.itemInstance.properties.keyId\"\n                    :label=\"$t('objects.integrations.storage.s3Key')\"\n                    required\n            ></form-input>\n            <form-input\n                    v-model=\"accessKey\"\n                    :v=\"v.itemInstance.properties.accessKey\"\n                    :label=\"$t('objects.integrations.storage.s3Access')\"\n                    required\n            ></form-input>\n            <form-input\n                    v-model=\"bucketName\"\n                    :v=\"v.itemInstance.properties.bucketName\"\n                    :label=\"$t('objects.integrations.storage.bucket')\"\n                    required\n            ></form-input>\n            <dropdown-select\n                    v-if=\"!this.id\"\n                    :value=\"service\"\n                    :options=\"serviceOptions\"\n                    :label=\"$t('objects.integrations.storage.service')\"\n                    @input=\"setService\"\n            ></dropdown-select>\n            <dropdown-select\n                    v-show=\"service.value !== 'custom'\"\n                    v-model=\"region\"\n                    :v=\"v.itemInstance.properties.region\"\n                    :options=\"computeRegionOptions\"\n                    :label=\"$t('objects.integrations.storage.region')\"\n                    required\n            ></dropdown-select>\n            <form-input\n                    v-show=\"service.value === 'custom'\"\n                    v-model=\"endpoint\"\n                    :v=\"v.itemInstance.properties.endpoint\"\n                    :label=\"$t('objects.integrations.storage.s3Endpoint')\"\n                    required\n            ></form-input>\n            <form-input\n                    v-show=\"service.value === 'custom'\"\n                    v-model=\"region\"\n                    :v=\"v.itemInstance.properties.region\"\n                    :label=\"$t('objects.integrations.storage.region')\"\n                    required\n            ></form-input>\n        </form>\n    </section>\n</template>\n\n<script>\n    import openedTabComponentMixin from '@/mixins/openedTabComponentMixin';\n    import {mapActions, mapState} from \"vuex\";\n    import DropdownSelect from \"../../utils/dropdown-select\";\n    import {AWSRegions, DigitalOceanRegions} from \"../../../api/integrations/storage/storage\";\n\n    export default {\n        name: \"opened-storage-aws\",\n        components: {DropdownSelect},\n        mixins: [openedTabComponentMixin],\n        data() {\n            return {\n                service: {},\n                serviceOptions: [\n                    {name: 'AWS S3 Bucket', value: 'aws'},\n                    {name: 'Digital Ocean Spaces', value: 'do'},\n                    {name: 'Custom', value: 'custom'}],\n                AWSRegions,\n                DigitalOceanRegions,\n            }\n        },\n\n        mounted() {\n            if(!this.id) this.setService({name: 'AWS S3 Bucket', value: 'aws'});\n        },\n\n        computed: {\n            ...mapState('integrations/storage', {\n                id: state => state.itemId,\n            }),\n\n            keyId: {\n                get() {\n                    return this.$store.state.integrations.storage.itemInstance.properties.keyId\n                },\n                set(value) {\n                    this.setItemProp({prop: 'keyId', value})\n                }\n            },\n            accessKey: {\n                get() {\n                    return this.$store.state.integrations.storage.itemInstance.properties.accessKey\n                },\n                set(value) {\n                    this.setItemProp({prop: 'accessKey', value})\n                }\n            },\n            bucketName: {\n                get() {\n                    return this.$store.state.integrations.storage.itemInstance.properties.bucketName\n                },\n                set(value) {\n                    this.setItemProp({prop: 'bucketName', value})\n                }\n            },\n            endpoint: {\n                get() {\n                    return this.$store.state.integrations.storage.itemInstance.properties.endpoint\n                },\n                set(value) {\n                    this.setItemProp({prop: 'endpoint', value})\n                }\n            },\n            region: {\n                get() {\n                    return this.$store.state.integrations.storage.itemInstance.properties.region\n                },\n                set(value) {\n                    this.setItemProp({prop: 'region', value})\n                }\n            },\n\n            computeRegionOptions() {\n                if (this.endpoint.includes('aws')) {\n                    return this.AWSRegions;\n                } else if (this.endpoint.includes('digitalocean')) {\n                    return this.DigitalOceanRegions;\n                }\n                return []\n            }\n        },\n\n        methods: {\n            ...mapActions('integrations/storage', {\n                setItemProp: 'SET_ITEM_PROPERTIES_PROPERTY',\n            }),\n\n            setService(value) {\n                this.service = value;\n                if (this.service.value === 'aws') {\n                    this.endpoint = 'amazonaws.com';\n                    this.region = {};\n                } else if (this.service.value === 'do') {\n                    this.endpoint = 'digitaloceanspaces.com';\n                    this.region = {};\n                } else {\n                    this.endpoint = '';\n                    this.region = '';\n                }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>"]}]}