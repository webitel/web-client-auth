{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/contact-center/members/opened-queue-member-communication-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/contact-center/members/opened-queue-member-communication-popup.vue","mtime":1581326785283},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport popup from '@/components/utils/popup';\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport {required, numeric, minValue, maxValue} from 'vuelidate/lib/validators';\nimport {mapActions, mapState} from \"vuex\";\nimport {getResourceList} from \"../../../api/contact-center/resources/resources\";\nimport {getCommunicationsList} from \"../../../api/lookups/communications/communications\";\n\nexport default {\n    name: \"opened-agent-skills-popup\",\n    mixins: [editComponentMixin],\n    components: {\n        popup,\n    },\n    data() {\n        return {\n            dropdownOptionsTypeList: [],\n            dropdownOptionsResList: [],\n        }\n    },\n\n    validations: {\n        itemInstance: {\n            destination: {\n                required\n            },\n            type: {\n                required\n            },\n        }\n    },\n\n    mounted() {\n        this.loadItem();\n        this.loadDropdownOptionsTypeList();\n        this.loadDropdownOptionsResList();\n    },\n\n    computed: {\n        ...mapState('ccenter/queues/members/communications', {\n            id: state => state.itemId,\n            itemInstance: state => state.itemInstance\n        }),\n        destination: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.destination\n            },\n            set(value) {\n                this.setItemProp({prop: 'destination', value})\n            }\n        },\n        display: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.display\n            },\n            set(value) {\n                this.setItemProp({prop: 'display', value})\n            }\n        },\n        priority: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.priority\n            },\n            set(value) {\n                this.setItemProp({prop: 'priority', value})\n            }\n        },\n        type: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.type\n            },\n            set(value) {\n                this.setItemProp({prop: 'type', value})\n            }\n        },\n        resource: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.resource\n            },\n            set(value) {\n                this.setItemProp({prop: 'resource', value})\n            }\n        },\n        description: {\n            get() {\n                return this.$store.state.ccenter.queues.members.communications.itemInstance.description\n            },\n            set(value) {\n                this.setItemProp({prop: 'description', value})\n            }\n        },\n\n            computePrimaryText() {\n                // if it's a new item\n                // OR any fields have changed\n                return !(typeof this.id === 'number') || this.itemInstance._dirty ?\n                    this.$t('objects.save') : this.$t('objects.saved');\n            },\n\n            computeDisabled() {\n                // if there's a validation problem\n                // OR it's edit and any fields haven't changed\n                return this.checkValidations() ||\n                    (!this.itemInstance._dirty && (typeof this.id === 'number'));\n            },\n    },\n\n    methods: {\n        async save() {\n            const invalid = this.checkValidations();\n            // console.log(!invalid, !(typeof this.id === 'number'));\n            if (!invalid) {\n                try {\n                    !(typeof this.id === 'number') ? await this.addItem() : await this.updateItem();\n                    this.$emit('close');\n                } catch {\n                }\n            }\n        },\n\n        async loadDropdownOptionsTypeList(search) {\n            const response = await getCommunicationsList(0, 10, search);\n            this.dropdownOptionsTypeList = response.map(item => {\n                return {\n                    name: item.name,\n                    id: item.id,\n                }\n            });\n        },\n\n        async loadDropdownOptionsResList(search) {\n            const response = await getResourceList(0, 10, search);\n            this.dropdownOptionsResList = response.map(item => {\n                return {\n                    name: item.name,\n                    id: item.id,\n                }\n            });\n        },\n\n        ...mapActions('ccenter/queues/members/communications', {\n            setItemProp: 'SET_ITEM_PROPERTY',\n            addItem: 'ADD_ITEM',\n            updateItem: 'UPDATE_ITEM',\n            loadItem: 'LOAD_ITEM',\n        }),\n    }\n}\n",{"version":3,"sources":["opened-queue-member-communication-popup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"opened-queue-member-communication-popup.vue","sourceRoot":"src/components/contact-center/members","sourcesContent":["<template>\n    <popup\n            :title=\"$t('objects.lookups.communications.addCommunication')\"\n            :primaryAction=\"save\"\n            :primaryText=\"computePrimaryText\"\n            :primaryDisabled=\"computeDisabled\"\n            @close=\"$emit('close')\"\n            overflow\n    >\n        <form class=\"object-input-grid\">\n            <form-input\n                    v-model=\"destination\"\n                    :v=\"$v.itemInstance.destination\"\n                    :label=\"$t('objects.ccenter.members.destination')\"\n                    required\n            ></form-input>\n\n            <form-input\n                    v-model=\"display\"\n                    :label=\"$t('objects.ccenter.members.display')\"\n            ></form-input>\n\n            <form-input\n                    v-model=\"priority\"\n                    :label=\"$t('objects.ccenter.members.priority')\"\n            ></form-input>\n\n            <dropdown-select\n                    v-model.trim=\"type\"\n                    :v=\"$v.itemInstance.type\"\n                    :options=\"dropdownOptionsTypeList\"\n                    :label=\"$tc('objects.lookups.communications.communications', 1)\"\n                    @search=\"loadDropdownOptionsTypeList\"\n                    required\n            ></dropdown-select>\n\n            <dropdown-select\n                    v-model.trim=\"resource\"\n                    :options=\"dropdownOptionsResList\"\n                    :label=\"$tc('objects.ccenter.res.res', 1)\"\n                    @search=\"loadDropdownOptionsResList\"\n            ></dropdown-select>\n\n            <form-input\n                    v-model=\"description\"\n                    :label=\"$t('objects.description')\"\n                    textarea\n            ></form-input>\n        </form>\n    </popup>\n</template>\n\n<script>\n    import popup from '@/components/utils/popup';\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {required, numeric, minValue, maxValue} from 'vuelidate/lib/validators';\n    import {mapActions, mapState} from \"vuex\";\n    import {getResourceList} from \"../../../api/contact-center/resources/resources\";\n    import {getCommunicationsList} from \"../../../api/lookups/communications/communications\";\n\n    export default {\n        name: \"opened-agent-skills-popup\",\n        mixins: [editComponentMixin],\n        components: {\n            popup,\n        },\n        data() {\n            return {\n                dropdownOptionsTypeList: [],\n                dropdownOptionsResList: [],\n            }\n        },\n\n        validations: {\n            itemInstance: {\n                destination: {\n                    required\n                },\n                type: {\n                    required\n                },\n            }\n        },\n\n        mounted() {\n            this.loadItem();\n            this.loadDropdownOptionsTypeList();\n            this.loadDropdownOptionsResList();\n        },\n\n        computed: {\n            ...mapState('ccenter/queues/members/communications', {\n                id: state => state.itemId,\n                itemInstance: state => state.itemInstance\n            }),\n            destination: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.destination\n                },\n                set(value) {\n                    this.setItemProp({prop: 'destination', value})\n                }\n            },\n            display: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.display\n                },\n                set(value) {\n                    this.setItemProp({prop: 'display', value})\n                }\n            },\n            priority: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.priority\n                },\n                set(value) {\n                    this.setItemProp({prop: 'priority', value})\n                }\n            },\n            type: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.type\n                },\n                set(value) {\n                    this.setItemProp({prop: 'type', value})\n                }\n            },\n            resource: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.resource\n                },\n                set(value) {\n                    this.setItemProp({prop: 'resource', value})\n                }\n            },\n            description: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.description\n                },\n                set(value) {\n                    this.setItemProp({prop: 'description', value})\n                }\n            },\n\n                computePrimaryText() {\n                    // if it's a new item\n                    // OR any fields have changed\n                    return !(typeof this.id === 'number') || this.itemInstance._dirty ?\n                        this.$t('objects.save') : this.$t('objects.saved');\n                },\n\n                computeDisabled() {\n                    // if there's a validation problem\n                    // OR it's edit and any fields haven't changed\n                    return this.checkValidations() ||\n                        (!this.itemInstance._dirty && (typeof this.id === 'number'));\n                },\n        },\n\n        methods: {\n            async save() {\n                const invalid = this.checkValidations();\n                // console.log(!invalid, !(typeof this.id === 'number'));\n                if (!invalid) {\n                    try {\n                        !(typeof this.id === 'number') ? await this.addItem() : await this.updateItem();\n                        this.$emit('close');\n                    } catch {\n                    }\n                }\n            },\n\n            async loadDropdownOptionsTypeList(search) {\n                const response = await getCommunicationsList(0, 10, search);\n                this.dropdownOptionsTypeList = response.map(item => {\n                    return {\n                        name: item.name,\n                        id: item.id,\n                    }\n                });\n            },\n\n            async loadDropdownOptionsResList(search) {\n                const response = await getResourceList(0, 10, search);\n                this.dropdownOptionsResList = response.map(item => {\n                    return {\n                        name: item.name,\n                        id: item.id,\n                    }\n                });\n            },\n\n            ...mapActions('ccenter/queues/members/communications', {\n                setItemProp: 'SET_ITEM_PROPERTY',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n                loadItem: 'LOAD_ITEM',\n            }),\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}