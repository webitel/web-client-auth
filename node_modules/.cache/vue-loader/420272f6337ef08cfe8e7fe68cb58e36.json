{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/node_modules/vuetable-2/src/components/Vuetable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/node_modules/vuetable-2/src/components/Vuetable.vue","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios'\r\nimport VuetableRowHeader from './VuetableRowHeader'\r\nimport VuetableColGroup from './VuetableColGroup'\r\nimport CssSemanticUI from './VuetableCssSemanticUI.js'\r\n\r\nexport default {\r\n  name: 'Vuetable',\r\n\r\n  components: {\r\n    VuetableRowHeader,\r\n    VuetableColGroup,\r\n  },\r\n\r\n  props: {\r\n    fields: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    loadOnStart: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    apiUrl: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    httpMethod: {\r\n      type: String,\r\n      default: 'get',\r\n      validator: (value) => {\r\n        return ['get', 'post'].indexOf(value) > -1\r\n      }\r\n    },\r\n    reactiveApiUrl: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    apiMode: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    data: {\r\n      type: [Array, Object],\r\n      default: null\r\n    },\r\n    dataManager: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    dataPath: {\r\n      type: String,\r\n      default: 'data'\r\n    },\r\n    paginationPath: {\r\n      type: String,\r\n      default: 'links.pagination'\r\n    },\r\n    queryParams: {\r\n      type: [Object, Function],\r\n      default () {\r\n        return {\r\n          sort: 'sort',\r\n          page: 'page',\r\n          perPage: 'per_page'\r\n        }\r\n      }\r\n    },\r\n    appendParams: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    httpOptions: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    httpFetch: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    perPage: {\r\n        type: Number,\r\n        default: 10\r\n    },\r\n    /**\r\n     * Page that should be displayed when the table is first displayed\r\n     */\r\n    initialPage: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    /**\r\n     * First page number. Set this prop to 0 for zero based pagination\r\n     */\r\n    firstPage: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    sortOrder: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    multiSort: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tableHeight: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    /*\r\n     * physical key that will trigger multi-sort option\r\n     * possible values: 'alt', 'ctrl', 'meta', 'shift'\r\n     * 'ctrl' might not work as expected on Mac\r\n     */\r\n    multiSortKey: {\r\n      type: String,\r\n      default: 'alt'\r\n    },\r\n    rowClass: {\r\n      type: [String, Function],\r\n      default: ''\r\n    },\r\n    detailRowComponent: {\r\n      type: [String, Object],\r\n      default: ''\r\n    },\r\n    detailRowTransition: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    detailRowClass: {\r\n      type: [String, Function],\r\n      default: 'vuetable-detail-row'\r\n    },\r\n    detailRowOptions: {\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    trackBy: {\r\n      type: String,\r\n      default: 'id'\r\n    },\r\n    css: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    minRows: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    silent: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    noDataTemplate: {\r\n      type: String,\r\n      default() {\r\n        return 'No Data Available'\r\n      }\r\n    },\r\n    showSortIcons: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    headerRows: {\r\n      type: Array,\r\n      default() {\r\n        return ['VuetableRowHeader']\r\n      }\r\n    },\r\n    transform: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    sortParams: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    fieldPrefix: {\r\n      type: String,\r\n      default() {\r\n        return 'vuetable-field-'\r\n      }\r\n    },\r\n    eventPrefix: {\r\n      type: String,\r\n      default() {\r\n        return 'vuetable:'\r\n      }\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      tableFields: [],\r\n      tableData: null,\r\n      tablePagination: null,\r\n      currentPage: this.initialPage,\r\n      selectedTo: [],\r\n      visibleDetailRows: [],\r\n      lastScrollPosition: 0,\r\n      scrollBarWidth: '17px', //chrome default\r\n      scrollVisible: false,\r\n      $_css: {}\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    version: () => VERSION,\r\n    useDetailRow () {\r\n      if ( ! this.dataIsAvailable) return false\r\n\r\n      return this.detailRowComponent !== ''\r\n    },\r\n    dataIsAvailable () {\r\n      if ( ! this.tableData) return false\r\n\r\n      return this.tableData.length > 0\r\n    },\r\n    hasRowIdentifier () {\r\n      return this.tableData && typeof(this.tableData[0][this.trackBy]) !== 'undefined'\r\n    },\r\n    countVisibleFields () {\r\n      return this.tableFields.filter( (field) => {\r\n        return field.visible\r\n      }).length\r\n    },\r\n    countTableData () {\r\n      if (this.tableData === null) {\r\n        return 0\r\n      }\r\n      return this.tableData.length\r\n    },\r\n    displayEmptyDataRow () {\r\n      return this.countTableData === 0 && this.noDataTemplate.length > 0\r\n    },\r\n    lessThanMinRows () {\r\n      if (this.tableData === null || this.tableData.length === 0) {\r\n        return true\r\n      }\r\n      return this.tableData.length < this.minRows\r\n    },\r\n    blankRows () {\r\n      if (this.tableData === null || this.tableData.length === 0) {\r\n        return this.minRows\r\n      }\r\n      if (this.tableData.length >= this.minRows) {\r\n        return 0\r\n      }\r\n\r\n      return this.minRows - this.tableData.length\r\n    },\r\n    isApiMode () {\r\n      return this.apiMode\r\n    },\r\n    isDataMode () {\r\n      return ! this.apiMode\r\n    },\r\n    isFixedHeader () {\r\n      return this.tableHeight != null\r\n    },\r\n    vuetable () {\r\n      return this\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.mergeCss()\r\n    this.normalizeFields()\r\n    this.normalizeSortOrder()\r\n    this.$nextTick( () => {\r\n      this.fireEvent('initialized', this.tableFields)\r\n    })\r\n  },\r\n\r\n  mounted () {\r\n    if (this.loadOnStart) {\r\n      this.loadData()\r\n    }\r\n\r\n    if (this.isFixedHeader) {\r\n      this.scrollBarWidth = this.getScrollBarWidth() + 'px';\r\n\r\n      let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0];\r\n      if (elem != null) {\r\n        elem.addEventListener('scroll', this.handleScroll);\r\n      }\r\n    }\r\n  },\r\n\r\n  destroyed () {\r\n    let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0];\r\n    if (elem != null) {\r\n      elem.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    multiSort (newVal, oldVal) {\r\n      if (newVal === false && this.sortOrder.length > 1) {\r\n        this.sortOrder.splice(1);\r\n        this.loadData();\r\n      }\r\n    },\r\n\r\n    apiUrl (newVal, oldVal) {\r\n      if (this.reactiveApiUrl && newVal !== oldVal)\r\n        this.refresh()\r\n    },\r\n\r\n    data (newVal, oldVal) {\r\n      this.setData(newVal)\r\n    },\r\n\r\n    tableHeight (newVal, oldVal) {\r\n      this.checkScrollbarVisibility()\r\n    },\r\n\r\n    fields (newVal, oldVal) {\r\n    \tthis.normalizeFields();\r\n    },\r\n\r\n    perPage (newVal, oldVal) {\r\n      this.reload();\r\n    }\r\n},\r\n\r\n  methods: {\r\n\r\n    getScrollBarWidth () {\r\n      const outer = document.createElement('div');\r\n      const inner = document.createElement('div');\r\n\r\n      outer.style.visibility = 'hidden';\r\n      outer.style.width = '100px';\r\n\r\n      inner.style.width = '100%';\r\n\r\n      outer.appendChild(inner);\r\n      document.body.appendChild(outer);\r\n\r\n      const widthWithoutScrollbar = outer.offsetWidth;\r\n      outer.style.overflow = 'scroll';\r\n      const widthWithScrollbar = inner.offsetWidth;\r\n      document.body.removeChild(outer);\r\n\r\n      return (widthWithoutScrollbar - widthWithScrollbar);\r\n    },\r\n\r\n    //make sure that the header and the body are aligned when scrolling horizontally on a table that is wider than the viewport\r\n    handleScroll (e) {\r\n      let horizontal = e.currentTarget.scrollLeft;\r\n\r\n      //don't modify header scroll if we are scrolling vertically\r\n      if (horizontal != this.lastScrollPosition) {\r\n        let header = this.$el.getElementsByClassName('vuetable-head-wrapper')[0]\r\n        if (header != null) {\r\n          header.scrollLeft = horizontal;\r\n        }\r\n        this.lastScrollPosition = horizontal;\r\n      }\r\n    },\r\n\r\n    mergeCss () {\r\n      this.$_css = { ...CssSemanticUI.table, ...this.css }\r\n    },\r\n\r\n    bodyClass (base, field) {\r\n      return [ base, field.dataClass ]\r\n    },\r\n\r\n    normalizeFields () {\r\n      if (typeof(this.fields) === 'undefined') {\r\n        this.warn('You need to provide \"fields\" prop.')\r\n        return\r\n      }\r\n\r\n      this.tableFields = []\r\n\r\n      this.fields.forEach( (field, i) => {\r\n        this.tableFields.push(this.newField(field, i))\r\n      })\r\n    },\r\n\r\n    newField (field, index) {\r\n      let defaultField = {\r\n        name: '',\r\n        // title:\r\n        // this allow the code to detect undefined title\r\n        // and replace it with capitalized name instead\r\n        titleClass: '',\r\n        dataClass: '',\r\n        sortField: null,\r\n        formatter: null,\r\n        visible: true,\r\n        width: null,\r\n        $_index: index,\r\n      }\r\n\r\n      if (typeof(field) === 'string') {\r\n        return Object.assign({}, defaultField, {\r\n          name: this.normalizeFieldName(field),\r\n          title: this.makeTitle(field),\r\n        })\r\n      }\r\n\r\n      let obj = Object.assign({}, defaultField, field)\r\n      obj.name = this.normalizeFieldName(obj.name)\r\n      if (obj.title === undefined) {\r\n        obj.title = this.makeTitle(obj.name)\r\n      }\r\n      if (obj.formatter !== null && typeof(obj.formatter) !== 'function') {\r\n        console.error(obj.name + ' field formatter must be a function')\r\n        obj.formatter = null\r\n      }\r\n      return obj\r\n    },\r\n\r\n    normalizeFieldName (fieldName) {\r\n      if (fieldName instanceof Object) return fieldName\r\n\r\n      return typeof(fieldName) === 'string' && fieldName.replace('__', this.fieldPrefix)\r\n    },\r\n\r\n    setData (data) {\r\n      if (data === null || typeof(data) === 'undefined') return\r\n\r\n      this.fireEvent('loading')\r\n\r\n      if (Array.isArray(data)) {\r\n        this.tableData = data\r\n        this.fireEvent('loaded')\r\n        return\r\n      }\r\n\r\n      this.tableData = this.getObjectValue(data, this.dataPath, null)\r\n      this.tablePagination = this.getObjectValue(data, this.paginationPath, null)\r\n\r\n      this.$nextTick( () => {\r\n        this.checkIfRowIdentifierExists()\r\n        this.updateHeader()\r\n        this.fireEvent('pagination-data', this.tablePagination)\r\n        this.fireEvent('loaded')\r\n      })\r\n    },\r\n\r\n    checkIfRowIdentifierExists () {\r\n      if (! this.dataIsAvailable) return\r\n\r\n      if ( ! this.hasRowIdentifier) {\r\n        this.warn('Invalid your data! Use \"track-by\" prop to specify.')\r\n        return false\r\n      }\r\n\r\n      return true\r\n    },\r\n\r\n    makeTitle (str) {\r\n      if (this.isFieldComponent(str)) {\r\n        return ''\r\n      }\r\n\r\n      return this.titleCase(str.replace('.', ' '))\r\n    },\r\n\r\n    getFieldTitle (field) {\r\n      if (typeof(field.title) === 'function') return field.title()\r\n\r\n      return field.title\r\n    },\r\n\r\n    renderNormalField (field, item) {\r\n      return this.hasFormatter(field)\r\n        ? this.callFormatter(field, item)\r\n        : this.getObjectValue(item, field.name, '')\r\n    },\r\n\r\n    isFieldComponent (fieldName) {\r\n      if (fieldName instanceof Object) {\r\n        // let's assume it is a Vue component\r\n        return true\r\n      }\r\n\r\n      return fieldName.slice(0, this.fieldPrefix.length) === this.fieldPrefix\r\n        || fieldName.slice(0, 2) === '__'\r\n    },\r\n\r\n    isFieldSlot (fieldName) {\r\n      return typeof this.$scopedSlots[fieldName] !== 'undefined'\r\n    },\r\n\r\n    titleCase (str) {\r\n      return str.replace(/\\w+/g, (txt) => {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n      })\r\n    },\r\n\r\n    camelCase (str, delimiter = '_') {\r\n      return str.split(delimiter).map( (item) => self.titleCase(item) ).join('')\r\n    },\r\n\r\n    loadData (success = this.loadSuccess, failed = this.loadFailed) {\r\n      if (this.isDataMode) {\r\n        this.handleDataMode()\r\n        return\r\n      }\r\n\r\n      this.fireEvent('loading')\r\n\r\n      this.httpOptions['params'] = this.getAppendParams( this.getAllQueryParams() )\r\n\r\n      return this.fetch(this.apiUrl, this.httpOptions).then(\r\n          success,\r\n          failed\r\n      ).catch(() => failed())\r\n    },\r\n\r\n    fetch (apiUrl, httpOptions) {\r\n      if (this.httpFetch) {\r\n        return this.httpFetch(apiUrl, httpOptions)\r\n      }\r\n\r\n      if (this.httpMethod === 'get') {\r\n        return axios.get(apiUrl, httpOptions)\r\n      }\r\n      else { // Is a POST request\r\n        let params = httpOptions.params\r\n        delete httpOptions.params\r\n        return axios.post(apiUrl, params, httpOptions)\r\n      }\r\n    },\r\n\r\n    loadSuccess (response) {\r\n      this.fireEvent('load-success', response)\r\n\r\n      let body = this.transform ? this.transform(response.data) : response.data\r\n\r\n      this.tableData = this.getObjectValue(body, this.dataPath, null)\r\n      this.tablePagination = this.getObjectValue(body, this.paginationPath, null)\r\n\r\n      if (this.tablePagination === null) {\r\n        this.warn('vuetable: pagination-path \"' + this.paginationPath + '\" not found. '\r\n          + 'It looks like the data returned from the server does not have pagination information '\r\n          + \"or you may have set it incorrectly.\\n\"\r\n          + 'You can explicitly suppress this warning by setting pagination-path=\"\".'\r\n        )\r\n      }\r\n\r\n      this.$nextTick( () => {\r\n        this.checkIfRowIdentifierExists()\r\n        this.updateHeader()\r\n        this.fireEvent('pagination-data', this.tablePagination)\r\n        this.fireEvent('loaded')\r\n      })\r\n    },\r\n\r\n    updateHeader () {\r\n      // $nextTick doesn't seem to work in all cases. This might be because\r\n      // $nextTick is finished before the transition element (just my guess)\r\n      //\r\n      // the scrollHeight value does not yet changed, causing scrollVisible\r\n      // to remain \"true\", therefore, the header gutter never gets updated\r\n      // to reflect the display of scrollbar in the table body.\r\n      // setTimeout 80ms seems to work in this case.\r\n      setTimeout(this.checkScrollbarVisibility, 80)\r\n    },\r\n\r\n    checkScrollbarVisibility () {\r\n      this.$nextTick( () => {\r\n        let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0]\r\n        if (elem != null) {\r\n          this.scrollVisible = (elem.scrollHeight > elem.clientHeight)\r\n          this.fireEvent('scrollbar-visible', this.scrollVisible)\r\n        }\r\n      })\r\n    },\r\n\r\n    loadFailed (response) {\r\n      console.error('load-error', response)\r\n      this.fireEvent('load-error', response)\r\n      this.fireEvent('loaded')\r\n    },\r\n\r\n    fireEvent () {\r\n      if (arguments.length === 1) {\r\n        return this.$emit(this.eventPrefix + arguments[0])\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        let args = Array.from(arguments)\r\n        args[0] = this.eventPrefix + args[0]\r\n        return this.$emit.apply(this, args)\r\n      }\r\n    },\r\n\r\n    warn (msg) {\r\n      if (!this.silent) {\r\n        console.warn(msg)\r\n      }\r\n    },\r\n\r\n    getAllQueryParams () {\r\n      let params = {}\r\n\r\n      if (typeof(this.queryParams) === 'function') {\r\n        params = this.queryParams(this.sortOrder, this.currentPage, this.perPage)\r\n        return typeof(params) === 'object' ? params : {}\r\n      }\r\n\r\n      params[this.queryParams.sort] = this.getSortParam()\r\n      params[this.queryParams.page] = this.currentPage\r\n      params[this.queryParams.perPage] = this.perPage\r\n\r\n      return params\r\n    },\r\n\r\n    getSortParam () {\r\n      if (!this.sortOrder || this.sortOrder.field == '') {\r\n        return ''\r\n      }\r\n\r\n      if (typeof this.sortParams === 'function') {\r\n        return this.sortParams(this.sortOrder)\r\n      }\r\n\r\n      return this.getDefaultSortParam()\r\n    },\r\n\r\n    getDefaultSortParam () {\r\n      return this.sortOrder.map( (item) => `${item.sortField}|${item.direction}`).join(',')\r\n    },\r\n\r\n    getAppendParams (params) {\r\n      for (let x in this.appendParams) {\r\n        params[x] = this.appendParams[x]\r\n      }\r\n\r\n      return params\r\n    },\r\n\r\n    isSortable (field) {\r\n      return field.sortField !== null\r\n    },\r\n\r\n    currentSortOrderPosition (field) {\r\n      if ( ! this.isSortable(field)) {\r\n        return false\r\n      }\r\n\r\n      for (let i = 0; i < this.sortOrder.length; i++) {\r\n        if (this.fieldIsInSortOrderPosition(field, i)) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    fieldIsInSortOrderPosition (field, i) {\r\n      return this.sortOrder[i].field === field.name && this.sortOrder[i].sortField === field.sortField\r\n    },\r\n\r\n    orderBy (field, event) {\r\n      if ( ! this.isSortable(field) ) return\r\n\r\n      let key = this.multiSortKey.toLowerCase() + 'Key'\r\n\r\n      if (this.multiSort && event[key]) { //adding column to multisort\r\n        this.multiColumnSort(field)\r\n      } else {\r\n        //no multisort, or resetting sort\r\n        this.singleColumnSort(field)\r\n      }\r\n\r\n      this.currentPage = this.firstPage    // reset page index\r\n      if (this.apiMode || this.dataManager) {\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    addSortColumn (field, direction) {\r\n      this.sortOrder.push({\r\n        field: field.name,\r\n        sortField: field.sortField,\r\n        direction: 'asc'\r\n      });\r\n    },\r\n\r\n    removeSortColumn (index) {\r\n      this.sortOrder.splice(index, 1);\r\n    },\r\n\r\n    setSortColumnDirection (index, direction) {\r\n      this.sortOrder[index].direction = direction\r\n    },\r\n\r\n    multiColumnSort (field) {\r\n      let i = this.currentSortOrderPosition(field);\r\n\r\n      if (i === false) { //this field is not in the sort array yet\r\n        this.addSortColumn(field, 'asc')\r\n      } else { //this field is in the sort array, now we change its state\r\n        if (this.sortOrder[i].direction === 'asc') {\r\n          // switch direction\r\n          this.setSortColumnDirection(i, 'desc')\r\n        } else {\r\n          this.removeSortColumn(i)\r\n        }\r\n      }\r\n    },\r\n\r\n    singleColumnSort (field) {\r\n      if (this.sortOrder.length === 0) {\r\n        // this.clearSortOrder()\r\n        this.addSortColumn(field, 'asc')\r\n        return\r\n      }\r\n\r\n      this.sortOrder.splice(1); //removes additional columns\r\n\r\n      if (this.fieldIsInSortOrderPosition(field, 0)) {\r\n        // change sort direction\r\n        this.sortOrder[0].direction = this.sortOrder[0].direction === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        // reset sort direction\r\n        this.sortOrder[0].direction = 'asc'\r\n      }\r\n      this.sortOrder[0].field = field.name\r\n      this.sortOrder[0].sortField = field.sortField\r\n    },\r\n\r\n    clearSortOrder () {\r\n      this.sortOrder = []\r\n    },\r\n\r\n    hasFormatter (item) {\r\n      return typeof(item.formatter) === 'function'\r\n    },\r\n\r\n    callFormatter (field, item) {\r\n      if ( ! this.hasFormatter(field)) return\r\n\r\n      if (typeof(field.formatter) === 'function') {\r\n       return field.formatter(this.getObjectValue(item, field.name), this)\r\n      }\r\n    },\r\n\r\n    getObjectValue (object, path, defaultValue) {\r\n      defaultValue = (typeof defaultValue === 'undefined') ? null : defaultValue\r\n\r\n      let obj = object\r\n      if (path.trim() != '') {\r\n        let keys = path.split('.')\r\n        keys.forEach( (key) => {\r\n          if (obj !== null && typeof obj[key] !== 'undefined' && obj[key] !== null) {\r\n            obj = obj[key]\r\n          } else {\r\n            obj = defaultValue\r\n            return\r\n          }\r\n        })\r\n      }\r\n      return obj\r\n    },\r\n\r\n    selectId (key) {\r\n      if ( ! this.isSelectedRow(key)) {\r\n        this.selectedTo.push(key)\r\n      }\r\n    },\r\n\r\n    unselectId (key) {\r\n      this.selectedTo = this.selectedTo.filter( (item) => {\r\n        return item !== key\r\n      })\r\n    },\r\n\r\n    isSelectedRow (key) {\r\n      return this.selectedTo.indexOf(key) >= 0\r\n    },\r\n\r\n    clearSelectedValues () {\r\n      this.selectedTo = []\r\n    },\r\n\r\n    gotoPreviousPage () {\r\n      if (this.currentPage > this.firstPage) {\r\n        this.currentPage--\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    gotoNextPage () {\r\n      if (this.currentPage < this.tablePagination.last_page) {\r\n        this.currentPage++\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    gotoPage (page) {\r\n      if (page != this.currentPage && (page >= this.firstPage && page <= this.tablePagination.last_page)) {\r\n        this.currentPage = page\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    isVisibleDetailRow (rowId) {\r\n      return this.visibleDetailRows.indexOf( rowId ) >= 0\r\n    },\r\n\r\n    showDetailRow (rowId) {\r\n      if (!this.isVisibleDetailRow(rowId)) {\r\n        this.visibleDetailRows.push(rowId)\r\n      }\r\n      this.checkScrollbarVisibility()\r\n    },\r\n\r\n    hideDetailRow (rowId) {\r\n      if (this.isVisibleDetailRow(rowId)) {\r\n        this.visibleDetailRows.splice(\r\n          this.visibleDetailRows.indexOf(rowId),\r\n          1\r\n        )\r\n        this.updateHeader()\r\n      }\r\n    },\r\n\r\n    toggleDetailRow (rowId) {\r\n      if (this.isVisibleDetailRow(rowId)) {\r\n        this.hideDetailRow(rowId)\r\n      } else {\r\n        this.showDetailRow(rowId)\r\n      }\r\n    },\r\n\r\n    showField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = true\r\n    },\r\n\r\n    hideField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = false\r\n    },\r\n\r\n    toggleField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = ! this.tableFields[index].visible\r\n    },\r\n\r\n    makePagination (total = null, perPage = null, currentPage = null) {\r\n      let pagination = {}\r\n      total = total === null ? 0 : total\r\n      perPage = perPage === null ? this.perPage : perPage\r\n      currentPage = currentPage === null ? this.currentPage : currentPage\r\n\r\n      return {\r\n        'total': total,\r\n        'per_page': perPage,\r\n        'current_page': currentPage,\r\n        'last_page': Math.ceil(total / perPage) || 0,\r\n        'next_page_url': '',\r\n        'prev_page_url': '',\r\n        'from': (currentPage -1) * perPage +1,\r\n        'to': Math.min(currentPage * perPage, total)\r\n      }\r\n    },\r\n\r\n    normalizeSortOrder () {\r\n      this.sortOrder.forEach( (item) => {\r\n        item.sortField = item.sortField || item.field\r\n      })\r\n    },\r\n\r\n    handleDataMode () {\r\n      // data is array\r\n      if (this.data !== null && Array.isArray(this.data)) {\r\n        this.setData(this.data)\r\n        return\r\n      }\r\n\r\n      // data must be an object, check if dataManager is present\r\n      if (this.dataManager) {\r\n        this.callDataManager()\r\n      } else {\r\n        this.setData(this.data)\r\n      }\r\n    },\r\n\r\n    callDataManager () {\r\n      const result = this.dataManager(this.sortOrder, this.makePagination())\r\n\r\n      if (this.isPromiseObject(result)) {\r\n        result.then(data => this.setData(data))\r\n      } else {\r\n        this.setData(result)\r\n      }\r\n    },\r\n\r\n    isObject (unknown) {\r\n      return typeof(unknown) === \"object\" && unknown !== null\r\n    },\r\n\r\n    isPromiseObject (unknown) {\r\n      return this.isObject(unknown) && typeof(unknown.then) === \"function\"\r\n    },\r\n\r\n    onRowClass (dataItem, index) {\r\n      if (typeof(this.rowClass) === 'function') {\r\n        return this.rowClass(dataItem, index)\r\n      }\r\n\r\n      return this.rowClass\r\n    },\r\n\r\n    onDetailRowClass (dataItem, index) {\r\n      if (typeof(this.detailRowClass) === 'function') {\r\n        return this.detailRowClass(dataItem, index)\r\n      }\r\n\r\n      return this.detailRowClass\r\n    },\r\n\r\n    onRowClicked (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-clicked', { data: dataItem, index: dataIndex, event: event })\r\n      return true\r\n    },\r\n\r\n    onRowDoubleClicked (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-dblclicked', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onDetailRowClick (dataItem, dataIndex, event) {\r\n      this.fireEvent('detail-row-clicked', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onCellClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-clicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onCellDoubleClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-dblclicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onCellRightClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-rightclicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onMouseOver (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-mouseover', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onFieldEvent (type, payload) {\r\n      this.fireEvent('field-event', type, payload, this)\r\n    },\r\n\r\n    onHeaderEvent (type, payload) {\r\n      this.fireEvent('header-event', type, payload, this)\r\n    },\r\n\r\n    onCheckboxToggled (isChecked, fieldName, dataItem) {\r\n      let idColumn = this.trackBy\r\n\r\n      if (dataItem[idColumn] === undefined) {\r\n        this.warn('checkbox field: The \"'+this.trackBy+'\" field does not exist! Make sure the field you specify in \"track-by\" prop does exist.')\r\n        return\r\n      }\r\n\r\n      let key = dataItem[idColumn]\r\n      if (isChecked) {\r\n        this.selectId(key)\r\n      } else {\r\n        this.unselectId(key)\r\n      }\r\n\r\n      this.fireEvent('checkbox-toggled', isChecked, fieldName)\r\n    },\r\n\r\n    onCheckboxToggledAll (isChecked) {\r\n      let idColumn = this.trackBy\r\n\r\n      if (isChecked) {\r\n        this.tableData.forEach( (dataItem) => {\r\n          this.selectId(dataItem[idColumn])\r\n        })\r\n      } else {\r\n        this.tableData.forEach( (dataItem) => {\r\n          this.unselectId(dataItem[idColumn])\r\n        })\r\n      }\r\n\r\n      this.fireEvent('checkbox-toggled-all', isChecked)\r\n    },\r\n\r\n    /*\r\n     * API for externals\r\n     */\r\n    changePage (page) {\r\n      if (page === 'prev') {\r\n        this.gotoPreviousPage()\r\n      } else if (page === 'next') {\r\n        this.gotoNextPage()\r\n      } else {\r\n        this.gotoPage(page)\r\n      }\r\n    },\r\n\r\n    reload () {\r\n      return this.loadData()\r\n    },\r\n\r\n    refresh () {\r\n      this.currentPage = this.firstPage\r\n      return this.loadData()\r\n    },\r\n\r\n    resetData () {\r\n      this.tableData = null\r\n      this.tablePagination = null\r\n      this.fireEvent('data-reset')\r\n    },\r\n  }, // end: methods\r\n}\r\n",{"version":3,"sources":["Vuetable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Vuetable.vue","sourceRoot":"node_modules/vuetable-2/src/components","sourcesContent":["<template>\r\n  <div :class=\"$_css.tableWrapper\">\r\n    <div class=\"vuetable-head-wrapper\" v-if=\"isFixedHeader\">\r\n      <table :class=\"['vuetable', $_css.tableClass, $_css.tableHeaderClass]\">\r\n        <vuetable-col-group :is-header=\"true\"/>\r\n        <thead>\r\n          <slot name=\"tableHeader\" :fields=\"tableFields\">\r\n            <template v-for=\"(header, headerIndex) in headerRows\">\r\n              <component :is=\"header\" :key=\"headerIndex\"\r\n                @vuetable:header-event=\"onHeaderEvent\"\r\n              ></component>\r\n            </template>\r\n          </slot>\r\n        </thead>\r\n      </table>\r\n    </div>\r\n\r\n    <div class=\"vuetable-body-wrapper\" :class=\"{'fixed-header' : isFixedHeader}\" :style=\"{height: tableHeight}\">\r\n      <table :class=\"['vuetable', isFixedHeader ? 'fixed-header' : '', $_css.tableClass, $_css.tableBodyClass]\">\r\n      <vuetable-col-group/>\r\n      <thead v-if=\"!isFixedHeader\">\r\n      <slot name=\"tableHeader\" :fields=\"tableFields\">\r\n        <template v-for=\"(header, headerIndex) in headerRows\">\r\n          <component :is=\"header\" :key=\"headerIndex\"\r\n            @vuetable:header-event=\"onHeaderEvent\"\r\n          ></component>\r\n        </template>\r\n      </slot>\r\n      </thead>\r\n      <tfoot>\r\n        <slot name=\"tableFooter\" :fields=\"tableFields\"></slot>\r\n      </tfoot>\r\n      <tbody v-cloak class=\"vuetable-body\">\r\n        <template v-for=\"(item, itemIndex) in tableData\">\r\n          <tr :item-index=\"itemIndex\"\r\n            :key=\"itemIndex\"\r\n            :class=\"onRowClass(item, itemIndex)\"\r\n            @click=\"onRowClicked(item, itemIndex, $event)\"\r\n            @dblclick=\"onRowDoubleClicked(item, itemIndex, $event)\"\r\n            @mouseover=\"onMouseOver(item, itemIndex, $event)\"\r\n          >\r\n            <template v-for=\"(field, fieldIndex) in tableFields\">\r\n              <template v-if=\"field.visible\">\r\n                <template v-if=\"isFieldComponent(field.name)\">\r\n                  <component :is=\"field.name\"\r\n                    :key=\"fieldIndex\"\r\n                    :row-data=\"item\" :row-index=\"itemIndex\" :row-field=\"field\"\r\n                    :vuetable=\"vuetable\"\r\n                    :class=\"bodyClass('vuetable-component', field)\"\r\n                    :style=\"{width: field.width}\"\r\n                    @vuetable:field-event=\"onFieldEvent\"\r\n                  ></component>\r\n                </template>\r\n                <template v-else-if=\"isFieldSlot(field.name)\">\r\n                  <td :class=\"bodyClass('vuetable-slot', field)\"\r\n                    :key=\"fieldIndex\"\r\n                    :style=\"{width: field.width}\"\r\n                  >\r\n                    <slot :name=\"field.name\"\r\n                      :row-data=\"item\" :row-index=\"itemIndex\" :row-field=\"field\"\r\n                    ></slot>\r\n                  </td>\r\n                </template>\r\n                <template v-else>\r\n                  <td :class=\"bodyClass('vuetable-td-'+field.name, field)\"\r\n                    :key=\"fieldIndex\"\r\n                    :style=\"{width: field.width}\"\r\n                    v-html=\"renderNormalField(field, item)\"\r\n                    @click=\"onCellClicked(item, itemIndex, field, $event)\"\r\n                    @dblclick=\"onCellDoubleClicked(item, itemIndex, field, $event)\"\r\n                    @contextmenu=\"onCellRightClicked(item, itemIndex, field, $event)\"\r\n                  ></td>\r\n                </template>\r\n              </template>\r\n            </template>\r\n          </tr>\r\n          <template v-if=\"useDetailRow\">\r\n            <transition :name=\"detailRowTransition\" :key=\"itemIndex\">\r\n              <tr v-if=\"isVisibleDetailRow(item[trackBy])\"\r\n                @click=\"onDetailRowClick(item, itemIndex, $event)\"\r\n                :class=\"onDetailRowClass(item, itemIndex)\"\r\n              >\r\n                <td :colspan=\"countVisibleFields\">\r\n                  <component :is=\"detailRowComponent\"\r\n                    :row-data=\"item\"\r\n                    :row-index=\"itemIndex\"\r\n                    :options=\"detailRowOptions\"\r\n                  ></component>\r\n                </td>\r\n              </tr>\r\n            </transition>\r\n          </template>\r\n        </template>\r\n        <template v-if=\"displayEmptyDataRow\">\r\n          <tr>\r\n            <td :colspan=\"countVisibleFields\"\r\n              class=\"vuetable-empty-result\"\r\n              v-html=\"noDataTemplate\"\r\n            ></td>\r\n          </tr>\r\n        </template>\r\n        <template v-if=\"lessThanMinRows\">\r\n          <tr v-for=\"i in blankRows\" class=\"blank-row\" :key=\"i\">\r\n            <template v-for=\"(field, fieldIndex) in tableFields\">\r\n              <td v-if=\"field.visible\" :key=\"fieldIndex\">&nbsp;</td>\r\n            </template>\r\n          </tr>\r\n        </template>\r\n      </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport VuetableRowHeader from './VuetableRowHeader'\r\nimport VuetableColGroup from './VuetableColGroup'\r\nimport CssSemanticUI from './VuetableCssSemanticUI.js'\r\n\r\nexport default {\r\n  name: 'Vuetable',\r\n\r\n  components: {\r\n    VuetableRowHeader,\r\n    VuetableColGroup,\r\n  },\r\n\r\n  props: {\r\n    fields: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    loadOnStart: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    apiUrl: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    httpMethod: {\r\n      type: String,\r\n      default: 'get',\r\n      validator: (value) => {\r\n        return ['get', 'post'].indexOf(value) > -1\r\n      }\r\n    },\r\n    reactiveApiUrl: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    apiMode: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    data: {\r\n      type: [Array, Object],\r\n      default: null\r\n    },\r\n    dataManager: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    dataPath: {\r\n      type: String,\r\n      default: 'data'\r\n    },\r\n    paginationPath: {\r\n      type: String,\r\n      default: 'links.pagination'\r\n    },\r\n    queryParams: {\r\n      type: [Object, Function],\r\n      default () {\r\n        return {\r\n          sort: 'sort',\r\n          page: 'page',\r\n          perPage: 'per_page'\r\n        }\r\n      }\r\n    },\r\n    appendParams: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    httpOptions: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    httpFetch: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    perPage: {\r\n        type: Number,\r\n        default: 10\r\n    },\r\n    /**\r\n     * Page that should be displayed when the table is first displayed\r\n     */\r\n    initialPage: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    /**\r\n     * First page number. Set this prop to 0 for zero based pagination\r\n     */\r\n    firstPage: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    sortOrder: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    multiSort: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tableHeight: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    /*\r\n     * physical key that will trigger multi-sort option\r\n     * possible values: 'alt', 'ctrl', 'meta', 'shift'\r\n     * 'ctrl' might not work as expected on Mac\r\n     */\r\n    multiSortKey: {\r\n      type: String,\r\n      default: 'alt'\r\n    },\r\n    rowClass: {\r\n      type: [String, Function],\r\n      default: ''\r\n    },\r\n    detailRowComponent: {\r\n      type: [String, Object],\r\n      default: ''\r\n    },\r\n    detailRowTransition: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    detailRowClass: {\r\n      type: [String, Function],\r\n      default: 'vuetable-detail-row'\r\n    },\r\n    detailRowOptions: {\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    trackBy: {\r\n      type: String,\r\n      default: 'id'\r\n    },\r\n    css: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    minRows: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    silent: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    noDataTemplate: {\r\n      type: String,\r\n      default() {\r\n        return 'No Data Available'\r\n      }\r\n    },\r\n    showSortIcons: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    headerRows: {\r\n      type: Array,\r\n      default() {\r\n        return ['VuetableRowHeader']\r\n      }\r\n    },\r\n    transform: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    sortParams: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    fieldPrefix: {\r\n      type: String,\r\n      default() {\r\n        return 'vuetable-field-'\r\n      }\r\n    },\r\n    eventPrefix: {\r\n      type: String,\r\n      default() {\r\n        return 'vuetable:'\r\n      }\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      tableFields: [],\r\n      tableData: null,\r\n      tablePagination: null,\r\n      currentPage: this.initialPage,\r\n      selectedTo: [],\r\n      visibleDetailRows: [],\r\n      lastScrollPosition: 0,\r\n      scrollBarWidth: '17px', //chrome default\r\n      scrollVisible: false,\r\n      $_css: {}\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    version: () => VERSION,\r\n    useDetailRow () {\r\n      if ( ! this.dataIsAvailable) return false\r\n\r\n      return this.detailRowComponent !== ''\r\n    },\r\n    dataIsAvailable () {\r\n      if ( ! this.tableData) return false\r\n\r\n      return this.tableData.length > 0\r\n    },\r\n    hasRowIdentifier () {\r\n      return this.tableData && typeof(this.tableData[0][this.trackBy]) !== 'undefined'\r\n    },\r\n    countVisibleFields () {\r\n      return this.tableFields.filter( (field) => {\r\n        return field.visible\r\n      }).length\r\n    },\r\n    countTableData () {\r\n      if (this.tableData === null) {\r\n        return 0\r\n      }\r\n      return this.tableData.length\r\n    },\r\n    displayEmptyDataRow () {\r\n      return this.countTableData === 0 && this.noDataTemplate.length > 0\r\n    },\r\n    lessThanMinRows () {\r\n      if (this.tableData === null || this.tableData.length === 0) {\r\n        return true\r\n      }\r\n      return this.tableData.length < this.minRows\r\n    },\r\n    blankRows () {\r\n      if (this.tableData === null || this.tableData.length === 0) {\r\n        return this.minRows\r\n      }\r\n      if (this.tableData.length >= this.minRows) {\r\n        return 0\r\n      }\r\n\r\n      return this.minRows - this.tableData.length\r\n    },\r\n    isApiMode () {\r\n      return this.apiMode\r\n    },\r\n    isDataMode () {\r\n      return ! this.apiMode\r\n    },\r\n    isFixedHeader () {\r\n      return this.tableHeight != null\r\n    },\r\n    vuetable () {\r\n      return this\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.mergeCss()\r\n    this.normalizeFields()\r\n    this.normalizeSortOrder()\r\n    this.$nextTick( () => {\r\n      this.fireEvent('initialized', this.tableFields)\r\n    })\r\n  },\r\n\r\n  mounted () {\r\n    if (this.loadOnStart) {\r\n      this.loadData()\r\n    }\r\n\r\n    if (this.isFixedHeader) {\r\n      this.scrollBarWidth = this.getScrollBarWidth() + 'px';\r\n\r\n      let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0];\r\n      if (elem != null) {\r\n        elem.addEventListener('scroll', this.handleScroll);\r\n      }\r\n    }\r\n  },\r\n\r\n  destroyed () {\r\n    let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0];\r\n    if (elem != null) {\r\n      elem.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    multiSort (newVal, oldVal) {\r\n      if (newVal === false && this.sortOrder.length > 1) {\r\n        this.sortOrder.splice(1);\r\n        this.loadData();\r\n      }\r\n    },\r\n\r\n    apiUrl (newVal, oldVal) {\r\n      if (this.reactiveApiUrl && newVal !== oldVal)\r\n        this.refresh()\r\n    },\r\n\r\n    data (newVal, oldVal) {\r\n      this.setData(newVal)\r\n    },\r\n\r\n    tableHeight (newVal, oldVal) {\r\n      this.checkScrollbarVisibility()\r\n    },\r\n\r\n    fields (newVal, oldVal) {\r\n    \tthis.normalizeFields();\r\n    },\r\n\r\n    perPage (newVal, oldVal) {\r\n      this.reload();\r\n    }\r\n},\r\n\r\n  methods: {\r\n\r\n    getScrollBarWidth () {\r\n      const outer = document.createElement('div');\r\n      const inner = document.createElement('div');\r\n\r\n      outer.style.visibility = 'hidden';\r\n      outer.style.width = '100px';\r\n\r\n      inner.style.width = '100%';\r\n\r\n      outer.appendChild(inner);\r\n      document.body.appendChild(outer);\r\n\r\n      const widthWithoutScrollbar = outer.offsetWidth;\r\n      outer.style.overflow = 'scroll';\r\n      const widthWithScrollbar = inner.offsetWidth;\r\n      document.body.removeChild(outer);\r\n\r\n      return (widthWithoutScrollbar - widthWithScrollbar);\r\n    },\r\n\r\n    //make sure that the header and the body are aligned when scrolling horizontally on a table that is wider than the viewport\r\n    handleScroll (e) {\r\n      let horizontal = e.currentTarget.scrollLeft;\r\n\r\n      //don't modify header scroll if we are scrolling vertically\r\n      if (horizontal != this.lastScrollPosition) {\r\n        let header = this.$el.getElementsByClassName('vuetable-head-wrapper')[0]\r\n        if (header != null) {\r\n          header.scrollLeft = horizontal;\r\n        }\r\n        this.lastScrollPosition = horizontal;\r\n      }\r\n    },\r\n\r\n    mergeCss () {\r\n      this.$_css = { ...CssSemanticUI.table, ...this.css }\r\n    },\r\n\r\n    bodyClass (base, field) {\r\n      return [ base, field.dataClass ]\r\n    },\r\n\r\n    normalizeFields () {\r\n      if (typeof(this.fields) === 'undefined') {\r\n        this.warn('You need to provide \"fields\" prop.')\r\n        return\r\n      }\r\n\r\n      this.tableFields = []\r\n\r\n      this.fields.forEach( (field, i) => {\r\n        this.tableFields.push(this.newField(field, i))\r\n      })\r\n    },\r\n\r\n    newField (field, index) {\r\n      let defaultField = {\r\n        name: '',\r\n        // title:\r\n        // this allow the code to detect undefined title\r\n        // and replace it with capitalized name instead\r\n        titleClass: '',\r\n        dataClass: '',\r\n        sortField: null,\r\n        formatter: null,\r\n        visible: true,\r\n        width: null,\r\n        $_index: index,\r\n      }\r\n\r\n      if (typeof(field) === 'string') {\r\n        return Object.assign({}, defaultField, {\r\n          name: this.normalizeFieldName(field),\r\n          title: this.makeTitle(field),\r\n        })\r\n      }\r\n\r\n      let obj = Object.assign({}, defaultField, field)\r\n      obj.name = this.normalizeFieldName(obj.name)\r\n      if (obj.title === undefined) {\r\n        obj.title = this.makeTitle(obj.name)\r\n      }\r\n      if (obj.formatter !== null && typeof(obj.formatter) !== 'function') {\r\n        console.error(obj.name + ' field formatter must be a function')\r\n        obj.formatter = null\r\n      }\r\n      return obj\r\n    },\r\n\r\n    normalizeFieldName (fieldName) {\r\n      if (fieldName instanceof Object) return fieldName\r\n\r\n      return typeof(fieldName) === 'string' && fieldName.replace('__', this.fieldPrefix)\r\n    },\r\n\r\n    setData (data) {\r\n      if (data === null || typeof(data) === 'undefined') return\r\n\r\n      this.fireEvent('loading')\r\n\r\n      if (Array.isArray(data)) {\r\n        this.tableData = data\r\n        this.fireEvent('loaded')\r\n        return\r\n      }\r\n\r\n      this.tableData = this.getObjectValue(data, this.dataPath, null)\r\n      this.tablePagination = this.getObjectValue(data, this.paginationPath, null)\r\n\r\n      this.$nextTick( () => {\r\n        this.checkIfRowIdentifierExists()\r\n        this.updateHeader()\r\n        this.fireEvent('pagination-data', this.tablePagination)\r\n        this.fireEvent('loaded')\r\n      })\r\n    },\r\n\r\n    checkIfRowIdentifierExists () {\r\n      if (! this.dataIsAvailable) return\r\n\r\n      if ( ! this.hasRowIdentifier) {\r\n        this.warn('Invalid your data! Use \"track-by\" prop to specify.')\r\n        return false\r\n      }\r\n\r\n      return true\r\n    },\r\n\r\n    makeTitle (str) {\r\n      if (this.isFieldComponent(str)) {\r\n        return ''\r\n      }\r\n\r\n      return this.titleCase(str.replace('.', ' '))\r\n    },\r\n\r\n    getFieldTitle (field) {\r\n      if (typeof(field.title) === 'function') return field.title()\r\n\r\n      return field.title\r\n    },\r\n\r\n    renderNormalField (field, item) {\r\n      return this.hasFormatter(field)\r\n        ? this.callFormatter(field, item)\r\n        : this.getObjectValue(item, field.name, '')\r\n    },\r\n\r\n    isFieldComponent (fieldName) {\r\n      if (fieldName instanceof Object) {\r\n        // let's assume it is a Vue component\r\n        return true\r\n      }\r\n\r\n      return fieldName.slice(0, this.fieldPrefix.length) === this.fieldPrefix\r\n        || fieldName.slice(0, 2) === '__'\r\n    },\r\n\r\n    isFieldSlot (fieldName) {\r\n      return typeof this.$scopedSlots[fieldName] !== 'undefined'\r\n    },\r\n\r\n    titleCase (str) {\r\n      return str.replace(/\\w+/g, (txt) => {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n      })\r\n    },\r\n\r\n    camelCase (str, delimiter = '_') {\r\n      return str.split(delimiter).map( (item) => self.titleCase(item) ).join('')\r\n    },\r\n\r\n    loadData (success = this.loadSuccess, failed = this.loadFailed) {\r\n      if (this.isDataMode) {\r\n        this.handleDataMode()\r\n        return\r\n      }\r\n\r\n      this.fireEvent('loading')\r\n\r\n      this.httpOptions['params'] = this.getAppendParams( this.getAllQueryParams() )\r\n\r\n      return this.fetch(this.apiUrl, this.httpOptions).then(\r\n          success,\r\n          failed\r\n      ).catch(() => failed())\r\n    },\r\n\r\n    fetch (apiUrl, httpOptions) {\r\n      if (this.httpFetch) {\r\n        return this.httpFetch(apiUrl, httpOptions)\r\n      }\r\n\r\n      if (this.httpMethod === 'get') {\r\n        return axios.get(apiUrl, httpOptions)\r\n      }\r\n      else { // Is a POST request\r\n        let params = httpOptions.params\r\n        delete httpOptions.params\r\n        return axios.post(apiUrl, params, httpOptions)\r\n      }\r\n    },\r\n\r\n    loadSuccess (response) {\r\n      this.fireEvent('load-success', response)\r\n\r\n      let body = this.transform ? this.transform(response.data) : response.data\r\n\r\n      this.tableData = this.getObjectValue(body, this.dataPath, null)\r\n      this.tablePagination = this.getObjectValue(body, this.paginationPath, null)\r\n\r\n      if (this.tablePagination === null) {\r\n        this.warn('vuetable: pagination-path \"' + this.paginationPath + '\" not found. '\r\n          + 'It looks like the data returned from the server does not have pagination information '\r\n          + \"or you may have set it incorrectly.\\n\"\r\n          + 'You can explicitly suppress this warning by setting pagination-path=\"\".'\r\n        )\r\n      }\r\n\r\n      this.$nextTick( () => {\r\n        this.checkIfRowIdentifierExists()\r\n        this.updateHeader()\r\n        this.fireEvent('pagination-data', this.tablePagination)\r\n        this.fireEvent('loaded')\r\n      })\r\n    },\r\n\r\n    updateHeader () {\r\n      // $nextTick doesn't seem to work in all cases. This might be because\r\n      // $nextTick is finished before the transition element (just my guess)\r\n      //\r\n      // the scrollHeight value does not yet changed, causing scrollVisible\r\n      // to remain \"true\", therefore, the header gutter never gets updated\r\n      // to reflect the display of scrollbar in the table body.\r\n      // setTimeout 80ms seems to work in this case.\r\n      setTimeout(this.checkScrollbarVisibility, 80)\r\n    },\r\n\r\n    checkScrollbarVisibility () {\r\n      this.$nextTick( () => {\r\n        let elem = this.$el.getElementsByClassName('vuetable-body-wrapper')[0]\r\n        if (elem != null) {\r\n          this.scrollVisible = (elem.scrollHeight > elem.clientHeight)\r\n          this.fireEvent('scrollbar-visible', this.scrollVisible)\r\n        }\r\n      })\r\n    },\r\n\r\n    loadFailed (response) {\r\n      console.error('load-error', response)\r\n      this.fireEvent('load-error', response)\r\n      this.fireEvent('loaded')\r\n    },\r\n\r\n    fireEvent () {\r\n      if (arguments.length === 1) {\r\n        return this.$emit(this.eventPrefix + arguments[0])\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        let args = Array.from(arguments)\r\n        args[0] = this.eventPrefix + args[0]\r\n        return this.$emit.apply(this, args)\r\n      }\r\n    },\r\n\r\n    warn (msg) {\r\n      if (!this.silent) {\r\n        console.warn(msg)\r\n      }\r\n    },\r\n\r\n    getAllQueryParams () {\r\n      let params = {}\r\n\r\n      if (typeof(this.queryParams) === 'function') {\r\n        params = this.queryParams(this.sortOrder, this.currentPage, this.perPage)\r\n        return typeof(params) === 'object' ? params : {}\r\n      }\r\n\r\n      params[this.queryParams.sort] = this.getSortParam()\r\n      params[this.queryParams.page] = this.currentPage\r\n      params[this.queryParams.perPage] = this.perPage\r\n\r\n      return params\r\n    },\r\n\r\n    getSortParam () {\r\n      if (!this.sortOrder || this.sortOrder.field == '') {\r\n        return ''\r\n      }\r\n\r\n      if (typeof this.sortParams === 'function') {\r\n        return this.sortParams(this.sortOrder)\r\n      }\r\n\r\n      return this.getDefaultSortParam()\r\n    },\r\n\r\n    getDefaultSortParam () {\r\n      return this.sortOrder.map( (item) => `${item.sortField}|${item.direction}`).join(',')\r\n    },\r\n\r\n    getAppendParams (params) {\r\n      for (let x in this.appendParams) {\r\n        params[x] = this.appendParams[x]\r\n      }\r\n\r\n      return params\r\n    },\r\n\r\n    isSortable (field) {\r\n      return field.sortField !== null\r\n    },\r\n\r\n    currentSortOrderPosition (field) {\r\n      if ( ! this.isSortable(field)) {\r\n        return false\r\n      }\r\n\r\n      for (let i = 0; i < this.sortOrder.length; i++) {\r\n        if (this.fieldIsInSortOrderPosition(field, i)) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    fieldIsInSortOrderPosition (field, i) {\r\n      return this.sortOrder[i].field === field.name && this.sortOrder[i].sortField === field.sortField\r\n    },\r\n\r\n    orderBy (field, event) {\r\n      if ( ! this.isSortable(field) ) return\r\n\r\n      let key = this.multiSortKey.toLowerCase() + 'Key'\r\n\r\n      if (this.multiSort && event[key]) { //adding column to multisort\r\n        this.multiColumnSort(field)\r\n      } else {\r\n        //no multisort, or resetting sort\r\n        this.singleColumnSort(field)\r\n      }\r\n\r\n      this.currentPage = this.firstPage    // reset page index\r\n      if (this.apiMode || this.dataManager) {\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    addSortColumn (field, direction) {\r\n      this.sortOrder.push({\r\n        field: field.name,\r\n        sortField: field.sortField,\r\n        direction: 'asc'\r\n      });\r\n    },\r\n\r\n    removeSortColumn (index) {\r\n      this.sortOrder.splice(index, 1);\r\n    },\r\n\r\n    setSortColumnDirection (index, direction) {\r\n      this.sortOrder[index].direction = direction\r\n    },\r\n\r\n    multiColumnSort (field) {\r\n      let i = this.currentSortOrderPosition(field);\r\n\r\n      if (i === false) { //this field is not in the sort array yet\r\n        this.addSortColumn(field, 'asc')\r\n      } else { //this field is in the sort array, now we change its state\r\n        if (this.sortOrder[i].direction === 'asc') {\r\n          // switch direction\r\n          this.setSortColumnDirection(i, 'desc')\r\n        } else {\r\n          this.removeSortColumn(i)\r\n        }\r\n      }\r\n    },\r\n\r\n    singleColumnSort (field) {\r\n      if (this.sortOrder.length === 0) {\r\n        // this.clearSortOrder()\r\n        this.addSortColumn(field, 'asc')\r\n        return\r\n      }\r\n\r\n      this.sortOrder.splice(1); //removes additional columns\r\n\r\n      if (this.fieldIsInSortOrderPosition(field, 0)) {\r\n        // change sort direction\r\n        this.sortOrder[0].direction = this.sortOrder[0].direction === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        // reset sort direction\r\n        this.sortOrder[0].direction = 'asc'\r\n      }\r\n      this.sortOrder[0].field = field.name\r\n      this.sortOrder[0].sortField = field.sortField\r\n    },\r\n\r\n    clearSortOrder () {\r\n      this.sortOrder = []\r\n    },\r\n\r\n    hasFormatter (item) {\r\n      return typeof(item.formatter) === 'function'\r\n    },\r\n\r\n    callFormatter (field, item) {\r\n      if ( ! this.hasFormatter(field)) return\r\n\r\n      if (typeof(field.formatter) === 'function') {\r\n       return field.formatter(this.getObjectValue(item, field.name), this)\r\n      }\r\n    },\r\n\r\n    getObjectValue (object, path, defaultValue) {\r\n      defaultValue = (typeof defaultValue === 'undefined') ? null : defaultValue\r\n\r\n      let obj = object\r\n      if (path.trim() != '') {\r\n        let keys = path.split('.')\r\n        keys.forEach( (key) => {\r\n          if (obj !== null && typeof obj[key] !== 'undefined' && obj[key] !== null) {\r\n            obj = obj[key]\r\n          } else {\r\n            obj = defaultValue\r\n            return\r\n          }\r\n        })\r\n      }\r\n      return obj\r\n    },\r\n\r\n    selectId (key) {\r\n      if ( ! this.isSelectedRow(key)) {\r\n        this.selectedTo.push(key)\r\n      }\r\n    },\r\n\r\n    unselectId (key) {\r\n      this.selectedTo = this.selectedTo.filter( (item) => {\r\n        return item !== key\r\n      })\r\n    },\r\n\r\n    isSelectedRow (key) {\r\n      return this.selectedTo.indexOf(key) >= 0\r\n    },\r\n\r\n    clearSelectedValues () {\r\n      this.selectedTo = []\r\n    },\r\n\r\n    gotoPreviousPage () {\r\n      if (this.currentPage > this.firstPage) {\r\n        this.currentPage--\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    gotoNextPage () {\r\n      if (this.currentPage < this.tablePagination.last_page) {\r\n        this.currentPage++\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    gotoPage (page) {\r\n      if (page != this.currentPage && (page >= this.firstPage && page <= this.tablePagination.last_page)) {\r\n        this.currentPage = page\r\n        this.loadData()\r\n      }\r\n    },\r\n\r\n    isVisibleDetailRow (rowId) {\r\n      return this.visibleDetailRows.indexOf( rowId ) >= 0\r\n    },\r\n\r\n    showDetailRow (rowId) {\r\n      if (!this.isVisibleDetailRow(rowId)) {\r\n        this.visibleDetailRows.push(rowId)\r\n      }\r\n      this.checkScrollbarVisibility()\r\n    },\r\n\r\n    hideDetailRow (rowId) {\r\n      if (this.isVisibleDetailRow(rowId)) {\r\n        this.visibleDetailRows.splice(\r\n          this.visibleDetailRows.indexOf(rowId),\r\n          1\r\n        )\r\n        this.updateHeader()\r\n      }\r\n    },\r\n\r\n    toggleDetailRow (rowId) {\r\n      if (this.isVisibleDetailRow(rowId)) {\r\n        this.hideDetailRow(rowId)\r\n      } else {\r\n        this.showDetailRow(rowId)\r\n      }\r\n    },\r\n\r\n    showField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = true\r\n    },\r\n\r\n    hideField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = false\r\n    },\r\n\r\n    toggleField (index) {\r\n      if (index < 0 || index > this.tableFields.length) return\r\n\r\n      this.tableFields[index].visible = ! this.tableFields[index].visible\r\n    },\r\n\r\n    makePagination (total = null, perPage = null, currentPage = null) {\r\n      let pagination = {}\r\n      total = total === null ? 0 : total\r\n      perPage = perPage === null ? this.perPage : perPage\r\n      currentPage = currentPage === null ? this.currentPage : currentPage\r\n\r\n      return {\r\n        'total': total,\r\n        'per_page': perPage,\r\n        'current_page': currentPage,\r\n        'last_page': Math.ceil(total / perPage) || 0,\r\n        'next_page_url': '',\r\n        'prev_page_url': '',\r\n        'from': (currentPage -1) * perPage +1,\r\n        'to': Math.min(currentPage * perPage, total)\r\n      }\r\n    },\r\n\r\n    normalizeSortOrder () {\r\n      this.sortOrder.forEach( (item) => {\r\n        item.sortField = item.sortField || item.field\r\n      })\r\n    },\r\n\r\n    handleDataMode () {\r\n      // data is array\r\n      if (this.data !== null && Array.isArray(this.data)) {\r\n        this.setData(this.data)\r\n        return\r\n      }\r\n\r\n      // data must be an object, check if dataManager is present\r\n      if (this.dataManager) {\r\n        this.callDataManager()\r\n      } else {\r\n        this.setData(this.data)\r\n      }\r\n    },\r\n\r\n    callDataManager () {\r\n      const result = this.dataManager(this.sortOrder, this.makePagination())\r\n\r\n      if (this.isPromiseObject(result)) {\r\n        result.then(data => this.setData(data))\r\n      } else {\r\n        this.setData(result)\r\n      }\r\n    },\r\n\r\n    isObject (unknown) {\r\n      return typeof(unknown) === \"object\" && unknown !== null\r\n    },\r\n\r\n    isPromiseObject (unknown) {\r\n      return this.isObject(unknown) && typeof(unknown.then) === \"function\"\r\n    },\r\n\r\n    onRowClass (dataItem, index) {\r\n      if (typeof(this.rowClass) === 'function') {\r\n        return this.rowClass(dataItem, index)\r\n      }\r\n\r\n      return this.rowClass\r\n    },\r\n\r\n    onDetailRowClass (dataItem, index) {\r\n      if (typeof(this.detailRowClass) === 'function') {\r\n        return this.detailRowClass(dataItem, index)\r\n      }\r\n\r\n      return this.detailRowClass\r\n    },\r\n\r\n    onRowClicked (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-clicked', { data: dataItem, index: dataIndex, event: event })\r\n      return true\r\n    },\r\n\r\n    onRowDoubleClicked (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-dblclicked', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onDetailRowClick (dataItem, dataIndex, event) {\r\n      this.fireEvent('detail-row-clicked', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onCellClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-clicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onCellDoubleClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-dblclicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onCellRightClicked (dataItem, dataIndex, field, event) {\r\n      this.fireEvent('cell-rightclicked', { data: dataItem, index: dataIndex, field: field, event: event })\r\n    },\r\n\r\n    onMouseOver (dataItem, dataIndex, event) {\r\n      this.fireEvent('row-mouseover', { data: dataItem, index: dataIndex, event: event })\r\n    },\r\n\r\n    onFieldEvent (type, payload) {\r\n      this.fireEvent('field-event', type, payload, this)\r\n    },\r\n\r\n    onHeaderEvent (type, payload) {\r\n      this.fireEvent('header-event', type, payload, this)\r\n    },\r\n\r\n    onCheckboxToggled (isChecked, fieldName, dataItem) {\r\n      let idColumn = this.trackBy\r\n\r\n      if (dataItem[idColumn] === undefined) {\r\n        this.warn('checkbox field: The \"'+this.trackBy+'\" field does not exist! Make sure the field you specify in \"track-by\" prop does exist.')\r\n        return\r\n      }\r\n\r\n      let key = dataItem[idColumn]\r\n      if (isChecked) {\r\n        this.selectId(key)\r\n      } else {\r\n        this.unselectId(key)\r\n      }\r\n\r\n      this.fireEvent('checkbox-toggled', isChecked, fieldName)\r\n    },\r\n\r\n    onCheckboxToggledAll (isChecked) {\r\n      let idColumn = this.trackBy\r\n\r\n      if (isChecked) {\r\n        this.tableData.forEach( (dataItem) => {\r\n          this.selectId(dataItem[idColumn])\r\n        })\r\n      } else {\r\n        this.tableData.forEach( (dataItem) => {\r\n          this.unselectId(dataItem[idColumn])\r\n        })\r\n      }\r\n\r\n      this.fireEvent('checkbox-toggled-all', isChecked)\r\n    },\r\n\r\n    /*\r\n     * API for externals\r\n     */\r\n    changePage (page) {\r\n      if (page === 'prev') {\r\n        this.gotoPreviousPage()\r\n      } else if (page === 'next') {\r\n        this.gotoNextPage()\r\n      } else {\r\n        this.gotoPage(page)\r\n      }\r\n    },\r\n\r\n    reload () {\r\n      return this.loadData()\r\n    },\r\n\r\n    refresh () {\r\n      this.currentPage = this.firstPage\r\n      return this.loadData()\r\n    },\r\n\r\n    resetData () {\r\n      this.tableData = null\r\n      this.tablePagination = null\r\n      this.fireEvent('data-reset')\r\n    },\r\n  }, // end: methods\r\n}\r\n</script>\r\n\r\n<style>\r\n  [v-cloak] {\r\n    display: none;\r\n  }\r\n  table.vuetable.fixed-header {\r\n    table-layout: fixed;\r\n  }\r\n  .vuetable th.sortable:hover {\r\n    color: #2185d0;\r\n    cursor: pointer;\r\n  }\r\n  .vuetable-head-wrapper {\r\n    overflow-x: hidden;\r\n  }\r\n  .vuetable-head-wrapper table.vuetable {\r\n    border-bottom-left-radius: 0px;\r\n    border-bottom-right-radius: 0px;\r\n  }\r\n  .vuetable-body-wrapper.fixed-header {\r\n    position:relative;\r\n    overflow-y:auto;\r\n  }\r\n  .vuetable-body-wrapper table.vuetable.fixed-header {\r\n    border-top:none !important;\r\n    margin-top:0 !important;\r\n    border-top-left-radius: 0px;\r\n    border-top-right-radius: 0px;\r\n  }\r\n  .vuetable-empty-result {\r\n    text-align: center;\r\n  }\r\n</style>\r\n"]}]}