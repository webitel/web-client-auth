{"remainingRequest":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/utils/notification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/utils/notification.vue","mtime":1579076425497},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport eventBus from '@/utils/eventBus';\n\nexport default {\n    name: 'notification',\n    data() {\n        return {\n            messages: [],\n        }\n    },\n    mounted() {\n        eventBus.$on('notificationInfo', (info) => {\n            this.showInfo(info);\n        });\n        eventBus.$on('notificationError', (error) => {\n            this.showError(error);\n        });\n    },\n    methods: {\n        showInfo(info) {\n            this.messages.unshift({info});\n            setTimeout(() => {\n                this.messages.splice(this.findMessageInArray(info), 1);\n            }, 4000);\n        },\n\n        showError(error) {\n            this.messages.unshift({error});\n            setTimeout(() => {\n                this.messages.splice(this.findMessageInArray(error), 1);\n            }, 4000);\n        },\n\n        close(message) {\n            this.messages.splice(this.findMessageInArray(message), 1);\n        },\n\n        findMessageInArray(message) {\n            return this.messages.findIndex(item => {\n                return item.message === message;\n            });\n        }\n    }\n};\n",{"version":3,"sources":["notification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"notification.vue","sourceRoot":"src/components/utils","sourcesContent":["<template>\n    <aside class=\"alert-wrap\">\n        <div class=\"alert\"\n             v-for=\"message in messages\"\n             @click=\"close(message.info || message.error)\"\n        >\n            <i\n                    class=\"icon-icon_notification notification-info\"\n                    v-if=\"message.info\"\n            ></i>\n            <i\n                    class=\"icon-icon_notification notification-error\"\n                    v-if=\"message.error\"\n            ></i>\n            <div class=\"alert__text\">\n                {{message.info || message.error}}\n            </div>\n            <i\n                    class=\"icon-icon_close icon-action\" @click=\"close(message.info || message.error)\"\n            ></i>\n        </div>\n    </aside>\n</template>\n\n<script>\n    import eventBus from '@/utils/eventBus';\n\n    export default {\n        name: 'notification',\n        data() {\n            return {\n                messages: [],\n            }\n        },\n        mounted() {\n            eventBus.$on('notificationInfo', (info) => {\n                this.showInfo(info);\n            });\n            eventBus.$on('notificationError', (error) => {\n                this.showError(error);\n            });\n        },\n        methods: {\n            showInfo(info) {\n                this.messages.unshift({info});\n                setTimeout(() => {\n                    this.messages.splice(this.findMessageInArray(info), 1);\n                }, 4000);\n            },\n\n            showError(error) {\n                this.messages.unshift({error});\n                setTimeout(() => {\n                    this.messages.splice(this.findMessageInArray(error), 1);\n                }, 4000);\n            },\n\n            close(message) {\n                this.messages.splice(this.findMessageInArray(message), 1);\n            },\n\n            findMessageInArray(message) {\n                return this.messages.findIndex(item => {\n                    return item.message === message;\n                });\n            }\n        }\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    .alert-wrap {\n        position: fixed;\n        top: 5px;\n        right: 5px;\n        z-index: 1000;\n    }\n\n    .alert {\n        @extend .typo-notification-text;\n        @extend .box-shadow;\n\n        position: relative;\n        display: flex;\n        align-items: center;\n        min-width: 430px;\n        max-width: 850px;\n        padding: 24px 30px;\n        margin-top: 7px;\n        color: #000;\n        background: #fff;\n        border-radius: $border-radius;\n        cursor: pointer;\n        z-index: 100;\n\n        .notification-info:before {\n            color: $true-color;\n        }\n\n        .notification-error:before {\n            color: $false-color;\n        }\n\n        .icon-icon_close {\n            position: absolute;\n            top: 50%;\n            right: 24px;\n            transform: translateY(-50%);\n            transition: $transition;\n            cursor: pointer;\n        }\n    }\n\n    .alert__text {\n        margin: 0 24px 0 40px;\n    }\n</style>\n"]}]}