{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/api/routing/gateways/gateways.js","dependencies":[{"path":"/home/dev/work/client-auth/src/api/routing/gateways/gateways.js","mtime":1580975733102},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport instance from \"../../instance\";\nimport sanitizer from \"../../utils/sanitizer\";\nimport eventBus from \"../../../utils/eventBus\";\nimport deepCopy from 'deep-copy';\nvar BASE_URL = '/sip/gateways';\nvar fieldsToSend = ['name', 'proxy', 'id', 'host', 'ipacl', 'account', 'account', 'username', 'expires', 'account', 'registrar', 'register', 'password', 'schema', 'enable'];\nexport function getGatewayList() {\n  return _getGatewayList.apply(this, arguments);\n}\n\nfunction _getGatewayList() {\n  _getGatewayList = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4() {\n    var page,\n        size,\n        search,\n        defaultObject,\n        url,\n        response,\n        _args4 = arguments;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            page = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 0;\n            size = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 10;\n            search = _args4.length > 2 ? _args4[2] : undefined;\n            defaultObject = {\n              // default object prototype, to merge response with it to get all fields\n              _isSelected: false,\n              name: '',\n              proxy: '',\n              enable: false,\n              id: 0\n            }; // let url = `${BASE_URL}?page=${page}size=${size}`;\n\n            url = \"\".concat(BASE_URL, \"?size=\").concat(size);\n            if (search) url += \"&name=\".concat(search, \"*\");\n            _context4.prev = 6;\n            _context4.next = 9;\n            return instance.get(url);\n\n          case 9:\n            response = _context4.sent;\n\n            if (!response.items) {\n              _context4.next = 12;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", response.items.map(function (item) {\n              return _objectSpread({}, defaultObject, {}, item);\n            }));\n\n          case 12:\n            return _context4.abrupt(\"return\", []);\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](6);\n            throw _context4.t0;\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[6, 15]]);\n  }));\n  return _getGatewayList.apply(this, arguments);\n}\n\n;\nexport function getGateway(_x) {\n  return _getGateway.apply(this, arguments);\n}\n\nfunction _getGateway() {\n  _getGateway = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(id) {\n    var url, response;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            url = BASE_URL + '/' + id;\n            _context5.prev = 1;\n            _context5.next = 4;\n            return instance.get(url);\n\n          case 4:\n            response = _context5.sent;\n\n            if (!response.item.register) {\n              _context5.next = 9;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", coerceRegisterResponse(response));\n\n          case 9:\n            return _context5.abrupt(\"return\", coerceTrunkingResponse(response));\n\n          case 10:\n            _context5.next = 15;\n            break;\n\n          case 12:\n            _context5.prev = 12;\n            _context5.t0 = _context5[\"catch\"](1);\n            throw _context5.t0;\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[1, 12]]);\n  }));\n  return _getGateway.apply(this, arguments);\n}\n\n;\nexport var addGateway =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(item) {\n    var itemCopy, response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            itemCopy = deepCopy(item);\n            if (itemCopy.register) itemCopy.account = itemCopy.accountName + '@' + (item.domain || item.registrar);\n            sanitizer(itemCopy, fieldsToSend);\n            Object.keys(itemCopy).forEach(function (key) {\n              if (!itemCopy[key]) delete itemCopy[key];\n            });\n            _context.prev = 4;\n            _context.next = 7;\n            return instance.post(BASE_URL, {\n              item: itemCopy\n            });\n\n          case 7:\n            response = _context.sent;\n            eventBus.$emit('notificationInfo', 'Sucessfully added');\n            return _context.abrupt(\"return\", response.id);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](4);\n            throw _context.t0;\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 12]]);\n  }));\n\n  return function addGateway(_x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateGateway =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(id, item) {\n    var url, itemCopy, response;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = BASE_URL + '/' + id;\n            itemCopy = deepCopy(item);\n\n            if (!itemCopy.register) {\n              itemCopy.ipacl.forEach(function (acl) {\n                if (!acl.port) delete acl.port;\n              });\n            }\n\n            sanitizer(itemCopy, fieldsToSend);\n            _context2.prev = 4;\n            _context2.next = 7;\n            return instance.put(url, {\n              changes: itemCopy\n            });\n\n          case 7:\n            response = _context2.sent;\n            eventBus.$emit('notificationInfo', 'Sucessfully updated');\n            return _context2.abrupt(\"return\", response.id);\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](4);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 12]]);\n  }));\n\n  return function updateGateway(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deleteGateway =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(id) {\n    var url;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            url = BASE_URL + '/' + id;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return instance.delete(url);\n\n          case 4:\n            _context3.next = 9;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](1);\n            throw _context3.t0;\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 6]]);\n  }));\n\n  return function deleteGateway(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar coerceTrunkingResponse = function coerceTrunkingResponse(response) {\n  var defaultObject = {\n    name: '',\n    proxy: '',\n    description: '',\n    id: 0,\n    host: '',\n    schema: {},\n    _dirty: false,\n    enable: true\n  };\n  var defaultIPacl = {\n    ip: '',\n    proto: 'any',\n    port: null\n  };\n  response = _objectSpread({}, defaultObject, {}, response.item);\n  response.ipacl.forEach(function (acl, index) {\n    response.ipacl[index] = _objectSpread({}, defaultIPacl, {}, acl);\n  });\n  return response;\n};\n\nvar coerceRegisterResponse = function coerceRegisterResponse(response) {\n  var defaultObject = {\n    // default object prototype, to merge response with it to get all fields\n    name: '',\n    registrar: '',\n    expires: 600,\n    password: '',\n    description: '',\n    username: '',\n    accountName: '',\n    proxy: '',\n    domain: '',\n    schema: {},\n    id: 0,\n    _dirty: false,\n    enable: true\n  };\n\n  var result = _objectSpread({}, defaultObject, {}, response.item);\n\n  result.account = result.account.replace('sip:', '');\n  result.registrar = result.registrar.replace('sip:', '');\n  var account = result.account.split('@');\n  result.accountName = account[0];\n  result.domain = account[1];\n  delete result.account;\n  if (!result.proxy) result.proxy = result.registrar;\n  return result;\n};",{"version":3,"sources":["/home/dev/work/client-auth/src/api/routing/gateways/gateways.js"],"names":["instance","sanitizer","eventBus","deepCopy","BASE_URL","fieldsToSend","getGatewayList","page","size","search","defaultObject","_isSelected","name","proxy","enable","id","url","get","response","items","map","item","getGateway","register","coerceRegisterResponse","coerceTrunkingResponse","addGateway","itemCopy","account","accountName","domain","registrar","Object","keys","forEach","key","post","$emit","updateGateway","ipacl","acl","port","put","changes","deleteGateway","delete","description","host","schema","_dirty","defaultIPacl","ip","proto","index","expires","password","username","result","replace","split"],"mappings":"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","sourcesContent":["import instance from '../../instance';\nimport sanitizer from \"../../utils/sanitizer\";\nimport eventBus from \"../../../utils/eventBus\";\nimport deepCopy from 'deep-copy';\n\nconst BASE_URL = '/sip/gateways';\nconst fieldsToSend = ['name', 'proxy', 'id', 'host', 'ipacl', 'account', 'account', 'username', 'expires',\n    'account', 'registrar', 'register', 'password', 'schema', 'enable'];\n\nexport async function getGatewayList(page = 0, size = 10, search) {\n    const defaultObject = {  // default object prototype, to merge response with it to get all fields\n        _isSelected: false,\n        name: '',\n        proxy: '',\n        enable: false,\n        id: 0\n    };\n\n    // let url = `${BASE_URL}?page=${page}size=${size}`;\n    let url = `${BASE_URL}?size=${size}`;\n    if (search) url += `&name=${search}*`;\n\n    try {\n        let response = await instance.get(url);\n        if (response.items) {\n            return response.items.map(item => {\n                return {...defaultObject, ...item};\n            });\n        }\n        return [];\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport async function getGateway(id) {\n    const url = BASE_URL + '/' + id;\n\n    try {\n        let response = await instance.get(url);\n        if (response.item.register) {\n            return coerceRegisterResponse(response);\n        } else {\n            return coerceTrunkingResponse(response);\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const addGateway = async (item) => {\n    let itemCopy = deepCopy(item);\n    if (itemCopy.register) itemCopy.account = itemCopy.accountName + '@' + (item.domain || item.registrar);\n    sanitizer(itemCopy, fieldsToSend);\n    Object.keys(itemCopy).forEach(key => {\n        if (!itemCopy[key]) delete itemCopy[key];\n    });\n\n    try {\n        const response = await instance.post(BASE_URL, {item: itemCopy});\n        eventBus.$emit('notificationInfo', 'Sucessfully added');\n        return response.id;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport const updateGateway = async (id, item) => {\n    const url = BASE_URL + '/' + id;\n    let itemCopy = deepCopy(item);\n\n    if (!itemCopy.register) {\n        itemCopy.ipacl.forEach(acl => {\n            if (!acl.port) delete acl.port\n        });\n    }\n\n    sanitizer(itemCopy, fieldsToSend);\n\n    try {\n        const response = await instance.put(url, {changes: itemCopy});\n        eventBus.$emit('notificationInfo', 'Sucessfully updated');\n        return response.id;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport const deleteGateway = async (id) => {\n    const url = BASE_URL + '/' + id;\n\n    try {\n        await instance.delete(url);\n    } catch (err) {\n        throw err;\n    }\n};\n\nconst coerceTrunkingResponse = (response) => {\n    const defaultObject = {\n        name: '',\n        proxy: '',\n        description: '',\n        id: 0,\n        host: '',\n        schema: {},\n        _dirty: false,\n        enable: true,\n    };\n\n    const defaultIPacl = {\n        ip: '',\n        proto: 'any',\n        port: null,\n    };\n\n    response = {...defaultObject, ...response.item};\n    response.ipacl.forEach((acl, index) => {\n        response.ipacl[index] = {...defaultIPacl, ...acl};\n    });\n\n    return response;\n};\n\nconst coerceRegisterResponse = (response) => {\n    const defaultObject = {  // default object prototype, to merge response with it to get all fields\n        name: '',\n        registrar: '',\n        expires: 600,\n        password: '',\n        description: '',\n        username: '',\n        accountName: '',\n        proxy: '',\n        domain: '',\n        schema: {},\n        id: 0,\n        _dirty: false,\n        enable: true,\n    };\n\n    let result = {...defaultObject, ...response.item};\n\n    result.account = result.account.replace('sip:', '');\n    result.registrar = result.registrar.replace('sip:', '');\n\n    const account = result.account.split('@');\n    result.accountName = account[0];\n    result.domain = account[1];\n    delete result.account;\n\n    if (!result.proxy) result.proxy = result.registrar;\n\n    return result;\n};"]}]}