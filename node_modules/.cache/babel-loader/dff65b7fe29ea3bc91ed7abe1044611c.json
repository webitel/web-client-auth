{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/store/modules/routing/dialplan/dialplan.js","dependencies":[{"path":"/home/dev/work/client-auth/src/store/modules/routing/dialplan/dialplan.js","mtime":1581514018259},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport proxy from \"../../../../utils/editProxy\";\nimport { addDialplan, deleteDialplan, getDialplan, getDialplanList, moveDialplan, patchDialplan, updateDialplan } from \"../../../../api/routing/dialplan/dialplan\";\n\nvar defaultState = function defaultState() {\n  return {\n    itemId: 0,\n    itemInstance: {\n      name: 'dialplan name',\n      schema: {},\n      pattern: '{*}?',\n      description: 'description'\n    }\n  };\n};\n\nvar state = _objectSpread({\n  dataList: [],\n  size: '10',\n  search: '',\n  page: 0,\n  isNextPage: true\n}, defaultState());\n\nvar getters = {};\nvar actions = {\n  GET_LIST: function () {\n    var _GET_LIST = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getDialplanList(state.page, state.size, state.search);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function GET_LIST() {\n      return _GET_LIST.apply(this, arguments);\n    }\n\n    return GET_LIST;\n  }(),\n  GET_ITEM: function () {\n    var _GET_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getDialplan(state.itemId);\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function GET_ITEM() {\n      return _GET_ITEM.apply(this, arguments);\n    }\n\n    return GET_ITEM;\n  }(),\n  POST_ITEM: function () {\n    var _POST_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3() {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return addDialplan(state.itemInstance);\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function POST_ITEM() {\n      return _POST_ITEM.apply(this, arguments);\n    }\n\n    return POST_ITEM;\n  }(),\n  PATCH_ITEM: function () {\n    var _PATCH_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(context, _ref) {\n      var id, changes;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              id = _ref.id, changes = _ref.changes;\n              _context4.next = 3;\n              return patchDialplan(id, changes);\n\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function PATCH_ITEM(_x, _x2) {\n      return _PATCH_ITEM.apply(this, arguments);\n    }\n\n    return PATCH_ITEM;\n  }(),\n  UPD_ITEM: function () {\n    var _UPD_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee5() {\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return updateDialplan(state.itemId, state.itemInstance);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function UPD_ITEM() {\n      return _UPD_ITEM.apply(this, arguments);\n    }\n\n    return UPD_ITEM;\n  }(),\n  DELETE_ITEM: function () {\n    var _DELETE_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee6(context, id) {\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return deleteDialplan(id);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function DELETE_ITEM(_x3, _x4) {\n      return _DELETE_ITEM.apply(this, arguments);\n    }\n\n    return DELETE_ITEM;\n  }(),\n  SET_ITEM_ID: function SET_ITEM_ID(context, id) {\n    if (id !== 'new') context.commit('SET_ITEM_ID', id);\n  },\n  LOAD_DATA_LIST: function () {\n    var _LOAD_DATA_LIST = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee7(context) {\n      var response;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return context.dispatch('GET_LIST');\n\n            case 2:\n              response = _context7.sent;\n              context.dispatch('RESET_ITEM_STATE');\n              context.commit('SET_DATA_LIST', response);\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function LOAD_DATA_LIST(_x5) {\n      return _LOAD_DATA_LIST.apply(this, arguments);\n    }\n\n    return LOAD_DATA_LIST;\n  }(),\n  SET_SIZE: function SET_SIZE(context, size) {\n    context.commit('SET_SIZE', size);\n  },\n  SET_SEARCH: function SET_SEARCH(context, search) {\n    context.commit('SET_SEARCH', search);\n  },\n  NEXT_PAGE: function NEXT_PAGE(context) {\n    if (state.isNextPage) {\n      context.commit('INCREMENT_PAGE');\n      context.dispatch('LOAD_DATA_LIST');\n    }\n  },\n  PREV_PAGE: function PREV_PAGE(context) {\n    if (state.page) {\n      context.commit('DECREMENT_PAGE');\n      context.dispatch('LOAD_DATA_LIST');\n    }\n  },\n  TOGGLE_ITEM_PROPERTY: function () {\n    var _TOGGLE_ITEM_PROPERTY = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee8(context, index) {\n      var changes;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return context.commit('TOGGLE_ITEM_PROPERTY', index);\n\n            case 2:\n              changes = {\n                disabled: state.dataList[index].disabled\n              };\n\n              try {\n                context.dispatch('PATCH_ITEM', {\n                  id: state.dataList[index].id,\n                  changes: changes\n                });\n              } catch (_unused) {\n                context.dispatch('LOAD_DATA_LIST');\n              }\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function TOGGLE_ITEM_PROPERTY(_x6, _x7) {\n      return _TOGGLE_ITEM_PROPERTY.apply(this, arguments);\n    }\n\n    return TOGGLE_ITEM_PROPERTY;\n  }(),\n  SWAP_ROWS: function () {\n    var _SWAP_ROWS = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee9(context, _ref2) {\n      var fromId, toId;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              fromId = _ref2.fromId, toId = _ref2.toId;\n              _context9.prev = 1;\n              _context9.next = 4;\n              return moveDialplan(fromId, toId);\n\n            case 4:\n              _context9.next = 9;\n              break;\n\n            case 6:\n              _context9.prev = 6;\n              _context9.t0 = _context9[\"catch\"](1);\n              context.dispatch('LOAD_DATA_LIST');\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[1, 6]]);\n    }));\n\n    function SWAP_ROWS(_x8, _x9) {\n      return _SWAP_ROWS.apply(this, arguments);\n    }\n\n    return SWAP_ROWS;\n  }(),\n  LOAD_ITEM: function () {\n    var _LOAD_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee10(context) {\n      var item;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!state.itemId) {\n                _context10.next = 5;\n                break;\n              }\n\n              _context10.next = 3;\n              return context.dispatch('GET_ITEM');\n\n            case 3:\n              item = _context10.sent;\n              context.commit('SET_ITEM', proxy(item));\n\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function LOAD_ITEM(_x10) {\n      return _LOAD_ITEM.apply(this, arguments);\n    }\n\n    return LOAD_ITEM;\n  }(),\n  SET_ITEM_PROPERTY: function SET_ITEM_PROPERTY(context, payload) {\n    context.commit('SET_ITEM_PROPERTY', payload);\n  },\n  ADD_ITEM: function () {\n    var _ADD_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee11(context) {\n      var id;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (state.itemId) {\n                _context11.next = 6;\n                break;\n              }\n\n              _context11.next = 3;\n              return context.dispatch('POST_ITEM');\n\n            case 3:\n              id = _context11.sent;\n              context.dispatch('SET_ITEM_ID', id);\n              context.dispatch('LOAD_ITEM');\n\n            case 6:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function ADD_ITEM(_x11) {\n      return _ADD_ITEM.apply(this, arguments);\n    }\n\n    return ADD_ITEM;\n  }(),\n  UPDATE_ITEM: function () {\n    var _UPDATE_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee12(context) {\n      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!state.itemInstance._dirty) {\n                _context12.next = 4;\n                break;\n              }\n\n              _context12.next = 3;\n              return context.dispatch('UPD_ITEM');\n\n            case 3:\n              context.dispatch('LOAD_ITEM');\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function UPDATE_ITEM(_x12) {\n      return _UPDATE_ITEM.apply(this, arguments);\n    }\n\n    return UPDATE_ITEM;\n  }(),\n  REMOVE_ITEM: function () {\n    var _REMOVE_ITEM = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee13(context, index) {\n      var id;\n      return regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              id = state.dataList[index].id;\n              context.commit('REMOVE_ITEM', index);\n              _context13.prev = 2;\n              _context13.next = 5;\n              return context.dispatch('DELETE_ITEM', id);\n\n            case 5:\n              _context13.next = 9;\n              break;\n\n            case 7:\n              _context13.prev = 7;\n              _context13.t0 = _context13[\"catch\"](2);\n\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[2, 7]]);\n    }));\n\n    function REMOVE_ITEM(_x13, _x14) {\n      return _REMOVE_ITEM.apply(this, arguments);\n    }\n\n    return REMOVE_ITEM;\n  }(),\n  RESET_ITEM_STATE: function () {\n    var _RESET_ITEM_STATE = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee14(context) {\n      return regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              context.commit('RESET_ITEM_STATE');\n\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    function RESET_ITEM_STATE(_x15) {\n      return _RESET_ITEM_STATE.apply(this, arguments);\n    }\n\n    return RESET_ITEM_STATE;\n  }()\n};\nvar mutations = {\n  SET_ITEM_ID: function SET_ITEM_ID(state, id) {\n    state.itemId = id;\n  },\n  SET_DATA_LIST: function SET_DATA_LIST(state, list) {\n    state.dataList = list;\n  },\n  SET_SIZE: function SET_SIZE(context, size) {\n    state.size = size;\n  },\n  SET_SEARCH: function SET_SEARCH(context, search) {\n    state.search = search;\n  },\n  INCREMENT_PAGE: function INCREMENT_PAGE(state) {\n    state.page++;\n  },\n  DECREMENT_PAGE: function DECREMENT_PAGE(state) {\n    state.page--;\n  },\n  TOGGLE_ITEM_PROPERTY: function TOGGLE_ITEM_PROPERTY(state, index) {\n    state.dataList[index].disabled = !state.dataList[index].disabled;\n  },\n  SWAP_ROWS: function SWAP_ROWS(state, _ref3) {\n    var fromId = _ref3.fromId,\n        toId = _ref3.toId;\n    var fromIndex = state.dataList.findIndex(function (item) {\n      return item.id === fromId;\n    });\n    var toIndex = state.dataList.findIndex(function (item) {\n      return item.id === toId;\n    });\n    var buffer = state.dataList[fromIndex];\n    state.dataList.splice(fromIndex, 1, state.dataList[toIndex]);\n    state.dataList.splice(toIndex, 1, buffer);\n  },\n  SET_ITEM_PROPERTY: function SET_ITEM_PROPERTY(state, _ref4) {\n    var prop = _ref4.prop,\n        value = _ref4.value;\n    state.itemInstance[prop] = value;\n  },\n  SET_ITEM: function SET_ITEM(state, item) {\n    state.itemInstance = item;\n  },\n  REMOVE_ITEM: function REMOVE_ITEM(state, index) {\n    state.dataList.splice(index, 1);\n  },\n  RESET_ITEM_STATE: function RESET_ITEM_STATE(state) {\n    Object.assign(state, defaultState());\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/home/dev/work/client-auth/src/store/modules/routing/dialplan/dialplan.js"],"names":["proxy","addDialplan","deleteDialplan","getDialplan","getDialplanList","moveDialplan","patchDialplan","updateDialplan","defaultState","itemId","itemInstance","name","schema","pattern","description","state","dataList","size","search","page","isNextPage","getters","actions","GET_LIST","GET_ITEM","POST_ITEM","PATCH_ITEM","context","id","changes","UPD_ITEM","DELETE_ITEM","SET_ITEM_ID","commit","LOAD_DATA_LIST","dispatch","response","SET_SIZE","SET_SEARCH","NEXT_PAGE","PREV_PAGE","TOGGLE_ITEM_PROPERTY","index","disabled","SWAP_ROWS","fromId","toId","LOAD_ITEM","item","SET_ITEM_PROPERTY","payload","ADD_ITEM","UPDATE_ITEM","_dirty","REMOVE_ITEM","RESET_ITEM_STATE","mutations","SET_DATA_LIST","list","INCREMENT_PAGE","DECREMENT_PAGE","fromIndex","findIndex","toIndex","buffer","splice","prop","value","SET_ITEM","Object","assign","namespaced"],"mappings":"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","sourcesContent":["import proxy from '../../../../utils/editProxy';\nimport {\n    addDialplan,\n    deleteDialplan,\n    getDialplan,\n    getDialplanList, moveDialplan, patchDialplan,\n    updateDialplan\n} from \"../../../../api/routing/dialplan/dialplan\";\n\nconst defaultState = () => {\n    return {\n        itemId: 0,\n        itemInstance: {\n            name: 'dialplan name',\n            schema: {},\n            pattern: '{*}?',\n            description: 'description',\n        },\n    }\n};\n\nconst state = {\n    dataList: [],\n    size: '10',\n    search: '',\n    page: 0,\n    isNextPage: true,\n    ...defaultState()\n};\n\nconst getters = {};\n\nconst actions = {\n    GET_LIST: async () => {\n        return await getDialplanList(state.page, state.size, state.search);\n    },\n\n    GET_ITEM: async () => {\n        return await getDialplan(state.itemId);\n    },\n\n    POST_ITEM: async () => {\n        return await addDialplan(state.itemInstance);\n    },\n\n    PATCH_ITEM: async (context, {id, changes}) => {\n        return await patchDialplan(id, changes);\n    },\n\n    UPD_ITEM: async () => {\n        await updateDialplan(state.itemId, state.itemInstance);\n    },\n\n    DELETE_ITEM: async (context, id) => {\n        await deleteDialplan(id);\n    },\n\n    SET_ITEM_ID: (context, id) => {\n        if (id !== 'new') context.commit('SET_ITEM_ID', id);\n    },\n\n    LOAD_DATA_LIST: async (context) => {\n        const response = await context.dispatch('GET_LIST');\n        context.dispatch('RESET_ITEM_STATE');\n        context.commit('SET_DATA_LIST', response);\n    },\n\n    SET_SIZE: (context, size) => {\n        context.commit('SET_SIZE', size);\n    },\n\n    SET_SEARCH: (context, search) => {\n        context.commit('SET_SEARCH', search);\n    },\n\n    NEXT_PAGE: (context) => {\n        if (state.isNextPage) {\n            context.commit('INCREMENT_PAGE');\n            context.dispatch('LOAD_DATA_LIST');\n        }\n    },\n\n    PREV_PAGE: (context) => {\n        if (state.page) {\n            context.commit('DECREMENT_PAGE');\n            context.dispatch('LOAD_DATA_LIST');\n        }\n    },\n\n    TOGGLE_ITEM_PROPERTY: async (context, index) => {\n        await context.commit('TOGGLE_ITEM_PROPERTY', index);\n        let changes = {disabled: state.dataList[index].disabled};\n        try {\n            context.dispatch('PATCH_ITEM', {id: state.dataList[index].id, changes});\n        } catch {\n            context.dispatch('LOAD_DATA_LIST');\n        }\n    },\n\n    SWAP_ROWS: async (context, {fromId, toId}) => {\n        // on-frontend swap commented\n        // because sortable reinitialization triggers on each dataList change\n        // but UI changes anyway\n        // await context.commit('SWAP_ROWS', {fromId, toId});\n        try {\n            await moveDialplan(fromId, toId);\n        } catch {\n            context.dispatch('LOAD_DATA_LIST');\n        }\n    },\n\n    LOAD_ITEM: async (context) => {\n        if (state.itemId) {\n            const item = await context.dispatch('GET_ITEM');\n            context.commit('SET_ITEM', proxy(item));\n        }\n    },\n\n    SET_ITEM_PROPERTY: (context, payload) => {\n        context.commit('SET_ITEM_PROPERTY', payload);\n    },\n\n    ADD_ITEM: async (context) => {\n        if (!state.itemId) {\n            const id = await context.dispatch('POST_ITEM');\n            context.dispatch('SET_ITEM_ID', id);\n            context.dispatch('LOAD_ITEM');\n        }\n    },\n\n    UPDATE_ITEM: async (context) => {\n        if (state.itemInstance._dirty) {\n            await context.dispatch('UPD_ITEM');\n            context.dispatch('LOAD_ITEM');\n        }\n    },\n\n    REMOVE_ITEM: async (context, index) => {\n        const id = state.dataList[index].id;\n        context.commit('REMOVE_ITEM', index);\n        try {\n            await context.dispatch('DELETE_ITEM', id);\n        } catch {\n        }\n    },\n\n    RESET_ITEM_STATE: async (context) => {\n        context.commit('RESET_ITEM_STATE');\n    },\n};\n\nconst mutations = {\n    SET_ITEM_ID: (state, id) => {\n        state.itemId = id;\n    },\n\n    SET_DATA_LIST: (state, list) => {\n        state.dataList = list;\n    },\n\n    SET_SIZE: (context, size) => {\n        state.size = size;\n    },\n\n    SET_SEARCH: (context, search) => {\n        state.search = search;\n    },\n\n    INCREMENT_PAGE: (state) => {\n        state.page++;\n    },\n\n    DECREMENT_PAGE: (state) => {\n        state.page--;\n    },\n\n    TOGGLE_ITEM_PROPERTY: (state, index) => {\n        state.dataList[index].disabled = !state.dataList[index].disabled;\n    },\n\n    SWAP_ROWS: (state, {fromId, toId}) => {\n        const fromIndex = state.dataList.findIndex(item => item.id === fromId);\n        const toIndex = state.dataList.findIndex(item => item.id === toId);\n        const buffer =  state.dataList[fromIndex];\n        state.dataList.splice(fromIndex, 1, state.dataList[toIndex]);\n        state.dataList.splice(toIndex, 1, buffer);\n    },\n\n    SET_ITEM_PROPERTY: (state, {prop, value}) => {\n        state.itemInstance[prop] = value;\n    },\n\n    SET_ITEM: (state, item) => {\n        state.itemInstance = item;\n    },\n\n    REMOVE_ITEM: (state, index) => {\n        state.dataList.splice(index, 1);\n    },\n\n    RESET_ITEM_STATE: (state) => {\n        Object.assign(state, defaultState());\n    },\n};\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations,\n};\n"]}]}