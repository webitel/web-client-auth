{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/utils/timepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/utils/timepicker.vue","mtime":1578657456758},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport requiredLabelMixin from '@/mixins/requiredLabelMixin';\nimport dropdownSelect from \"./dropdown-select\";\nimport validationMessage from \"./validation-message\";\nexport default {\n  name: \"timepicker\",\n  mixins: [requiredLabelMixin],\n  components: {\n    dropdownSelect: dropdownSelect,\n    validationMessage: validationMessage\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'hh:mm:ss'\n    },\n    label: {\n      type: String\n    },\n    value: {\n      type: [Number, Object],\n      required: true\n    },\n    hourOptions: {\n      type: Array\n    },\n    minOptions: {\n      type: Array,\n      default: function _default() {\n        return ['00', '15', '30', '45'];\n      }\n    },\n    secOptions: {\n      type: Array,\n      default: function _default() {\n        return ['00', '15', '30', '45'];\n      }\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    v: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      time: {\n        hour: 0,\n        min: 0,\n        sec: 0\n      },\n      timeVisibility: {\n        hour: false,\n        min: false,\n        sec: false\n      }\n    };\n  },\n  watch: {\n    value: function value() {\n      this.updateComponentTime();\n    }\n  },\n  mounted: function mounted() {\n    this.setVisibleFormat();\n    this.updateComponentTime();\n  },\n  computed: {\n    computeHours: function computeHours() {\n      return this.addZero(this.time.hour);\n    },\n    computeMins: function computeMins() {\n      return this.addZero(this.time.min);\n    },\n    computeSecs: function computeSecs() {\n      return this.addZero(this.time.sec);\n    },\n    initHourList: function initHourList() {\n      var hourList = [];\n\n      for (var i = 0; i < 24; i++) {\n        hourList.push(this.addZero(i));\n      }\n\n      return hourList;\n    }\n  },\n  methods: {\n    updateComponentTime: function updateComponentTime() {\n      var value = this.value;\n      if (!this.timeVisibility.sec) value = value * 60;\n      if (!this.timeVisibility.min) value = value * 60;\n      this.time.sec = value % 60;\n      this.time.min = Math.floor(value / 60 % 60);\n      this.time.hour = Math.floor(value / 3600);\n    },\n    setTime: function setTime() {\n      var value = this.time.hour * 3600 + this.time.min * 60 + this.time.sec;\n      if (!this.format.includes('s')) value = value / 60;\n      if (!this.format.includes('m')) value = value / 60;\n      this.$emit('input', value);\n    },\n    setHours: function setHours(value) {\n      this.time.hour = +value;\n      this.setTime();\n    },\n    setMins: function setMins(value) {\n      this.time.min = +value;\n      this.setTime();\n    },\n    setSecs: function setSecs(value) {\n      this.time.sec = +value;\n      this.setTime();\n    },\n    setVisibleFormat: function setVisibleFormat() {\n      if (this.format.includes('h')) {\n        this.timeVisibility.hour = true;\n      }\n\n      if (this.format.includes('m')) {\n        this.timeVisibility.min = true;\n      }\n\n      if (this.format.includes('s')) {\n        this.timeVisibility.sec = true;\n      }\n    },\n    addZero: function addZero(value) {\n      return value - 0 < 10 ? '0' + value : value + '';\n    }\n  }\n};",{"version":3,"sources":["timepicker.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"timepicker\">\n        <div class=\"label\"\n             v-if=\"label\"\n             :class=\"{'invalid': v && v.$error}\n        \">\n            {{computeRequiredLabel}}\n        </div>\n        <form class=\"timepicker__form\">\n            <dropdown-select\n                    v-if=\"timeVisibility.hour\"\n                    :value=\"computeHours\"\n                    :options=\"hourOptions || initHourList\"\n                    taggable\n                    @input=\"setHours\"\n            ></dropdown-select>\n            <span\n                    class=\"delimiter\"\n                    v-if=\"timeVisibility.hour\"\n            >:</span>\n            <dropdown-select\n                    v-if=\"timeVisibility.min\"\n                    :value=\"computeMins\"\n                    :options=\"minOptions\"\n                    taggable\n                    @input=\"setMins\"\n            ></dropdown-select>\n            <span\n                    class=\"delimiter\"\n                    v-if=\"timeVisibility.min && timeVisibility.sec\"\n            >:</span>\n            <dropdown-select\n                    v-if=\"timeVisibility.sec\"\n                    :value=\"computeSecs\"\n                    :options=\"secOptions\"\n                    taggable\n                    @input=\"setSecs\"\n            ></dropdown-select>\n        </form>\n        <validation-message\n                v-if=\"v\"\n                :v=\"v\"\n        />\n    </div>\n</template>\n\n<script>\n    import requiredLabelMixin from '@/mixins/requiredLabelMixin';\n    import dropdownSelect from './dropdown-select';\n    import validationMessage from './validation-message';\n\n    export default {\n        name: \"timepicker\",\n        mixins: [requiredLabelMixin],\n        components: {\n            dropdownSelect,\n            validationMessage\n        },\n\n        props: {\n            format: {\n                type: String,\n                default: 'hh:mm:ss'\n            },\n            label: {\n                type: String,\n            },\n            value: {\n                type: [Number, Object],\n                required: true\n            },\n            hourOptions: {\n                type: Array,\n            },\n            minOptions: {\n                type: Array,\n                default: () => ['00', '15', '30', '45']\n            },\n            secOptions: {\n                type: Array,\n                default: () => ['00', '15', '30', '45']\n            },\n            required: {\n                type: Boolean,\n                default: false\n            },\n            v: {\n                type: Object,\n            },\n        },\n\n        data() {\n            return {\n                time: {\n                    hour: 0,\n                    min: 0,\n                    sec: 0,\n                },\n                timeVisibility: {\n                    hour: false,\n                    min: false,\n                    sec: false,\n                }\n            }\n        },\n\n        watch: {\n            value: function () {\n                this.updateComponentTime();\n            }\n        },\n\n        mounted() {\n            this.setVisibleFormat();\n            this.updateComponentTime();\n        },\n\n        computed: {\n            computeHours() {\n                return this.addZero(this.time.hour);\n            },\n\n            computeMins() {\n                return this.addZero(this.time.min);\n            },\n\n            computeSecs() {\n                return this.addZero(this.time.sec);\n            },\n\n            initHourList() {\n                const hourList = [];\n                for (let i = 0; i < 24; i++) {\n                    hourList.push(this.addZero(i));\n                }\n                return hourList;\n            },\n        },\n\n        methods: {\n            updateComponentTime() {\n                let value = this.value;\n                if (!this.timeVisibility.sec) value = value * 60;\n                if (!this.timeVisibility.min) value = value * 60;\n                this.time.sec = value % 60;\n                this.time.min = Math.floor(value / 60 % 60);\n                this.time.hour = Math.floor(value / 3600);\n            },\n\n            setTime() {\n                let value = this.time.hour*3600 + this.time.min*60 + this.time.sec;\n                if (!this.format.includes('s')) value = value / 60;\n                if (!this.format.includes('m')) value = value / 60;\n                this.$emit('input', value);\n            },\n\n            setHours(value) {\n                this.time.hour = +value;\n                this.setTime();\n            },\n\n            setMins(value) {\n                this.time.min = +value;\n                this.setTime();\n            },\n\n            setSecs(value) {\n                this.time.sec = +value;\n                this.setTime();\n            },\n\n            setVisibleFormat() {\n                if (this.format.includes('h')) {\n                    this.timeVisibility.hour = true;\n                }\n                if (this.format.includes('m')) {\n                    this.timeVisibility.min = true;\n                }\n                if (this.format.includes('s')) {\n                    this.timeVisibility.sec = true;\n                }\n            },\n\n            addZero(value) {\n                return (value - 0 < 10) ? '0' + value : value + '';\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    .timepicker {\n        @extend .typo-input-label;\n        overflow: visible !important;\n    }\n\n    .timepicker__form {\n        display: flex;\n        align-items: center;\n\n        .delimiter {\n            margin: 0 7px;\n        }\n\n        .dropdown-select {\n            min-width: 90px;\n            width: 90px;\n\n            .label, .input__details {\n                display: none;\n            }\n\n            .vs--open .vs__selected {\n                display: none;\n            }\n        }\n\n        .vs__dropdown-menu {\n            min-width: 75px;\n        }\n    }\n</style>"],"sourceRoot":"src/components/utils"}]}