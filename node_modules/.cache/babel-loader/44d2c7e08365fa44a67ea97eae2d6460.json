{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/routing/sip-gateways/opened-register-sip-gateway.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/routing/sip-gateways/opened-register-sip-gateway.vue","mtime":1578657456694},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport openedRegisterSipGatewayGeneral from \"./opened-register-sip-gateway-general\";\nimport openedRegisterSipGatewayConfiguration from \"./opened-register-sip-gateway-configuration\";\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport { gatewayHostValidator } from '@/utils/validators';\nimport { required, minValue, maxValue, numeric } from 'vuelidate/lib/validators';\nimport { mapActions, mapState } from \"vuex\";\nexport default {\n  name: 'opened-register-sip-gateway',\n  mixins: [editComponentMixin],\n  components: {\n    openedRegisterSipGatewayGeneral: openedRegisterSipGatewayGeneral,\n    openedRegisterSipGatewayConfiguration: openedRegisterSipGatewayConfiguration\n  },\n  data: function data() {\n    return {\n      tabs: [{\n        text: this.$t('objects.general'),\n        value: 'general'\n      }, {\n        text: this.$tc('objects.routing.configuration'),\n        value: 'configuration'\n      }]\n    };\n  },\n  // by vuelidate\n  validations: {\n    itemInstance: {\n      name: {\n        required: required\n      },\n      registrar: {\n        gatewayHostValidator: gatewayHostValidator,\n        required: required\n      },\n      domain: {\n        gatewayHostValidator: gatewayHostValidator\n      },\n      proxy: {\n        gatewayHostValidator: gatewayHostValidator\n      },\n      accountName: {\n        required: required\n      },\n      expires: {\n        numeric: numeric,\n        minValue: minValue(32),\n        maxValue: maxValue(3600),\n        required: required\n      },\n      password: {\n        required: required\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.$route.params.id;\n    this.loadItem();\n  },\n  computed: _objectSpread({}, mapState('routing/gateways', {\n    itemInstance: function itemInstance(state) {\n      return state.itemInstance;\n    }\n  }), {\n    id: {\n      get: function get() {\n        return this.$store.state.routing.gateways.itemId;\n      },\n      set: function set(value) {\n        this.setId(value);\n      }\n    }\n  }),\n  methods: _objectSpread({}, mapActions('routing/gateways', {\n    setId: 'SET_ITEM_ID',\n    loadItem: 'LOAD_REGISTER_ITEM',\n    addItem: 'ADD_ITEM',\n    updateItem: 'UPDATE_ITEM'\n  }))\n};",{"version":3,"sources":["opened-register-sip-gateway.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,+BAAA;AACA,OAAA,qCAAA;AAEA,OAAA,kBAAA,MAAA,6BAAA;AACA,SAAA,oBAAA,QAAA,oBAAA;AACA,SAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,QAAA,0BAAA;AAEA,SAAA,UAAA,EAAA,QAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,6BADA;AAEA,EAAA,MAAA,EAAA,CAAA,kBAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,+BAAA,EAAA,+BADA;AAEA,IAAA,qCAAA,EAAA;AAFA,GAHA;AAOA,EAAA,IAPA,kBAOA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,CACA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CADA;AAEA,QAAA,KAAA,EAAA;AAFA,OADA,EAKA;AACA,QAAA,IAAA,EAAA,KAAA,GAAA,CAAA,+BAAA,CADA;AAEA,QAAA,KAAA,EAAA;AAFA,OALA;AADA,KAAA;AAYA,GApBA;AAsBA;AACA,EAAA,WAAA,EAAA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA;AACA,QAAA,QAAA,EAAA;AADA,OADA;AAIA,MAAA,SAAA,EAAA;AACA,QAAA,oBAAA,EAAA,oBADA;AAEA,QAAA,QAAA,EAAA;AAFA,OAJA;AAQA,MAAA,MAAA,EAAA;AACA,QAAA,oBAAA,EAAA;AADA,OARA;AAWA,MAAA,KAAA,EAAA;AACA,QAAA,oBAAA,EAAA;AADA,OAXA;AAcA,MAAA,WAAA,EAAA;AACA,QAAA,QAAA,EAAA;AADA,OAdA;AAiBA,MAAA,OAAA,EAAA;AACA,QAAA,OAAA,EAAA,OADA;AAEA,QAAA,QAAA,EAAA,QAAA,CAAA,EAAA,CAFA;AAGA,QAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OAjBA;AAuBA,MAAA,QAAA,EAAA;AACA,QAAA,QAAA,EAAA;AADA;AAvBA;AADA,GAvBA;AAqDA,EAAA,OArDA,qBAqDA;AACA,SAAA,EAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AACA,SAAA,QAAA;AACA,GAxDA;AA0DA,EAAA,QAAA,oBACA,QAAA,CAAA,kBAAA,EAAA;AACA,IAAA,YAAA,EAAA,sBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,YAAA;AAAA;AADA,GAAA,CADA;AAIA,IAAA,EAAA,EAAA;AACA,MAAA,GADA,iBACA;AAAA,eAAA,KAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA;AAAA,OADA;AAEA,MAAA,GAFA,eAEA,KAFA,EAEA;AAAA,aAAA,KAAA,CAAA,KAAA;AAAA;AAFA;AAJA,IA1DA;AAoEA,EAAA,OAAA,oBACA,UAAA,CAAA,kBAAA,EAAA;AACA,IAAA,KAAA,EAAA,aADA;AAEA,IAAA,QAAA,EAAA,oBAFA;AAGA,IAAA,OAAA,EAAA,UAHA;AAIA,IAAA,UAAA,EAAA;AAJA,GAAA,CADA;AApEA,CAAA","sourcesContent":["<template>\n    <div>\n        <object-header\n                :primaryText=\"computePrimaryText\"\n                :primaryAction=\"save\"\n                :primaryDisabled=\"computeDisabled\"\n                close\n        > {{$t('objects.routing.gateways.registerGateway')}} |\n            {{computeTitle}}\n        </object-header>\n\n        <tabs-component\n                :tabs=\"tabs\"\n                :root=\"$options.name\"\n        >\n            <template slot=\"component\" slot-scope=\"props\">\n                <component\n                        class=\"tabs-inner-component\"\n                        :is=\"props.currentTab\"\n                        :v=\"$v\"\n                ></component>\n            </template>\n        </tabs-component>\n    </div>\n</template>\n\n<script>\n    import openedRegisterSipGatewayGeneral from './opened-register-sip-gateway-general';\n    import openedRegisterSipGatewayConfiguration from './opened-register-sip-gateway-configuration';\n\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {gatewayHostValidator} from '@/utils/validators';\n    import {required, minValue, maxValue, numeric} from 'vuelidate/lib/validators';\n\n    import {mapActions, mapState} from \"vuex\";\n\n    export default {\n        name: 'opened-register-sip-gateway',\n        mixins: [editComponentMixin],\n        components: {\n            openedRegisterSipGatewayGeneral,\n            openedRegisterSipGatewayConfiguration\n        },\n        data() {\n            return {\n                tabs: [\n                    {\n                        text: this.$t('objects.general'),\n                        value: 'general',\n                    },\n                    {\n                        text: this.$tc('objects.routing.configuration'),\n                        value: 'configuration',\n                    },\n                ],\n            };\n        },\n\n        // by vuelidate\n        validations: {\n            itemInstance: {\n                name: {\n                    required\n                },\n                registrar: {\n                    gatewayHostValidator,\n                    required\n                },\n                domain: {\n                    gatewayHostValidator\n                },\n                proxy: {\n                    gatewayHostValidator\n                },\n                accountName: {\n                    required\n                },\n                expires: {\n                    numeric,\n                    minValue: minValue(32),\n                    maxValue: maxValue(3600),\n                    required\n                },\n                password: {\n                    required\n                },\n            }\n        },\n\n        mounted() {\n            this.id = this.$route.params.id;\n            this.loadItem();\n        },\n\n        computed: {\n            ...mapState('routing/gateways', {\n                itemInstance: state => state.itemInstance,\n            }),\n            id: {\n                get() {return this.$store.state.routing.gateways.itemId},\n                set(value) {this.setId(value)}\n            }\n        },\n\n        methods: {\n            ...mapActions('routing/gateways', {\n                setId: 'SET_ITEM_ID',\n                loadItem: 'LOAD_REGISTER_ITEM',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n            }),\n        },\n    };\n</script>"],"sourceRoot":"src/components/routing/sip-gateways"}]}