{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/api/utils/caseConverters.js","dependencies":[{"path":"/home/dev/work/client-auth/src/api/utils/caseConverters.js","mtime":1580989904863},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nexport var objSnakeToCamel = function objSnakeToCamel(obj) {\n  var newObj = {};\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (value) {\n      if (_typeof(value) === 'object') {\n        return objSnakeToCamel(value);\n      }\n\n      return value;\n    });\n  } else {\n    Object.keys(obj).forEach(function (oldKey) {\n      if (oldKey === 'schema') {\n        newObj[oldKey] = obj[oldKey];\n      } else {\n        var newKey = snakeToCamel(oldKey);\n        var value = obj[oldKey];\n\n        if (Array.isArray(value) || value !== null && value.constructor === Object) {\n          value = objSnakeToCamel(value);\n        }\n\n        newObj[newKey] = value;\n      }\n    });\n  }\n\n  return newObj;\n};\nexport var objCamelToSnake = function objCamelToSnake(obj) {\n  var newObj = {};\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (value) {\n      if (_typeof(value) === 'object') {\n        return objCamelToSnake(value);\n      } else {\n        return value;\n      }\n    });\n  } else {\n    Object.keys(obj).forEach(function (oldKey) {\n      if (oldKey === 'schema') {\n        newObj[oldKey] = obj[oldKey];\n      } else {\n        var newKey = camelToSnake(oldKey);\n        var value = obj[oldKey];\n\n        if (Array.isArray(value) || value !== null && value.constructor === Object) {\n          value = objCamelToSnake(value);\n        }\n\n        newObj[newKey] = value;\n      }\n    });\n  }\n\n  return newObj;\n};\n\nvar snakeToCamel = function snakeToCamel(str) {\n  return str.replace(/([-_][a-z])/g, function (group) {\n    return group.toUpperCase().replace('-', '').replace('_', '');\n  });\n};\n\nvar camelToSnake = function camelToSnake(str) {\n  return str.replace(/([A-Z])/g, function (group) {\n    return group.toLowerCase().replace('', '_');\n  });\n};",{"version":3,"sources":["/home/dev/work/client-auth/src/api/utils/caseConverters.js"],"names":["objSnakeToCamel","obj","newObj","Array","isArray","map","value","Object","keys","forEach","oldKey","newKey","snakeToCamel","constructor","objCamelToSnake","camelToSnake","str","replace","group","toUpperCase","toLowerCase"],"mappings":"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","sourcesContent":["export const objSnakeToCamel = (obj) => {\n    let newObj = {};\n    if (Array.isArray(obj)) {\n        return obj.map(value => {\n            if (typeof value === 'object') {\n                return objSnakeToCamel(value);\n            }\n            return value;\n        });\n    } else {\n        Object.keys(obj).forEach(oldKey => {\n            if(oldKey === 'schema') {\n                newObj[oldKey] = obj[oldKey];\n            } else {\n                const newKey = snakeToCamel(oldKey);\n                let value = obj[oldKey];\n                if (Array.isArray(value) || (value !== null && value.constructor === Object)) {\n                    value = objSnakeToCamel(value);\n                }\n                newObj[newKey] = value;\n            }\n        });\n    }\n    return newObj;\n};\n\nexport const objCamelToSnake = (obj) => {\n    let newObj = {};\n    if (Array.isArray(obj)) {\n        return obj.map(value => {\n            if (typeof value === 'object') {\n                return objCamelToSnake(value);\n            } else {\n                return value;\n            }\n        });\n    } else {\n        Object.keys(obj).forEach(oldKey => {\n            if(oldKey === 'schema') {\n                newObj[oldKey] = obj[oldKey];\n            } else {\n                const newKey = camelToSnake(oldKey);\n                let value = obj[oldKey];\n                if (Array.isArray(value) || (value !== null && value.constructor === Object)) {\n                    value = objCamelToSnake(value);\n                }\n                newObj[newKey] = value;\n            }\n        });\n    }\n    return newObj;\n};\n\nconst snakeToCamel = (str) => str.replace(\n    /([-_][a-z])/g,\n    (group) => group.toUpperCase()\n        .replace('-', '')\n        .replace('_', '')\n);\n\nconst camelToSnake = (str) => str.replace(\n    /([A-Z])/g,\n    (group) => group.toLowerCase()\n        .replace('', '_')\n);"]}]}