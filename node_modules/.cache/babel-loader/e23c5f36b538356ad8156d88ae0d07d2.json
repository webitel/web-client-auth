{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/contact-center/members/opened-queue-member-communication-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/contact-center/members/opened-queue-member-communication-popup.vue","mtime":1581326785283},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport popup from '@/components/utils/popup';\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport { required, numeric, minValue, maxValue } from 'vuelidate/lib/validators';\nimport { mapActions, mapState } from \"vuex\";\nimport { getResourceList } from \"../../../api/contact-center/resources/resources\";\nimport { getCommunicationsList } from \"../../../api/lookups/communications/communications\";\nexport default {\n  name: \"opened-agent-skills-popup\",\n  mixins: [editComponentMixin],\n  components: {\n    popup: popup\n  },\n  data: function data() {\n    return {\n      dropdownOptionsTypeList: [],\n      dropdownOptionsResList: []\n    };\n  },\n  validations: {\n    itemInstance: {\n      destination: {\n        required: required\n      },\n      type: {\n        required: required\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.loadItem();\n    this.loadDropdownOptionsTypeList();\n    this.loadDropdownOptionsResList();\n  },\n  computed: _objectSpread({}, mapState('ccenter/queues/members/communications', {\n    id: function id(state) {\n      return state.itemId;\n    },\n    itemInstance: function itemInstance(state) {\n      return state.itemInstance;\n    }\n  }), {\n    destination: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.destination;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'destination',\n          value: value\n        });\n      }\n    },\n    display: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.display;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'display',\n          value: value\n        });\n      }\n    },\n    priority: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.priority;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'priority',\n          value: value\n        });\n      }\n    },\n    type: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.type;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'type',\n          value: value\n        });\n      }\n    },\n    resource: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.resource;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'resource',\n          value: value\n        });\n      }\n    },\n    description: {\n      get: function get() {\n        return this.$store.state.ccenter.queues.members.communications.itemInstance.description;\n      },\n      set: function set(value) {\n        this.setItemProp({\n          prop: 'description',\n          value: value\n        });\n      }\n    },\n    computePrimaryText: function computePrimaryText() {\n      // if it's a new item\n      // OR any fields have changed\n      return !(typeof this.id === 'number') || this.itemInstance._dirty ? this.$t('objects.save') : this.$t('objects.saved');\n    },\n    computeDisabled: function computeDisabled() {\n      // if there's a validation problem\n      // OR it's edit and any fields haven't changed\n      return this.checkValidations() || !this.itemInstance._dirty && typeof this.id === 'number';\n    }\n  }),\n  methods: _objectSpread({\n    save: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var invalid;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                invalid = this.checkValidations(); // console.log(!invalid, !(typeof this.id === 'number'));\n\n                if (invalid) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.prev = 2;\n\n                if (typeof this.id === 'number') {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.addItem();\n\n              case 6:\n                _context.next = 10;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return this.updateItem();\n\n              case 10:\n                this.$emit('close');\n                _context.next = 15;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 13]]);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    loadDropdownOptionsTypeList: function () {\n      var _loadDropdownOptionsTypeList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(search) {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getCommunicationsList(0, 10, search);\n\n              case 2:\n                response = _context2.sent;\n                this.dropdownOptionsTypeList = response.map(function (item) {\n                  return {\n                    name: item.name,\n                    id: item.id\n                  };\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadDropdownOptionsTypeList(_x) {\n        return _loadDropdownOptionsTypeList.apply(this, arguments);\n      }\n\n      return loadDropdownOptionsTypeList;\n    }(),\n    loadDropdownOptionsResList: function () {\n      var _loadDropdownOptionsResList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(search) {\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return getResourceList(0, 10, search);\n\n              case 2:\n                response = _context3.sent;\n                this.dropdownOptionsResList = response.map(function (item) {\n                  return {\n                    name: item.name,\n                    id: item.id\n                  };\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadDropdownOptionsResList(_x2) {\n        return _loadDropdownOptionsResList.apply(this, arguments);\n      }\n\n      return loadDropdownOptionsResList;\n    }()\n  }, mapActions('ccenter/queues/members/communications', {\n    setItemProp: 'SET_ITEM_PROPERTY',\n    addItem: 'ADD_ITEM',\n    updateItem: 'UPDATE_ITEM',\n    loadItem: 'LOAD_ITEM'\n  }))\n};",{"version":3,"sources":["opened-queue-member-communication-popup.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <popup\n            :title=\"$t('objects.lookups.communications.addCommunication')\"\n            :primaryAction=\"save\"\n            :primaryText=\"computePrimaryText\"\n            :primaryDisabled=\"computeDisabled\"\n            @close=\"$emit('close')\"\n            overflow\n    >\n        <form class=\"object-input-grid\">\n            <form-input\n                    v-model=\"destination\"\n                    :v=\"$v.itemInstance.destination\"\n                    :label=\"$t('objects.ccenter.members.destination')\"\n                    required\n            ></form-input>\n\n            <form-input\n                    v-model=\"display\"\n                    :label=\"$t('objects.ccenter.members.display')\"\n            ></form-input>\n\n            <form-input\n                    v-model=\"priority\"\n                    :label=\"$t('objects.ccenter.members.priority')\"\n            ></form-input>\n\n            <dropdown-select\n                    v-model.trim=\"type\"\n                    :v=\"$v.itemInstance.type\"\n                    :options=\"dropdownOptionsTypeList\"\n                    :label=\"$tc('objects.lookups.communications.communications', 1)\"\n                    @search=\"loadDropdownOptionsTypeList\"\n                    required\n            ></dropdown-select>\n\n            <dropdown-select\n                    v-model.trim=\"resource\"\n                    :options=\"dropdownOptionsResList\"\n                    :label=\"$tc('objects.ccenter.res.res', 1)\"\n                    @search=\"loadDropdownOptionsResList\"\n            ></dropdown-select>\n\n            <form-input\n                    v-model=\"description\"\n                    :label=\"$t('objects.description')\"\n                    textarea\n            ></form-input>\n        </form>\n    </popup>\n</template>\n\n<script>\n    import popup from '@/components/utils/popup';\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {required, numeric, minValue, maxValue} from 'vuelidate/lib/validators';\n    import {mapActions, mapState} from \"vuex\";\n    import {getResourceList} from \"../../../api/contact-center/resources/resources\";\n    import {getCommunicationsList} from \"../../../api/lookups/communications/communications\";\n\n    export default {\n        name: \"opened-agent-skills-popup\",\n        mixins: [editComponentMixin],\n        components: {\n            popup,\n        },\n        data() {\n            return {\n                dropdownOptionsTypeList: [],\n                dropdownOptionsResList: [],\n            }\n        },\n\n        validations: {\n            itemInstance: {\n                destination: {\n                    required\n                },\n                type: {\n                    required\n                },\n            }\n        },\n\n        mounted() {\n            this.loadItem();\n            this.loadDropdownOptionsTypeList();\n            this.loadDropdownOptionsResList();\n        },\n\n        computed: {\n            ...mapState('ccenter/queues/members/communications', {\n                id: state => state.itemId,\n                itemInstance: state => state.itemInstance\n            }),\n            destination: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.destination\n                },\n                set(value) {\n                    this.setItemProp({prop: 'destination', value})\n                }\n            },\n            display: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.display\n                },\n                set(value) {\n                    this.setItemProp({prop: 'display', value})\n                }\n            },\n            priority: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.priority\n                },\n                set(value) {\n                    this.setItemProp({prop: 'priority', value})\n                }\n            },\n            type: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.type\n                },\n                set(value) {\n                    this.setItemProp({prop: 'type', value})\n                }\n            },\n            resource: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.resource\n                },\n                set(value) {\n                    this.setItemProp({prop: 'resource', value})\n                }\n            },\n            description: {\n                get() {\n                    return this.$store.state.ccenter.queues.members.communications.itemInstance.description\n                },\n                set(value) {\n                    this.setItemProp({prop: 'description', value})\n                }\n            },\n\n                computePrimaryText() {\n                    // if it's a new item\n                    // OR any fields have changed\n                    return !(typeof this.id === 'number') || this.itemInstance._dirty ?\n                        this.$t('objects.save') : this.$t('objects.saved');\n                },\n\n                computeDisabled() {\n                    // if there's a validation problem\n                    // OR it's edit and any fields haven't changed\n                    return this.checkValidations() ||\n                        (!this.itemInstance._dirty && (typeof this.id === 'number'));\n                },\n        },\n\n        methods: {\n            async save() {\n                const invalid = this.checkValidations();\n                // console.log(!invalid, !(typeof this.id === 'number'));\n                if (!invalid) {\n                    try {\n                        !(typeof this.id === 'number') ? await this.addItem() : await this.updateItem();\n                        this.$emit('close');\n                    } catch {\n                    }\n                }\n            },\n\n            async loadDropdownOptionsTypeList(search) {\n                const response = await getCommunicationsList(0, 10, search);\n                this.dropdownOptionsTypeList = response.map(item => {\n                    return {\n                        name: item.name,\n                        id: item.id,\n                    }\n                });\n            },\n\n            async loadDropdownOptionsResList(search) {\n                const response = await getResourceList(0, 10, search);\n                this.dropdownOptionsResList = response.map(item => {\n                    return {\n                        name: item.name,\n                        id: item.id,\n                    }\n                });\n            },\n\n            ...mapActions('ccenter/queues/members/communications', {\n                setItemProp: 'SET_ITEM_PROPERTY',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n                loadItem: 'LOAD_ITEM',\n            }),\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/contact-center/members"}]}