{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/node_modules/vuetable-2/src/components/VuetableFieldCheckboxMixin.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/node_modules/vuetable-2/src/components/VuetableFieldCheckboxMixin.vue","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport VuetableFieldMixin from \"./VuetableFieldMixin.vue\";\nexport default {\n  mixins: [VuetableFieldMixin],\n  methods: {\n    toggleCheckbox: function toggleCheckbox(dataItem, event) {\n      this.vuetable.onCheckboxToggled(event.target.checked, this.rowField.name, dataItem);\n    },\n    toggleAllCheckbox: function toggleAllCheckbox(event) {\n      this.vuetable.onCheckboxToggledAll(event.target.checked);\n    },\n    isSelected: function isSelected(rowData) {\n      return this.vuetable.isSelectedRow(rowData[this.vuetable.trackBy]);\n    },\n    isAllItemsInCurrentPageSelected: function isAllItemsInCurrentPageSelected() {\n      var _this = this;\n\n      if (!this.vuetable.tableData) return;\n      var idColumn = this.vuetable.trackBy;\n      var checkbox = this.$el.querySelector('input[type=checkbox]');\n      var selected = this.vuetable.tableData.filter(function (item) {\n        return _this.vuetable.isSelectedRow(item[idColumn]);\n      }); // count == 0, clear the checkbox\n\n      if (selected.length <= 0) {\n        checkbox.indeterminate = false;\n        return false;\n      } // count > 0 and count < perPage, set checkbox state to 'indeterminate'\n      else if (selected.length < this.vuetable.perPage) {\n          checkbox.indeterminate = true;\n          return true;\n        } // count == perPage, set checkbox state to 'checked'\n        else {\n            checkbox.indeterminate = false;\n            return true;\n          }\n    }\n  }\n};",{"version":3,"sources":["VuetableFieldCheckboxMixin.vue"],"names":[],"mappings":";AACA,OAAA,kBAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,kBAAA,CADA;AAGA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,QADA,EACA,KADA,EACA;AACA,WAAA,QAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA,EAAA,KAAA,QAAA,CAAA,IAAA,EAAA,QAAA;AACA,KAHA;AAKA,IAAA,iBALA,6BAKA,KALA,EAKA;AACA,WAAA,QAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA;AACA,KAPA;AASA,IAAA,UATA,sBASA,OATA,EASA;AACA,aAAA,KAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,KAAA,QAAA,CAAA,OAAA,CAAA,CAAA;AACA,KAXA;AAaA,IAAA,+BAbA,6CAaA;AAAA;;AACA,UAAA,CAAA,KAAA,QAAA,CAAA,SAAA,EAAA;AAEA,UAAA,QAAA,GAAA,KAAA,QAAA,CAAA,OAAA;AACA,UAAA,QAAA,GAAA,KAAA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA;AACA,UAAA,QAAA,GAAA,KAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,KAAA,CAAA,QAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CALA,CAOA;;AACA,UAAA,QAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,QAAA,QAAA,CAAA,aAAA,GAAA,KAAA;AACA,eAAA,KAAA;AACA,OAHA,CAIA;AAJA,WAKA,IAAA,QAAA,CAAA,MAAA,GAAA,KAAA,QAAA,CAAA,OAAA,EAAA;AACA,UAAA,QAAA,CAAA,aAAA,GAAA,IAAA;AACA,iBAAA,IAAA;AACA,SAHA,CAIA;AAJA,aAKA;AACA,YAAA,QAAA,CAAA,aAAA,GAAA,KAAA;AACA,mBAAA,IAAA;AACA;AACA;AAnCA;AAHA,CAAA","sourcesContent":["<script>\r\nimport VuetableFieldMixin from './VuetableFieldMixin.vue'\r\n\r\nexport default {\r\n  mixins: [VuetableFieldMixin],\r\n\r\n  methods: {\r\n    toggleCheckbox(dataItem, event) {\r\n      this.vuetable.onCheckboxToggled(event.target.checked, this.rowField.name, dataItem)\r\n    },\r\n\r\n    toggleAllCheckbox(event) {\r\n      this.vuetable.onCheckboxToggledAll(event.target.checked)\r\n    },\r\n\r\n    isSelected(rowData) {\r\n      return this.vuetable.isSelectedRow(rowData[this.vuetable.trackBy])\r\n    },\r\n\r\n    isAllItemsInCurrentPageSelected() {\r\n      if (! this.vuetable.tableData) return \r\n\r\n      let idColumn = this.vuetable.trackBy\r\n      let checkbox = this.$el.querySelector('input[type=checkbox]')\r\n      let selected = this.vuetable.tableData.filter( (item) => this.vuetable.isSelectedRow(item[idColumn]) )\r\n\r\n      // count == 0, clear the checkbox\r\n      if (selected.length <= 0) {\r\n        checkbox.indeterminate = false\r\n        return false\r\n      }\r\n      // count > 0 and count < perPage, set checkbox state to 'indeterminate'\r\n      else if (selected.length < this.vuetable.perPage) {\r\n        checkbox.indeterminate = true\r\n        return true\r\n      }\r\n      // count == perPage, set checkbox state to 'checked'\r\n      else {\r\n        checkbox.indeterminate = false\r\n        return true\r\n      }            \r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"node_modules/vuetable-2/src/components"}]}