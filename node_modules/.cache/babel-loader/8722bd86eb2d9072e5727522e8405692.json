{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/mixins/uploadCSVMixin.js","dependencies":[{"path":"/home/dev/work/client-auth/src/mixins/uploadCSVMixin.js","mtime":1579619141318},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _slicedToArray from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/web.dom.iterable\";\nimport checkbox from \"../components/utils/checkbox\";\nimport formInput from \"../components/utils/form-input\";\nimport divider from \"../components/utils/divider\";\nimport popup from \"../components/utils/popup\";\nimport dropdownSelect from \"../components/utils/dropdown-select\";\nimport { processCSVFile, charsetOptions } from \"../utils/processCSV\";\nexport default {\n  components: {\n    formInput: formInput,\n    dropdownSelect: dropdownSelect,\n    checkbox: checkbox,\n    divider: divider,\n    popup: popup\n  },\n  props: {\n    file: {\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      skipHeaders: true,\n      charset: {\n        name: 'UTF-8',\n        value: 'utf-8'\n      },\n      separator: ',',\n      csvArr: [[]],\n      charsetOptions: charsetOptions,\n      mappingFields: []\n    };\n  },\n  mounted: function mounted() {\n    this.processCSV();\n  },\n  computed: {\n    computeHeaders: function computeHeaders() {\n      this.mappingFields.forEach(function (field) {\n        return field.tags ? field.csvArr = [] : field.csv = {};\n      }); // reset previously selected values\n\n      var headers = [];\n\n      if (this.skipHeaders) {\n        for (var i = 0; i < this.csvArr[0].length; i++) {\n          headers.push({\n            name: this.csvArr[0][i],\n            id: i\n          });\n        }\n      } else {\n        for (var _i = 1; _i <= this.csvArr[0].length; _i++) {\n          headers.push({\n            name: \"\".concat(_i, \" row\"),\n            id: _i - 1\n          });\n        }\n      }\n\n      return headers;\n    },\n    computeDisabledSave: function computeDisabledSave() {\n      // find all required fields\n      var required = this.mappingFields.filter(function (field) {\n        return field.required;\n      }); // check if some of them are empty\n\n      return required.some(function (item) {\n        return !Object.entries(item.csv).length;\n      });\n    }\n  },\n  methods: {\n    save: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, index, row, item;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                // entries() need to get index of iteration\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 4;\n                _iterator = this.csvArr.entries()[Symbol.iterator]();\n\n              case 6:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], row = _step$value[1];\n\n                if (!(!this.skipHeaders || this.skipHeaders && index)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                item = this.setFields(row, this.mappingFields);\n                _context.next = 12;\n                return this.addItem(item);\n\n              case 12:\n                _iteratorNormalCompletion = true;\n                _context.next = 6;\n                break;\n\n              case 15:\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 21:\n                _context.prev = 21;\n                _context.prev = 22;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 24:\n                _context.prev = 24;\n\n                if (!_didIteratorError) {\n                  _context.next = 27;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 27:\n                return _context.finish(24);\n\n              case 28:\n                return _context.finish(21);\n\n              case 29:\n                this.$emit('close');\n                _context.next = 34;\n                break;\n\n              case 32:\n                _context.prev = 32;\n                _context.t1 = _context[\"catch\"](0);\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 32], [4, 17, 21, 29], [22,, 24, 28]]);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    setFields: function setFields(row, mappingFields) {\n      var item = {};\n      mappingFields.forEach(function (field) {\n        if (Object.entries(field.csv).length) {\n          item[field.name] = row[field.csv.id];\n        }\n      });\n      return item;\n    },\n    processCSV: function processCSV() {\n      var _this = this;\n\n      var reader = new FileReader();\n      reader.addEventListener('load', function (e) {\n        var file = e.target.result;\n        if (file) _this.csvArr = processCSVFile(file, _this.separator);\n      });\n      reader.readAsText(this.file, this.charset.value);\n    },\n    addItem: function addItem() {}\n  }\n};",{"version":3,"sources":["/home/dev/work/client-auth/src/mixins/uploadCSVMixin.js"],"names":["checkbox","formInput","divider","popup","dropdownSelect","processCSVFile","charsetOptions","components","props","file","required","data","skipHeaders","charset","name","value","separator","csvArr","mappingFields","mounted","processCSV","computed","computeHeaders","forEach","field","tags","csv","headers","i","length","push","id","computeDisabledSave","filter","some","item","Object","entries","methods","save","index","row","setFields","addItem","$emit","reader","FileReader","addEventListener","e","target","result","readAsText"],"mappings":"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","sourcesContent":["import checkbox from '../components/utils/checkbox';\nimport formInput from '../components/utils/form-input';\nimport divider from '../components/utils/divider';\nimport popup from '../components/utils/popup';\nimport dropdownSelect from '../components/utils/dropdown-select';\nimport {processCSVFile, charsetOptions} from \"../utils/processCSV\";\n\nexport default {\n    components: {\n        formInput,\n        dropdownSelect,\n        checkbox,\n        divider,\n        popup\n    },\n    props: {\n        file: {\n            required: true,\n        }\n    },\n    data() {\n        return {\n            skipHeaders: true,\n            charset: {name: 'UTF-8', value: 'utf-8'},\n            separator: ',',\n            csvArr: [[]],\n            charsetOptions,\n            mappingFields: [],\n        }\n    },\n\n    mounted() {\n        this.processCSV();\n    },\n\n    computed: {\n        computeHeaders() {\n            this.mappingFields.forEach(field => field.tags ? field.csvArr = [] : field.csv = {}); // reset previously selected values\n            let headers = [];\n            if (this.skipHeaders) {\n                for (let i = 0; i < this.csvArr[0].length; i++) {\n                    headers.push({name: this.csvArr[0][i], id: i});\n                }\n            } else {\n                for (let i = 1; i <= this.csvArr[0].length; i++) {\n                    headers.push({name: `${i} row`, id: i - 1});\n                }\n            }\n            return headers;\n        },\n\n        computeDisabledSave() {\n            // find all required fields\n            let required = this.mappingFields.filter(field => field.required);\n            // check if some of them are empty\n            return required.some(item => {\n                return !Object.entries(item.csv).length;\n            });\n        }\n    },\n\n    methods: {\n        async save() {\n            try {\n                // entries() need to get index of iteration\n                for (const [index, row] of this.csvArr.entries()) {\n                    // skip 0 index if it is headers\n                    if (!this.skipHeaders || (this.skipHeaders && index)) {\n                        let item = this.setFields(row, this.mappingFields);\n                        await this.addItem(item);\n                    }\n                }\n                this.$emit('close');\n            } catch {\n            }\n        },\n\n        setFields(row, mappingFields) {\n            let item = {};\n            mappingFields.forEach(field => {\n                if (Object.entries(field.csv).length) {\n                    item[field.name] = row[field.csv.id];\n                }\n            });\n            return item;\n        },\n\n        processCSV() {\n            const reader = new FileReader();\n            reader.addEventListener('load', (e) => {\n                    const file = e.target.result;\n                    if (file) this.csvArr = processCSVFile(file, this.separator);\n                }\n            );\n            reader.readAsText(this.file, this.charset.value);\n        },\n\n        addItem() {},\n    }\n}"]}]}