{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/api/directory/license/license.js","dependencies":[{"path":"/home/dev/work/client-auth/src/api/directory/license/license.js","mtime":1580743993921},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport instance from \"../../instance\";\nimport eventBus from \"../../../utils/eventBus\";\nvar BASE_URL = '/license';\nexport function getLicenseList() {\n  return _getLicenseList.apply(this, arguments);\n}\n\nfunction _getLicenseList() {\n  _getLicenseList = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2() {\n    var page,\n        size,\n        search,\n        defaultObject,\n        url,\n        response,\n        _args2 = arguments;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            page = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 0;\n            size = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 10;\n            search = _args2.length > 2 ? _args2[2] : undefined;\n            defaultObject = {\n              // default object prototype, to merge response with it to get all fields\n              remain: 0,\n              limit: 0\n            }; // let url = BASE_URL + `?page=${page}size=${size}`;\n\n            url = BASE_URL + \"?size=\".concat(size);\n            if (search) url += \"&name=\".concat(search, \"*\");\n            _context2.prev = 6;\n            _context2.next = 9;\n            return instance.get(url);\n\n          case 9:\n            response = _context2.sent;\n\n            if (!response.license) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", response.license.map(function (item) {\n              return _objectSpread({}, defaultObject, {}, item);\n            }));\n\n          case 12:\n            return _context2.abrupt(\"return\", []);\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](6);\n            throw _context2.t0;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 15]]);\n  }));\n  return _getLicenseList.apply(this, arguments);\n}\n\nexport var updateLicense =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(certificate) {\n    var url;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = '/customer';\n            _context.prev = 1;\n            _context.next = 4;\n            return instance.put(url, {\n              certificate: certificate\n            });\n\n          case 4:\n            eventBus.$emit('notificationInfo', 'Sucessfully updated');\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 7]]);\n  }));\n\n  return function updateLicense(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/home/dev/work/client-auth/src/api/directory/license/license.js"],"names":["instance","eventBus","BASE_URL","getLicenseList","page","size","search","defaultObject","remain","limit","url","get","response","license","map","item","updateLicense","certificate","put","$emit"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAP;AACA,OAAOC,QAAP;AAEA,IAAMC,QAAQ,GAAG,UAAjB;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;;;0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,IAA9B,8DAAqC,CAArC;AAAwCC,YAAAA,IAAxC,8DAA+C,EAA/C;AAAmDC,YAAAA,MAAnD;AACGC,YAAAA,aADH,GACmB;AAAG;AACrBC,cAAAA,MAAM,EAAE,CADU;AAElBC,cAAAA,KAAK,EAAE;AAFW,aADnB,EAMH;;AACIC,YAAAA,GAPD,GAOOR,QAAQ,mBAAYG,IAAZ,CAPf;AAQH,gBAAIC,MAAJ,EAAYI,GAAG,oBAAaJ,MAAb,MAAH;AART;AAAA;AAAA,mBAWsBN,QAAQ,CAACW,GAAT,CAAaD,GAAb,CAXtB;;AAAA;AAWKE,YAAAA,QAXL;;AAAA,iBAYKA,QAAQ,CAACC,OAZd;AAAA;AAAA;AAAA;;AAAA,8CAaYD,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAqB,UAAAC,IAAI,EAAI;AAChC,uCAAWR,aAAX,MAA6BQ,IAA7B;AACH,aAFM,CAbZ;;AAAA;AAAA,8CAiBQ,EAjBR;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBP,OAAO,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBP,YAAAA,GADmB,GACb,WADa;AAAA;AAAA;AAAA,mBAGfV,QAAQ,CAACkB,GAAT,CAAaR,GAAb,EAAkB;AAACO,cAAAA,WAAW,EAAXA;AAAD,aAAlB,CAHe;;AAAA;AAIrBhB,YAAAA,QAAQ,CAACkB,KAAT,CAAe,kBAAf,EAAmC,qBAAnC;AAJqB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbH,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import instance from '../../instance';\nimport eventBus from \"../../../utils/eventBus\";\n\nconst BASE_URL = '/license';\n\nexport async function getLicenseList(page = 0, size = 10, search) {\n    const defaultObject = {  // default object prototype, to merge response with it to get all fields\n        remain: 0,\n        limit: 0,\n    };\n\n    // let url = BASE_URL + `?page=${page}size=${size}`;\n    let url = BASE_URL + `?size=${size}`;\n    if (search) url += `&name=${search}*`;\n\n    try {\n        let response = await instance.get(url);\n        if (response.license) {\n            return response.license.map(item => {\n                return {...defaultObject, ...item};\n            });\n        }\n        return [];\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport const updateLicense = async (certificate) => {\n    const url = '/customer';\n    try {\n        await instance.put(url, {certificate});\n        eventBus.$emit('notificationInfo', 'Sucessfully updated');\n    } catch (err) {\n        throw err;\n    }\n};"]}]}