{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/contact-center/members/upload-members-popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/contact-center/members/upload-members-popup.vue","mtime":1579614125629},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport _slicedToArray from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tagsInput from \"../../utils/tags-input\";\nimport uploadCSVMixin from \"../../../mixins/uploadCSVMixin\";\nimport { addMember, addMembersList } from \"../../../api/contact-center/queues/queueMembers\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"upload-members-popup\",\n  mixins: [uploadCSVMixin],\n  components: {\n    tagsInput: tagsInput\n  },\n  data: function data() {\n    return {\n      bulk: [],\n      mappingFields: [{\n        name: 'name',\n        required: true,\n        csv: {}\n      }, {\n        name: 'timezoneId',\n        required: true,\n        csv: {}\n      }, {\n        name: 'priority',\n        required: false,\n        csv: {}\n      }, {\n        text: 'Expire',\n        name: 'expireAt',\n        required: false,\n        csv: {}\n      }, {\n        name: 'bucketId',\n        required: false,\n        csv: {}\n      }, {\n        name: 'variables',\n        required: false,\n        tags: true,\n        csvArr: []\n      }, {\n        text: 'Communication destination',\n        name: 'destination',\n        required: true,\n        tags: true,\n        csvArr: []\n      }, {\n        text: 'Communication priority',\n        name: 'priority',\n        required: false,\n        tags: true,\n        csvArr: []\n      }, {\n        text: 'Communication typeId',\n        name: 'typeId',\n        required: true,\n        tags: true,\n        csvArr: []\n      }, {\n        text: 'Communication description',\n        name: 'description',\n        required: false,\n        tags: true,\n        csvArr: []\n      }]\n    };\n  },\n  computed: _objectSpread({}, mapState('ccenter/queues/members', {\n    parentId: function parentId(state) {\n      return state.parentId;\n    }\n  }), {\n    computeDisabledSave: function computeDisabledSave() {\n      // find all required fields\n      var required = this.mappingFields.filter(function (field) {\n        return field.required;\n      }); // check if some of them are empty\n\n      return required.some(function (item) {\n        return item.tags ? !item.csvArr.length : !Object.entries(item.csv).length;\n      });\n    }\n  }),\n  methods: {\n    save: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, index, row, item;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                // entries() need to get index of iteration\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 4;\n\n                for (_iterator = this.csvArr.entries()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], row = _step$value[1];\n\n                  // skip 0 index if it is headers\n                  if (!this.skipHeaders || this.skipHeaders && index) {\n                    item = this.setFields(row, this.mappingFields);\n                    this.bulk.push(item);\n                  }\n                }\n\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 12:\n                _context.prev = 12;\n                _context.prev = 13;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 15:\n                _context.prev = 15;\n\n                if (!_didIteratorError) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 18:\n                return _context.finish(15);\n\n              case 19:\n                return _context.finish(12);\n\n              case 20:\n                _context.next = 22;\n                return addMembersList(this.parentId, this.bulk);\n\n              case 22:\n                this.$emit('close');\n                _context.next = 27;\n                break;\n\n              case 25:\n                _context.prev = 25;\n                _context.t1 = _context[\"catch\"](0);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 25], [4, 8, 12, 20], [13,, 15, 19]]);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    setFields: function setFields(row, mappingFields) {\n      var item = {\n        variables: {},\n        communications: []\n      };\n      mappingFields.forEach(function (field) {\n        if (field.csv && Object.entries(field.csv).length) {\n          var name = field.name;\n\n          if (name.includes('Id')) {\n            name = name.slice(0, -2);\n            item[name] = {\n              id: row[field.csv.id]\n            };\n          } else {\n            item[name] = row[field.csv.id];\n          }\n        }\n      });\n      var communications = mappingFields.filter(function (field) {\n        return field.tags;\n      });\n      communications.forEach(function (field) {\n        field.csvArr.forEach(function (csvItem, index) {\n          var name = field.name;\n\n          if (name === 'variables') {\n            item.variables[csvItem.name] = row[csvItem.id];\n          } else {\n            item.communications[index] = item.communications[index] || {};\n\n            if (name.includes('Id')) {\n              name = name.slice(0, -2);\n              item.communications[index][name] = {\n                id: row[csvItem.id]\n              };\n            } else {\n              item.communications[index][name] = row[csvItem.id];\n            }\n          }\n        });\n      });\n      return item;\n    }\n  }\n};",{"version":3,"sources":["upload-members-popup.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <popup\n            class=\"upload-popup\"\n            :title=\"$t('objects.importCSV')\"\n            :primaryAction=\"save\"\n            :primaryDisabled=\"computeDisabledSave\"\n            @close=\"$emit('close')\"\n    >\n        <section class=\"upload-popup__info\">\n            <checkbox\n                    class=\"upload-popup__info-headers\"\n                    v-model=\"skipHeaders\"\n                    :label=\"$t('objects.CSV.skipHeaders')\"\n            ></checkbox>\n            <form>\n                <dropdown-select\n                        v-model=\"charset\"\n                        :options=\"charsetOptions\"\n                        :label=\"$t('objects.CSV.charSet')\"\n                ></dropdown-select>\n\n                <form-input\n                        v-model=\"separator\"\n                        :label=\"$t('objects.CSV.separator')\"\n                ></form-input>\n            </form>\n        </section>\n\n        <section class=\"CSV-column-match\">\n            <header class=\"column-headers\">\n                <div>{{$t('objects.CSV.fieldName')}}</div>\n                <div>{{$t('objects.CSV.CSVColumn')}}</div>\n            </header>\n            <div class=\"column-rows\">\n                <ul>\n                    <li\n                            v-for=\"(field, key) in mappingFields\"\n                            :key=\"key\"\n                    >\n                        <div>{{field.text || field.name}}<span v-if=\"field.required\">*</span></div>\n                        <tags-input\n                                v-if=\"field.tags\"\n                                v-model=\"field.csvArr\"\n                                :placeholder=\"field.text || field.name\"\n                                :options=\"computeHeaders\"\n                                hide-label\n                                hide-details\n                        ></tags-input>\n                        <dropdown-select\n                                v-else\n                                v-model=\"field.csv\"\n                                :placeholder=\"field.text || field.name\"\n                                :options=\"computeHeaders\"\n                                hide-label\n                                hide-details\n                        ></dropdown-select>\n                    </li>\n                </ul>\n\n            </div>\n        </section>\n    </popup>\n</template>\n\n<script>\n    import tagsInput from '../../utils/tags-input';\n    import uploadCSVMixin from '../../../mixins/uploadCSVMixin';\n    import {addMember, addMembersList} from \"../../../api/contact-center/queues/queueMembers\";\n    import {mapState} from \"vuex\";\n\n    export default {\n        name: \"upload-members-popup\",\n        mixins: [uploadCSVMixin],\n        components: {tagsInput},\n        data() {\n            return {\n                bulk: [],\n                mappingFields: [\n                    {\n                        name: 'name',\n                        required: true,\n                        csv: {}\n                    },\n                    {\n                        name: 'timezoneId',\n                        required: true,\n                        csv: {}\n                    },\n                    {\n                        name: 'priority',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        text: 'Expire',\n                        name: 'expireAt',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        name: 'bucketId',\n                        required: false,\n                        csv: {}\n                    },\n                    {\n                        name: 'variables',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication destination',\n                        name: 'destination',\n                        required: true,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication priority',\n                        name: 'priority',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication typeId',\n                        name: 'typeId',\n                        required: true,\n                        tags: true,\n                        csvArr: []\n                    },\n                    {\n                        text: 'Communication description',\n                        name: 'description',\n                        required: false,\n                        tags: true,\n                        csvArr: []\n                    },\n                ],\n            }\n        },\n\n        computed: {\n            ...mapState('ccenter/queues/members', {\n                parentId: state => state.parentId,\n            }),\n\n            computeDisabledSave() {\n                // find all required fields\n                let required = this.mappingFields.filter(field => field.required);\n                // check if some of them are empty\n                return required.some(item => {\n                    return item.tags ? !item.csvArr.length : !Object.entries(item.csv).length;\n                });\n            },\n        },\n\n        methods: {\n            async save() {\n                try {\n                    // entries() need to get index of iteration\n                    for (const [index, row] of this.csvArr.entries()) {\n                        // skip 0 index if it is headers\n                        if (!this.skipHeaders || (this.skipHeaders && index)) {\n                            let item = this.setFields(row, this.mappingFields);\n                            this.bulk.push(item);\n                        }\n                    }\n                    await addMembersList(this.parentId, this.bulk);\n                    this.$emit('close');\n                } catch {\n                }\n            },\n\n            setFields(row, mappingFields) {\n                let item = {variables: {}, communications: []};\n                mappingFields.forEach(field => {\n                    if (field.csv && Object.entries(field.csv).length) {\n                        let name = field.name;\n                        if (name.includes('Id')) {\n                            name = name.slice(0, -2);\n                            item[name] = {id: row[field.csv.id]};\n                        } else {\n                            item[name] = row[field.csv.id];\n                        }\n                    }\n                });\n                let communications = mappingFields.filter(field => field.tags);\n                communications.forEach(field => {\n                    field.csvArr.forEach((csvItem, index) => {\n                        let name = field.name;\n                        if (name === 'variables') {\n                            item.variables[csvItem.name] = row[csvItem.id];\n                        } else {\n                            item.communications[index] = item.communications[index] || {};\n                            if (name.includes('Id')) {\n                                name = name.slice(0, -2);\n                                item.communications[index][name] = {id: row[csvItem.id]};\n                            } else {\n                                item.communications[index][name] = row[csvItem.id];\n                            }\n                        }\n                    });\n                });\n                return item;\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"../../../assets/css/objects/upload-popup\";\n</style>"],"sourceRoot":"src/components/contact-center/members"}]}