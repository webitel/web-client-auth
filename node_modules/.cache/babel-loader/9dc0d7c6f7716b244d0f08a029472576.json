{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/api/instance.js","dependencies":[{"path":"/home/dev/work/client-auth/src/api/instance.js","mtime":1580815453777},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport eventBus from \"../utils/eventBus\";\nimport { objCamelToSnake, objSnakeToCamel } from \"./utils/caseConverters\"; // global API configuration\n// 'X-Webitel-Access' ~ 'X-Access-Token'\n\nvar instance = axios.create({\n  baseURL: process.env.VUE_APP_API_URL,\n  headers: {\n    'X-Webitel-Access': localStorage.getItem('access-token') || '' // 'X-Webitel-Access': 'USER_TOKEN',\n    // 'X-Webitel-Access': 'ITS_TOKEN',\n\n  }\n});\ninstance.interceptors.request.use(function (request) {\n  if (request.method === 'post' || request.method === 'put' || request.method === 'patch') {\n    if (typeof request.data === 'string') {\n      request.data = JSON.stringify(objCamelToSnake(JSON.parse(request.data)));\n    } else {\n      request.data = objCamelToSnake(request.data);\n    }\n  }\n\n  return request;\n});\ninstance.interceptors.response.use(function (response) {\n  return objSnakeToCamel(response.data);\n}, function (error) {\n  // catches 401 error across all api's\n  if (error.response && error.response.status === 401) {\n    console.warn('intercepted 401');\n    localStorage.removeItem('access-token');\n  } // if error isn't 401, returns it\n\n\n  eventBus.$emit('notificationError', error.response.data.detail);\n  return Promise.reject(error.response.data);\n});\nexport default instance;",{"version":3,"sources":["/home/dev/work/client-auth/src/api/instance.js"],"names":["axios","eventBus","objCamelToSnake","objSnakeToCamel","instance","create","baseURL","process","env","VUE_APP_API_URL","headers","localStorage","getItem","interceptors","request","use","method","data","JSON","stringify","parse","response","error","status","console","warn","removeItem","$emit","detail","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP;AACA,SAAQC,eAAR,EAAyBC,eAAzB,iC,CAEA;AACA;;AACA,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,eADK;AAE1BC,EAAAA,OAAO,EAAE;AACL,wBAAoBC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,EADvD,CAEL;AACA;;AAHK;AAFiB,CAAb,CAAjB;AAUAR,QAAQ,CAACS,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAACD,OAAD,EAAa;AACT,MAAIA,OAAO,CAACE,MAAR,KAAmB,MAAnB,IACAF,OAAO,CAACE,MAAR,KAAmB,KADnB,IAEAF,OAAO,CAACE,MAAR,KAAmB,OAFvB,EAEgC;AAC5B,QAAG,OAAOF,OAAO,CAACG,IAAf,KAAwB,QAA3B,EAAqC;AACjCH,MAAAA,OAAO,CAACG,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAejB,eAAe,CAACgB,IAAI,CAACE,KAAL,CAAWN,OAAO,CAACG,IAAnB,CAAD,CAA9B,CAAf;AACH,KAFD,MAEO;AACHH,MAAAA,OAAO,CAACG,IAAR,GAAef,eAAe,CAACY,OAAO,CAACG,IAAT,CAA9B;AACH;AACJ;;AACD,SAAOH,OAAP;AACH,CAZL;AAeAV,QAAQ,CAACS,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CACI,UAACM,QAAD,EAAc;AACV,SAAOlB,eAAe,CAACkB,QAAQ,CAACJ,IAAV,CAAtB;AACH,CAHL,EAII,UAACK,KAAD,EAAW;AAAE;AACT,MAAIA,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAeE,MAAf,KAA0B,GAAhD,EAAqD;AACjDC,IAAAA,OAAO,CAACC,IAAR,CAAa,iBAAb;AACAd,IAAAA,YAAY,CAACe,UAAb,CAAwB,cAAxB;AACH,GAJM,CAKP;;;AACAzB,EAAAA,QAAQ,CAAC0B,KAAT,CAAe,mBAAf,EAAoCL,KAAK,CAACD,QAAN,CAAeJ,IAAf,CAAoBW,MAAxD;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeR,KAAK,CAACD,QAAN,CAAeJ,IAA9B,CAAP;AACH,CAZL;AAcA,eAAeb,QAAf","sourcesContent":["import axios from 'axios';\nimport eventBus from \"../utils/eventBus\";\nimport {objCamelToSnake, objSnakeToCamel} from \"./utils/caseConverters\";\n\n// global API configuration\n// 'X-Webitel-Access' ~ 'X-Access-Token'\nconst instance = axios.create({\n    baseURL: process.env.VUE_APP_API_URL,\n    headers: {\n        'X-Webitel-Access': localStorage.getItem('access-token') || '',\n        // 'X-Webitel-Access': 'USER_TOKEN',\n        // 'X-Webitel-Access': 'ITS_TOKEN',\n    },\n});\n\n\ninstance.interceptors.request.use(\n    (request) => {\n        if (request.method === 'post' ||\n            request.method === 'put' ||\n            request.method === 'patch') {\n            if(typeof request.data === 'string') {\n                request.data = JSON.stringify(objCamelToSnake(JSON.parse(request.data)));\n            } else {\n                request.data = objCamelToSnake(request.data);\n            }\n        }\n        return request;\n    }\n);\n\ninstance.interceptors.response.use(\n    (response) => {\n        return objSnakeToCamel(response.data);\n    },\n    (error) => { // catches 401 error across all api's\n        if (error.response && error.response.status === 401) {\n            console.warn('intercepted 401');\n            localStorage.removeItem('access-token');\n        }\n        // if error isn't 401, returns it\n        eventBus.$emit('notificationError', error.response.data.detail);\n        return Promise.reject(error.response.data);\n    });\n\nexport default instance;\n"]}]}