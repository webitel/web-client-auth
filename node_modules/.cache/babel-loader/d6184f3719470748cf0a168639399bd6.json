{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/src/utils/processCSV.js","dependencies":[{"path":"/home/dev/work/client-auth/src/utils/processCSV.js","mtime":1579277725701},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nexport var processCSVFile = function processCSVFile(csv) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n  // console.log(csv);\n  var pattern = new RegExp(\"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Delimiters.\n  \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Quoted fields.\n  \"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\" // Standard fields.\n  , \"gi\"); // Create an array to hold our data. Give the array\n  // a default empty first row.\n\n  var arrData = [[]]; // Create an array to hold our individual pattern\n  // matching groups.\n\n  var arrMatches = pattern.exec(csv); // Keep looping over the regular expression matches\n  // until we can no longer find a match.\n\n  while (arrMatches) {\n    var matchedDelimiter = arrMatches[1];\n\n    if (matchedDelimiter.length && matchedDelimiter !== delimiter) {\n      // Since we have reached a new row of data,\n      // add an empty row to our data array.\n      arrData.push([]);\n    }\n\n    var strMatchedValue = void 0; // Now that we have our delimiter out of the way,\n    // let's check to see which kind of value we\n    // captured (quoted or unquoted).\n\n    if (arrMatches[2]) {\n      // We found a quoted value. When we capture\n      // this value, unescape any double quotes.\n      strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n    } else {\n      // We found a non-quoted value.\n      strMatchedValue = arrMatches[3];\n    } // Now that we have our value string, let's add\n    // it to the data array.\n\n\n    arrData[arrData.length - 1].push(strMatchedValue); // next loop step\n\n    arrMatches = pattern.exec(csv);\n  } // Return the parsed data.\n\n\n  return arrData.slice(0, -1);\n};\nexport var charsetOptions = [{\n  \"value\": \"utf-8\",\n  \"name\": \"UTF-8\"\n}, {\n  \"value\": \"cp866\",\n  \"name\": \"IBM866\"\n}, {\n  \"value\": \"iso-8859-2\",\n  \"name\": \"ISO-8859-2\"\n}, {\n  \"value\": \"iso-8859-3\",\n  \"name\": \"ISO-8859-3\"\n}, {\n  \"value\": \"iso-8859-4\",\n  \"name\": \"ISO-8859-4\"\n}, {\n  \"value\": \"iso-8859-5\",\n  \"name\": \"ISO-8859-5\"\n}, {\n  \"value\": \"iso-8859-6\",\n  \"name\": \"ISO-8859-6\"\n}, {\n  \"value\": \"iso-8859-7\",\n  \"name\": \"ISO-8859-7\"\n}, {\n  \"value\": \"iso-8859-8\",\n  \"name\": \"ISO-8859-8\"\n}, {\n  \"value\": \"iso-8859-8-i\",\n  \"name\": \"ISO-8859-8-I\"\n}, {\n  \"value\": \"iso8859-10\",\n  \"name\": \"ISO-8859-10\"\n}, {\n  \"value\": \"iso-8859-13\",\n  \"name\": \"ISO-8859-13\"\n}, {\n  \"value\": \"iso-8859-14\",\n  \"name\": \"ISO-8859-14\"\n}, {\n  \"value\": \"iso-8859-15\",\n  \"name\": \"ISO-8859-15\"\n}, {\n  \"value\": \"iso-8859-16\",\n  \"name\": \"ISO-8859-16\"\n}, {\n  \"value\": \"koi8-r\",\n  \"name\": \"KOI8-R\"\n}, {\n  \"value\": \"koi8-u\",\n  \"name\": \"KOI8-U\"\n}, {\n  \"value\": \"macintosh\",\n  \"name\": \"macintosh\"\n}, {\n  \"value\": \"windows-874\",\n  \"name\": \"windows-874\"\n}, {\n  \"value\": \"windows-1250\",\n  \"name\": \"windows-1250\"\n}, {\n  \"value\": \"windows-1251\",\n  \"name\": \"windows-1251\"\n}, {\n  \"value\": \"windows-1252\",\n  \"name\": \"windows-1252\"\n}, {\n  \"value\": \"windows-1253\",\n  \"name\": \"windows-1253\"\n}, {\n  \"value\": \"windows-1254\",\n  \"name\": \"windows-1254\"\n}, {\n  \"value\": \"windows-1255\",\n  \"name\": \"windows-1255\"\n}, {\n  \"value\": \"windows-1256\",\n  \"name\": \"windows-1256\"\n}, {\n  \"value\": \"windows-1257\",\n  \"name\": \"windows-1257\"\n}, {\n  \"value\": \"windows-1258\",\n  \"name\": \"windows-1258\"\n}, {\n  \"value\": \"x-mac-cyrillic\",\n  \"name\": \"x-mac-cyrillic\"\n}, {\n  \"value\": \"gbk\",\n  \"name\": \"GBK\"\n}, {\n  \"value\": \"gb18030\",\n  \"name\": \"gb18030\"\n}, {\n  \"value\": \"big5\",\n  \"name\": \"Big5\"\n}, {\n  \"value\": \"euc-jp\",\n  \"name\": \"EUC-JP\"\n}, {\n  \"value\": \"iso-2022-jp\",\n  \"name\": \"ISO-2022-JP\"\n}, {\n  \"value\": \"shift-jis\",\n  \"name\": \"Shift_JIS\"\n}, {\n  \"value\": \"euc-kr\",\n  \"name\": \"EUC-KR\"\n}, {\n  \"value\": \"replacement\",\n  \"name\": \"replacement\"\n}, {\n  \"value\": \"utf-16be\",\n  \"name\": \"UTF-16BE\"\n}, {\n  \"value\": \"utf-16le\",\n  \"name\": \"UTF-16LE\"\n}, {\n  \"value\": \"x-user-defined\",\n  \"name\": \"x-user-defined\"\n}];",{"version":3,"sources":["/home/dev/work/client-auth/src/utils/processCSV.js"],"names":["processCSVFile","csv","delimiter","pattern","RegExp","arrData","arrMatches","exec","matchedDelimiter","length","push","strMatchedValue","replace","slice","charsetOptions"],"mappings":"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","sourcesContent":["export const processCSVFile = (csv, delimiter = ',') => {\n    // console.log(csv);\n    const pattern = new RegExp((\n        \"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Delimiters.\n        \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Quoted fields.\n        \"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\" // Standard fields.\n    ), \"gi\");\n\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    const arrData = [[]];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    let arrMatches = pattern.exec(csv);\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (arrMatches) {\n        const matchedDelimiter = arrMatches[1];\n        if (matchedDelimiter.length && matchedDelimiter !== delimiter) {\n            // Since we have reached a new row of data,\n            // add an empty row to our data array.\n            arrData.push([]);\n        }\n        let strMatchedValue;\n        // Now that we have our delimiter out of the way,\n        // let's check to see which kind of value we\n        // captured (quoted or unquoted).\n        if (arrMatches[2]) {\n            // We found a quoted value. When we capture\n            // this value, unescape any double quotes.\n            strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n        } else {\n            // We found a non-quoted value.\n            strMatchedValue = arrMatches[3];\n\n        }\n        // Now that we have our value string, let's add\n        // it to the data array.\n        arrData[arrData.length - 1].push(strMatchedValue);\n\n        // next loop step\n        arrMatches = pattern.exec(csv);\n    }\n    // Return the parsed data.\n    return arrData.slice(0, -1);\n};\n\nexport const charsetOptions = [\n    {\n        \"value\": \"utf-8\",\n        \"name\": \"UTF-8\",\n    },\n    {\n        \"value\": \"cp866\",\n        \"name\": \"IBM866\",\n    },\n    {\n        \"value\": \"iso-8859-2\",\n        \"name\": \"ISO-8859-2\"\n    },\n    {\n        \"value\": \"iso-8859-3\",\n        \"name\": \"ISO-8859-3\"\n    },\n    {\n        \"value\": \"iso-8859-4\",\n        \"name\": \"ISO-8859-4\"\n    },\n    {\n        \"value\": \"iso-8859-5\",\n        \"name\": \"ISO-8859-5\"\n    },\n    {\n        \"value\": \"iso-8859-6\",\n        \"name\": \"ISO-8859-6\"\n    },\n    {\n        \"value\": \"iso-8859-7\",\n        \"name\": \"ISO-8859-7\"\n    },\n    {\n        \"value\": \"iso-8859-8\",\n        \"name\": \"ISO-8859-8\"\n    },\n    {\n        \"value\": \"iso-8859-8-i\",\n        \"name\": \"ISO-8859-8-I\"\n    },\n    {\n        \"value\": \"iso8859-10\",\n        \"name\": \"ISO-8859-10\"\n    },\n    {\n        \"value\": \"iso-8859-13\",\n        \"name\": \"ISO-8859-13\"\n    },\n    {\n        \"value\": \"iso-8859-14\",\n        \"name\": \"ISO-8859-14\"\n    },\n    {\n        \"value\": \"iso-8859-15\",\n        \"name\": \"ISO-8859-15\"\n    },\n    {\n        \"value\": \"iso-8859-16\",\n        \"name\": \"ISO-8859-16\"\n    },\n    {\n        \"value\": \"koi8-r\",\n        \"name\": \"KOI8-R\"\n    },\n    {\n        \"value\": \"koi8-u\",\n        \"name\": \"KOI8-U\"\n    },\n    {\n        \"value\": \"macintosh\",\n        \"name\": \"macintosh\"\n    },\n    {\n        \"value\": \"windows-874\",\n        \"name\": \"windows-874\"\n    },\n    {\n        \"value\": \"windows-1250\",\n        \"name\": \"windows-1250\"\n    },\n    {\n        \"value\": \"windows-1251\",\n        \"name\": \"windows-1251\"\n    },\n    {\n        \"value\": \"windows-1252\",\n        \"name\": \"windows-1252\"\n    },\n    {\n        \"value\": \"windows-1253\",\n        \"name\": \"windows-1253\"\n    },\n    {\n        \"value\": \"windows-1254\",\n        \"name\": \"windows-1254\"\n    },\n    {\n        \"value\": \"windows-1255\",\n        \"name\": \"windows-1255\"\n    },\n    {\n        \"value\": \"windows-1256\",\n        \"name\": \"windows-1256\"\n    },\n    {\n        \"value\": \"windows-1257\",\n        \"name\": \"windows-1257\"\n    },\n    {\n        \"value\": \"windows-1258\",\n        \"name\": \"windows-1258\"\n    },\n    {\n        \"value\": \"x-mac-cyrillic\",\n        \"name\": \"x-mac-cyrillic\"\n    },\n    {\n        \"value\": \"gbk\",\n        \"name\": \"GBK\"\n    },\n    {\n        \"value\": \"gb18030\",\n        \"name\": \"gb18030\"\n    },\n    {\n        \"value\": \"big5\",\n        \"name\": \"Big5\"\n    },\n    {\n        \"value\": \"euc-jp\",\n        \"name\": \"EUC-JP\"\n    },\n    {\n        \"value\": \"iso-2022-jp\",\n        \"name\": \"ISO-2022-JP\"\n    },\n    {\n        \"value\": \"shift-jis\",\n        \"name\": \"Shift_JIS\"\n    },\n    {\n        \"value\": \"euc-kr\",\n        \"name\": \"EUC-KR\"\n    },\n    {\n        \"value\": \"replacement\",\n        \"name\": \"replacement\"\n    },\n    {\n        \"value\": \"utf-16be\",\n        \"name\": \"UTF-16BE\"\n    },\n    {\n        \"value\": \"utf-16le\",\n        \"name\": \"UTF-16LE\"\n    },\n    {\n        \"value\": \"x-user-defined\",\n        \"name\": \"x-user-defined\"\n    }\n];"]}]}