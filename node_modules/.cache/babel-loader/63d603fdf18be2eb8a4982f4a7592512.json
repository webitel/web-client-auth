{"remainingRequest":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js!/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dev/work/client-auth/src/components/integrations/storage/opened-storage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dev/work/client-auth/src/components/integrations/storage/opened-storage.vue","mtime":1580907129872},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dev/work/client-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/dev/work/client-auth/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport openedStorageGeneral from \"./opened-storage-general\";\nimport openedStorageLocal from \"./opened-storage-local\";\nimport openedStorageS3 from \"./opened-storage-s3\";\nimport openedStorageBackblaze from \"./opened-storage-backblaze\";\nimport openedStorageDropbox from \"./opened-storage-dropbox\";\nimport openedStorageDrive from \"./opened-storage-drive\";\nimport editComponentMixin from '@/mixins/editComponentMixin';\nimport { required, email } from 'vuelidate/lib/validators';\nimport { mapActions, mapState } from \"vuex\";\nexport default {\n  name: \"opened-storage\",\n  mixins: [editComponentMixin],\n  components: {\n    openedStorageGeneral: openedStorageGeneral,\n    openedStorageLocal: openedStorageLocal,\n    openedStorageS3: openedStorageS3,\n    openedStorageBackblaze: openedStorageBackblaze,\n    openedStorageDropbox: openedStorageDropbox,\n    openedStorageDrive: openedStorageDrive\n  },\n  data: function data() {\n    return {};\n  },\n  validations: function validations() {\n    switch (this.$route.params.type) {\n      case 'local':\n        return {\n          itemInstance: {\n            name: {\n              required: required\n            }\n          }\n        };\n\n      case 's3':\n        return {\n          itemInstance: {\n            name: {\n              required: required\n            },\n            properties: {\n              keyId: {\n                required: required\n              },\n              accessKey: {\n                required: required\n              },\n              bucketName: {\n                required: required\n              },\n              region: {\n                required: required\n              },\n              endpoint: {\n                required: required\n              }\n            }\n          }\n        };\n\n      case 'backblaze':\n        return {\n          itemInstance: {\n            name: {\n              required: required\n            },\n            account: {\n              required: required\n            },\n            key: {\n              required: required\n            },\n            bucket: {\n              required: required\n            },\n            bucketId: {\n              required: required\n            }\n          }\n        };\n\n      case 'dropbox':\n        return {\n          itemInstance: {\n            name: {\n              required: required\n            },\n            properties: {\n              token: {\n                required: required\n              }\n            }\n          }\n        };\n\n      case 'drive':\n        return {\n          itemInstance: {\n            name: {\n              required: required\n            },\n            properties: {\n              directory: {\n                required: required\n              },\n              privateKey: {\n                required: required\n              },\n              email: {\n                required: required\n              }\n            }\n          }\n        };\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.$route.params.id;\n    this.loadItem(this.$route.params.type);\n  },\n  computed: _objectSpread({}, mapState('integrations/storage', {\n    itemInstance: function itemInstance(state) {\n      return state.itemInstance;\n    }\n  }), {\n    id: {\n      get: function get() {\n        return this.$store.state.integrations.storage.itemId;\n      },\n      set: function set(value) {\n        this.setId(value);\n      }\n    },\n    tabs: function tabs() {\n      var tabs = [{\n        text: this.$t('objects.general'),\n        value: 'general'\n      }];\n\n      switch (this.$route.params.type) {\n        case 'local':\n          tabs.push({\n            text: this.$t('objects.integrations.storage.configuration'),\n            value: 'local'\n          });\n          break;\n\n        case 's3':\n          tabs.push({\n            text: this.$t('objects.integrations.storage.configuration'),\n            value: 's3'\n          });\n          break;\n\n        case 'backblaze':\n          tabs.push({\n            text: this.$t('objects.integrations.storage.configuration'),\n            value: 'backblaze'\n          });\n          break;\n\n        case 'dropbox':\n          tabs.push({\n            text: this.$t('objects.integrations.storage.configuration'),\n            value: 'dropbox'\n          });\n          break;\n\n        case 'drive':\n          tabs.push({\n            text: this.$t('objects.integrations.storage.configuration'),\n            value: 'drive'\n          });\n          break;\n      }\n\n      return tabs;\n    }\n  }),\n  methods: _objectSpread({}, mapActions('integrations/storage', {\n    setId: 'SET_ITEM_ID',\n    loadItem: 'LOAD_ITEM',\n    addItem: 'ADD_ITEM',\n    updateItem: 'UPDATE_ITEM'\n  }))\n};",{"version":3,"sources":["opened-storage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"content-wrap\">\n        <object-header\n                :primaryText=\"computePrimaryText\"\n                :primaryAction=\"save\"\n                :primaryDisabled=\"computeDisabled\"\n                close\n        >\n            {{$t('objects.integrations.storage.storage')}} |\n            {{computeTitle}}\n        </object-header>\n        <tabs-component\n                :tabs=\"tabs\"\n                :root=\"$options.name\"\n        >\n            <template slot=\"component\" slot-scope=\"props\">\n                <component\n                        class=\"tabs-inner-component\"\n                        :is=\"props.currentTab\"\n                        :v=\"$v\"\n                ></component>\n            </template>\n        </tabs-component>\n    </div>\n</template>\n\n<script>\n    import openedStorageGeneral from './opened-storage-general';\n    import openedStorageLocal from './opened-storage-local';\n    import openedStorageS3 from './opened-storage-s3';\n    import openedStorageBackblaze from './opened-storage-backblaze';\n    import openedStorageDropbox from './opened-storage-dropbox';\n    import openedStorageDrive from './opened-storage-drive';\n    import editComponentMixin from '@/mixins/editComponentMixin';\n    import {required, email} from 'vuelidate/lib/validators';\n    import {mapActions, mapState} from \"vuex\";\n\n    export default {\n        name: \"opened-storage\",\n        mixins: [editComponentMixin],\n        components: {\n            openedStorageGeneral,\n            openedStorageLocal,\n            openedStorageS3,\n            openedStorageBackblaze,\n            openedStorageDropbox,\n            openedStorageDrive,\n        },\n        data() {\n            return {};\n        },\n\n        validations() {\n            switch (this.$route.params.type) {\n                case 'local':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                        }\n                    };\n                case 's3':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                keyId: {required},\n                                accessKey: {required},\n                                bucketName: {required},\n                                region: {required},\n                                endpoint: {required}\n                            },\n                        }\n                    };\n                case 'backblaze':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            account: {required},\n                            key: {required},\n                            bucket: {required},\n                            bucketId: {required},\n                        }\n                    };\n                case 'dropbox':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                token: {required},\n                            },\n                        }\n                    };\n                case 'drive':\n                    return {\n                        itemInstance: {\n                            name: {required},\n                            properties: {\n                                directory: {required},\n                                privateKey: {required},\n                                email: {required},\n                            },\n                        }\n                    };\n            }\n        },\n\n        mounted() {\n            this.id = this.$route.params.id;\n            this.loadItem(this.$route.params.type);\n        },\n\n        computed: {\n            ...mapState('integrations/storage', {\n                itemInstance: state => state.itemInstance,\n            }),\n            id: {\n                get() {\n                    return this.$store.state.integrations.storage.itemId\n                },\n                set(value) {\n                    this.setId(value)\n                }\n            },\n            tabs() {\n                const tabs = [{text: this.$t('objects.general'), value: 'general'}];\n                switch (this.$route.params.type) {\n                    case 'local':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'local'});\n                        break;\n                    case 's3':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 's3'});\n                        break;\n                    case 'backblaze':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'backblaze'});\n                        break;\n                    case 'dropbox':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'dropbox'});\n                        break;\n                    case 'drive':\n                        tabs.push({text: this.$t('objects.integrations.storage.configuration'), value: 'drive'});\n                        break;\n                }\n                return tabs;\n            }\n        },\n\n        methods: {\n            ...mapActions('integrations/storage', {\n                setId: 'SET_ITEM_ID',\n                loadItem: 'LOAD_ITEM',\n                addItem: 'ADD_ITEM',\n                updateItem: 'UPDATE_ITEM',\n            }),\n        },\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/integrations/storage"}]}